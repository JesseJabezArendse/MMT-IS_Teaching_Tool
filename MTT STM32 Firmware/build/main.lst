ARM GAS  C:\Temp\cc4ZtMPR.s 			page 1


   1              		.cpu cortex-m4
   2              		.arch armv7e-m
   3              		.fpu fpv4-sp-d16
   4              		.eabi_attribute 27, 1
   5              		.eabi_attribute 28, 1
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 1
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.file	"main.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.file 1 "Core/Src/main.c"
  20              		.section	.text.MX_GPIO_Init,"ax",%progbits
  21              		.align	1
  22              		.syntax unified
  23              		.thumb
  24              		.thumb_func
  26              	MX_GPIO_Init:
  27              	.LFB259:
   1:Core/Src/main.c **** /* USER CODE BEGIN Header */
   2:Core/Src/main.c **** /**
   3:Core/Src/main.c ****   ******************************************************************************
   4:Core/Src/main.c ****   * @file           : main.c
   5:Core/Src/main.c ****   * @brief          : Main program body
   6:Core/Src/main.c ****   * @authors        : Jesse Jabez Arendse
   7:Core/Src/main.c ****   ******************************************************************************
   8:Core/Src/main.c ****   * @attention
   9:Core/Src/main.c ****   *
  10:Core/Src/main.c ****   * Copyright (c) 2023 STMicroelectronics.
  11:Core/Src/main.c ****   * All rights reserved.
  12:Core/Src/main.c ****   *
  13:Core/Src/main.c ****   * This software is licensed under terms that can be found in the LICENSE file
  14:Core/Src/main.c ****   * in the root directory of this software component.
  15:Core/Src/main.c ****   * If no LICENSE file comes with this software, it is provided AS-IS.
  16:Core/Src/main.c ****   *
  17:Core/Src/main.c ****   ******************************************************************************
  18:Core/Src/main.c ****   */
  19:Core/Src/main.c **** /* USER CODE END Header */
  20:Core/Src/main.c **** /* Includes ------------------------------------------------------------------*/
  21:Core/Src/main.c **** #include "main.h"
  22:Core/Src/main.c **** 
  23:Core/Src/main.c **** /* Private includes ----------------------------------------------------------*/
  24:Core/Src/main.c **** /* USER CODE BEGIN Includes */
  25:Core/Src/main.c **** #include <math.h>
  26:Core/Src/main.c **** #include <string.h>
  27:Core/Src/main.c **** #include <stdio.h>
  28:Core/Src/main.c **** #include <stdbool.h>
  29:Core/Src/main.c **** 
  30:Core/Src/main.c **** #include "7SegDisplay.h"
  31:Core/Src/main.c **** #include "CurrentMonitor.h"
ARM GAS  C:\Temp\cc4ZtMPR.s 			page 2


  32:Core/Src/main.c **** #include "Pots.h"
  33:Core/Src/main.c **** #include "IMU.h"
  34:Core/Src/main.c **** #include "StepperMotor.h"
  35:Core/Src/main.c **** #include "ServoMotors.h"
  36:Core/Src/main.c **** #include "Relays.h"
  37:Core/Src/main.c **** #include "NeoPixels.h"
  38:Core/Src/main.c **** #include "USB.h"
  39:Core/Src/main.c **** 
  40:Core/Src/main.c **** 
  41:Core/Src/main.c **** /* USER CODE END Includes */
  42:Core/Src/main.c **** 
  43:Core/Src/main.c **** /* Private typedef -----------------------------------------------------------*/
  44:Core/Src/main.c **** /* USER CODE BEGIN PTD */
  45:Core/Src/main.c **** typedef enum {
  46:Core/Src/main.c ****     WAITING_FOR_HEADER,
  47:Core/Src/main.c **** 	WAITING_FOR_DATA,
  48:Core/Src/main.c ****     RESPONDING
  49:Core/Src/main.c **** } fsm;
  50:Core/Src/main.c **** 
  51:Core/Src/main.c **** /* USER CODE END PTD */
  52:Core/Src/main.c **** 
  53:Core/Src/main.c **** /* Private define ------------------------------------------------------------*/
  54:Core/Src/main.c **** /* USER CODE BEGIN PD */
  55:Core/Src/main.c **** #define MPU_ADDRESS		0b1101001<<1
  56:Core/Src/main.c **** 
  57:Core/Src/main.c **** #define DATA_LEN 19
  58:Core/Src/main.c **** 
  59:Core/Src/main.c **** /* USER CODE END PD */
  60:Core/Src/main.c **** 
  61:Core/Src/main.c **** /* Private macro -------------------------------------------------------------*/
  62:Core/Src/main.c **** /* USER CODE BEGIN PM */
  63:Core/Src/main.c **** 
  64:Core/Src/main.c **** /* USER CODE END PM */
  65:Core/Src/main.c **** 
  66:Core/Src/main.c **** /* Private variables ---------------------------------------------------------*/
  67:Core/Src/main.c **** ADC_HandleTypeDef hadc1;
  68:Core/Src/main.c **** DMA_HandleTypeDef hdma_adc1;
  69:Core/Src/main.c **** 
  70:Core/Src/main.c **** I2C_HandleTypeDef hi2c1;
  71:Core/Src/main.c **** I2C_HandleTypeDef hi2c2;
  72:Core/Src/main.c **** 
  73:Core/Src/main.c **** TIM_HandleTypeDef htim1;
  74:Core/Src/main.c **** TIM_HandleTypeDef htim2;
  75:Core/Src/main.c **** TIM_HandleTypeDef htim3;
  76:Core/Src/main.c **** TIM_HandleTypeDef htim4;
  77:Core/Src/main.c **** TIM_HandleTypeDef htim5;
  78:Core/Src/main.c **** TIM_HandleTypeDef htim6;
  79:Core/Src/main.c **** TIM_HandleTypeDef htim7;
  80:Core/Src/main.c **** TIM_HandleTypeDef htim8;
  81:Core/Src/main.c **** TIM_HandleTypeDef htim14;
  82:Core/Src/main.c **** DMA_HandleTypeDef hdma_tim2_up_ch3;
  83:Core/Src/main.c **** 
  84:Core/Src/main.c **** UART_HandleTypeDef huart4;
  85:Core/Src/main.c **** DMA_HandleTypeDef hdma_uart4_rx;
  86:Core/Src/main.c **** 
  87:Core/Src/main.c **** /* USER CODE BEGIN PV */
  88:Core/Src/main.c **** 
ARM GAS  C:\Temp\cc4ZtMPR.s 			page 3


  89:Core/Src/main.c **** uint16_t POTS[ADC_CHANNEL_NUM];
  90:Core/Src/main.c **** const uint8_t adcChannelCount = 4;
  91:Core/Src/main.c **** 
  92:Core/Src/main.c **** volatile bool switch_states[8];
  93:Core/Src/main.c **** uint8_t switch_states_uint8 = 0;
  94:Core/Src/main.c **** 
  95:Core/Src/main.c **** volatile bool LED_states[8];
  96:Core/Src/main.c **** 
  97:Core/Src/main.c **** volatile bool Relay_states[8];
  98:Core/Src/main.c **** 
  99:Core/Src/main.c **** volatile uint8_t NeoPixel_states[4][3];
 100:Core/Src/main.c **** 
 101:Core/Src/main.c **** // X,Y,Z
 102:Core/Src/main.c **** volatile float IMU_Accel[3];
 103:Core/Src/main.c **** volatile float IMU_Gyro[3];
 104:Core/Src/main.c **** 
 105:Core/Src/main.c **** // V,I
 106:Core/Src/main.c **** volatile int16_t CurrentMonitor_Barrel[2];
 107:Core/Src/main.c **** volatile int16_t CurrentMonitor_Servo[2];
 108:Core/Src/main.c **** volatile int16_t CurrentMonitor_Stepper[2];
 109:Core/Src/main.c **** 
 110:Core/Src/main.c **** volatile uint8_t SEG_number_state[4];
 111:Core/Src/main.c **** float actualSegNumber = 0.0f;
 112:Core/Src/main.c **** 
 113:Core/Src/main.c **** volatile uint8_t Servo_state[4][3][2];
 114:Core/Src/main.c **** uint16_t actualServoState[4][3];
 115:Core/Src/main.c **** 
 116:Core/Src/main.c **** volatile uint8_t StepperMode_state;
 117:Core/Src/main.c **** volatile uint8_t StepperRevolution_state[2];
 118:Core/Src/main.c **** uint16_t actualStepperRevolution = 0;
 119:Core/Src/main.c **** volatile uint8_t StepperSpeed_state[2];
 120:Core/Src/main.c **** uint16_t actualStepperNumber = 0;
 121:Core/Src/main.c **** 
 122:Core/Src/main.c **** const uint8_t header1 = 0b10010010; //seemed unique enough
 123:Core/Src/main.c **** const uint8_t header2 = 0b01001001;
 124:Core/Src/main.c **** 
 125:Core/Src/main.c **** char message[] = "Transmission\r\n"; /* Message to be transmitted through UART */
 126:Core/Src/main.c **** 
 127:Core/Src/main.c **** fsm state = WAITING_FOR_HEADER;
 128:Core/Src/main.c **** 
 129:Core/Src/main.c **** uint8_t cmd_id = 0x00;
 130:Core/Src/main.c **** 
 131:Core/Src/main.c **** 
 132:Core/Src/main.c **** /* USER CODE END PV */
 133:Core/Src/main.c **** 
 134:Core/Src/main.c **** /* Private function prototypes -----------------------------------------------*/
 135:Core/Src/main.c **** void SystemClock_Config(void);
 136:Core/Src/main.c **** static void MX_GPIO_Init(void);
 137:Core/Src/main.c **** static void MX_DMA_Init(void);
 138:Core/Src/main.c **** static void MX_TIM2_Init(void);
 139:Core/Src/main.c **** static void MX_I2C1_Init(void);
 140:Core/Src/main.c **** static void MX_ADC1_Init(void);
 141:Core/Src/main.c **** static void MX_TIM7_Init(void);
 142:Core/Src/main.c **** static void MX_TIM6_Init(void);
 143:Core/Src/main.c **** static void MX_I2C2_Init(void);
 144:Core/Src/main.c **** static void MX_TIM4_Init(void);
 145:Core/Src/main.c **** static void MX_TIM1_Init(void);
ARM GAS  C:\Temp\cc4ZtMPR.s 			page 4


 146:Core/Src/main.c **** static void MX_TIM3_Init(void);
 147:Core/Src/main.c **** static void MX_TIM5_Init(void);
 148:Core/Src/main.c **** static void MX_UART4_Init(void);
 149:Core/Src/main.c **** static void MX_TIM14_Init(void);
 150:Core/Src/main.c **** static void MX_TIM8_Init(void);
 151:Core/Src/main.c **** /* USER CODE BEGIN PFP */
 152:Core/Src/main.c **** 
 153:Core/Src/main.c **** // converts bool array to a 8-bit byte for easy register writing
 154:Core/Src/main.c **** uint8_t toByte(bool bool_array[]){
 155:Core/Src/main.c ****   return (bool_array[0]<<7|
 156:Core/Src/main.c ****           bool_array[1]<<6|
 157:Core/Src/main.c ****           bool_array[2]<<5|
 158:Core/Src/main.c ****           bool_array[3]<<4|
 159:Core/Src/main.c ****           bool_array[4]<<3|
 160:Core/Src/main.c ****           bool_array[5]<<2|
 161:Core/Src/main.c ****           bool_array[6]<<1|
 162:Core/Src/main.c ****           bool_array[7]<<0
 163:Core/Src/main.c ****   );
 164:Core/Src/main.c **** }
 165:Core/Src/main.c **** 
 166:Core/Src/main.c **** int32_t signNumber32(uint32_t unsignedValue){
 167:Core/Src/main.c **** 	int32_t signedValue;
 168:Core/Src/main.c **** 
 169:Core/Src/main.c **** 	if (unsignedValue <= INT32_MAX) {
 170:Core/Src/main.c ****         signedValue = (int32_t)unsignedValue; // No change needed, it fits in the signed range.
 171:Core/Src/main.c ****     } else {
 172:Core/Src/main.c ****         signedValue = -((int32_t)(UINT32_MAX - unsignedValue + 1));
 173:Core/Src/main.c ****     }
 174:Core/Src/main.c **** 
 175:Core/Src/main.c **** 	return signedValue;
 176:Core/Src/main.c **** }
 177:Core/Src/main.c **** 
 178:Core/Src/main.c **** /* USER CODE END PFP */
 179:Core/Src/main.c **** 
 180:Core/Src/main.c **** /* Private user code ---------------------------------------------------------*/
 181:Core/Src/main.c **** /* USER CODE BEGIN 0 */
 182:Core/Src/main.c **** 
 183:Core/Src/main.c **** uint8_t UART4_txBuffer[6] = {0};
 184:Core/Src/main.c **** 
 185:Core/Src/main.c **** void sendToSimulink(void){
 186:Core/Src/main.c ****   // Get toggle states
 187:Core/Src/main.c **** 	switch_states[7] = HAL_GPIO_ReadPin(TOG_0_GPIO_Port, TOG_0_Pin);
 188:Core/Src/main.c **** 	switch_states[6] = HAL_GPIO_ReadPin(TOG_1_GPIO_Port, TOG_1_Pin);
 189:Core/Src/main.c **** 	switch_states[5] = HAL_GPIO_ReadPin(TOG_2_GPIO_Port, TOG_2_Pin);
 190:Core/Src/main.c **** 	switch_states[4] = HAL_GPIO_ReadPin(TOG_3_GPIO_Port, TOG_3_Pin);
 191:Core/Src/main.c **** 	// Get button states (inverted because normally high)
 192:Core/Src/main.c **** 	switch_states[3] = !HAL_GPIO_ReadPin(SW_0_GPIO_Port, SW_0_Pin);
 193:Core/Src/main.c **** 	switch_states[2] = !HAL_GPIO_ReadPin(SW_1_GPIO_Port, SW_1_Pin);
 194:Core/Src/main.c **** 	switch_states[1] = !HAL_GPIO_ReadPin(SW_2_GPIO_Port, SW_2_Pin);
 195:Core/Src/main.c **** 	switch_states[0] = !HAL_GPIO_ReadPin(SW_3_GPIO_Port, SW_3_Pin);
 196:Core/Src/main.c **** 
 197:Core/Src/main.c ****   switch_states_uint8 = toByte(switch_states);
 198:Core/Src/main.c **** 
 199:Core/Src/main.c ****     HAL_UART_Transmit(&huart4, (uint8_t *)&header1, sizeof(header1), 10);
 200:Core/Src/main.c ****     HAL_UART_Transmit(&huart4, (uint8_t *)&POTS, sizeof(POTS), 10);
 201:Core/Src/main.c ****     HAL_UART_Transmit(&huart4, (uint8_t *)&switch_states_uint8, sizeof(switch_states_uint8), 10);
 202:Core/Src/main.c ****     HAL_UART_Transmit(&huart4, (float_t *)&IMU_Accel, sizeof(IMU_Accel), 10);
ARM GAS  C:\Temp\cc4ZtMPR.s 			page 5


 203:Core/Src/main.c ****     HAL_UART_Transmit(&huart4, (float_t *)&IMU_Gyro, sizeof(IMU_Gyro), 10);
 204:Core/Src/main.c **** 
 205:Core/Src/main.c ****     HAL_UART_Transmit(&huart4, (int16_t *)&CurrentMonitor_Barrel, sizeof(CurrentMonitor_Barrel), 10
 206:Core/Src/main.c ****     HAL_UART_Transmit(&huart4, (int16_t *)&CurrentMonitor_Servo, sizeof(CurrentMonitor_Servo), 10);
 207:Core/Src/main.c ****     HAL_UART_Transmit(&huart4, (int16_t *)&CurrentMonitor_Stepper, sizeof(CurrentMonitor_Stepper), 
 208:Core/Src/main.c **** }
 209:Core/Src/main.c **** 
 210:Core/Src/main.c **** void updateBoard(void){  
 211:Core/Src/main.c **** // Update LED states
 212:Core/Src/main.c **** 	HAL_GPIO_WritePin(LED_0_GPIO_Port, LED_0_Pin, LED_states[0]);
 213:Core/Src/main.c **** 	HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, LED_states[1]);
 214:Core/Src/main.c **** 	HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, LED_states[2]);
 215:Core/Src/main.c **** 	HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, LED_states[3]);
 216:Core/Src/main.c **** 	HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin, LED_states[4]);
 217:Core/Src/main.c **** 	HAL_GPIO_WritePin(LED_5_GPIO_Port, LED_5_Pin, LED_states[5]);
 218:Core/Src/main.c **** 	HAL_GPIO_WritePin(LED_6_GPIO_Port, LED_6_Pin, LED_states[6]);
 219:Core/Src/main.c **** 	HAL_GPIO_WritePin(LED_7_GPIO_Port, LED_7_Pin, LED_states[7]);
 220:Core/Src/main.c **** 
 221:Core/Src/main.c **** // Update Relays states
 222:Core/Src/main.c ****   setRelay(RELAY_1,Relay_states[0]);
 223:Core/Src/main.c ****   setRelay(RELAY_2,Relay_states[1]);
 224:Core/Src/main.c **** 
 225:Core/Src/main.c **** // Update NeoPixels
 226:Core/Src/main.c ****   for (int i = 0 ; i<4 ; i++){
 227:Core/Src/main.c ****   set_RGB(NeoPixel_states[i][0],NeoPixel_states[i][1],NeoPixel_states[i][2],i);
 228:Core/Src/main.c ****   }
 229:Core/Src/main.c **** 
 230:Core/Src/main.c **** //Update 7-Seg
 231:Core/Src/main.c ****   actualSegNumber = (SEG_number_state[0] << 8*0)
 232:Core/Src/main.c ****                       | (SEG_number_state[1] << 8*1)
 233:Core/Src/main.c ****                       | (SEG_number_state[2] << 8*2)
 234:Core/Src/main.c ****                       | (SEG_number_state[3] << 8*3);
 235:Core/Src/main.c ****   actualSegNumber = actualSegNumber/1000.0f;
 236:Core/Src/main.c ****   setFloatNumber(actualSegNumber);
 237:Core/Src/main.c **** 
 238:Core/Src/main.c **** //Update Servo Motors
 239:Core/Src/main.c ****   for (int i = 0 ; i < 4 ; i++){
 240:Core/Src/main.c ****     actualServoState[i][0] = (Servo_state[i][0][0] << 8*0) | (Servo_state[i][0][1] << 8*1);
 241:Core/Src/main.c ****     actualServoState[i][1] = (Servo_state[i][1][0] << 8*0) | (Servo_state[i][1][1] << 8*1);
 242:Core/Src/main.c ****     actualServoState[i][2] = (Servo_state[i][2][0] << 8*0) | (Servo_state[i][2][1] << 8*1);
 243:Core/Src/main.c **** 
 244:Core/Src/main.c ****     if (actualServoState[i][0] != 0){
 245:Core/Src/main.c ****       init_ServoMotor(i+1,SERVO_FREQUENCY_50,actualServoState[i][0],actualServoState[i][1]);
 246:Core/Src/main.c ****       setServoAngle(i+1,actualServoState[i][2]);
 247:Core/Src/main.c ****     }
 248:Core/Src/main.c ****   } 
 249:Core/Src/main.c **** 
 250:Core/Src/main.c **** // Update Stepper Motor
 251:Core/Src/main.c ****   actualStepperRevolution = ((StepperRevolution_state[0] << 8*1)
 252:Core/Src/main.c ****                          | (StepperRevolution_state[1] << 8*0));
 253:Core/Src/main.c **** 
 254:Core/Src/main.c ****   actualStepperNumber = ((StepperSpeed_state[0] << 8*1)
 255:Core/Src/main.c ****                          | (StepperSpeed_state[1] << 8*0));
 256:Core/Src/main.c **** 
 257:Core/Src/main.c ****   init_StepperMotor(StepperMode_state,actualStepperRevolution,WITHOUT_LEDS);
 258:Core/Src/main.c ****   setStepperSpeed(actualStepperNumber);
 259:Core/Src/main.c **** 
ARM GAS  C:\Temp\cc4ZtMPR.s 			page 6


 260:Core/Src/main.c ****   
 261:Core/Src/main.c **** }
 262:Core/Src/main.c **** 
 263:Core/Src/main.c **** bool timedout = false;
 264:Core/Src/main.c **** uint8_t headerBuffer[2];
 265:Core/Src/main.c **** uint8_t bigBuffer[49] = {0};
 266:Core/Src/main.c **** uint8_t UART4_rxBuffer[47] = {0};
 267:Core/Src/main.c **** 
 268:Core/Src/main.c **** void receivedFromSimulink(){
 269:Core/Src/main.c ****   // check for recognised header byte
 270:Core/Src/main.c **** 
 271:Core/Src/main.c ****   if (bigBuffer[0] == header1 && bigBuffer[1] == header2){
 272:Core/Src/main.c **** 
 273:Core/Src/main.c ****       for (int i = 0 ; i < sizeof(UART4_rxBuffer) ; i++){
 274:Core/Src/main.c ****         UART4_rxBuffer[i] = bigBuffer[i+2];
 275:Core/Src/main.c ****       }
 276:Core/Src/main.c **** // LEDs
 277:Core/Src/main.c ****       for (int i = 7; i >= 0; i--) {
 278:Core/Src/main.c ****         LED_states[i] = (UART4_rxBuffer[0 ] >> i) & 1;
 279:Core/Src/main.c ****       }
 280:Core/Src/main.c **** 
 281:Core/Src/main.c **** // Relays
 282:Core/Src/main.c ****       for (int i = 7; i >= 0; i--) {
 283:Core/Src/main.c ****         Relay_states[i] = (UART4_rxBuffer[1 ] >> i) & 1;
 284:Core/Src/main.c ****       }
 285:Core/Src/main.c **** 
 286:Core/Src/main.c **** // NeoPixels
 287:Core/Src/main.c ****       NeoPixel_states[0][0] = UART4_rxBuffer[2  ];
 288:Core/Src/main.c ****       NeoPixel_states[0][1] = UART4_rxBuffer[3  ];
 289:Core/Src/main.c ****       NeoPixel_states[0][2] = UART4_rxBuffer[4  ];
 290:Core/Src/main.c **** 
 291:Core/Src/main.c ****       NeoPixel_states[1][0] = UART4_rxBuffer[5  ];
 292:Core/Src/main.c ****       NeoPixel_states[1][1] = UART4_rxBuffer[6  ];
 293:Core/Src/main.c ****       NeoPixel_states[1][2] = UART4_rxBuffer[7  ];
 294:Core/Src/main.c **** 
 295:Core/Src/main.c ****       NeoPixel_states[2][0] = UART4_rxBuffer[8  ];
 296:Core/Src/main.c ****       NeoPixel_states[2][1] = UART4_rxBuffer[9  ];
 297:Core/Src/main.c ****       NeoPixel_states[2][2] = UART4_rxBuffer[10 ];
 298:Core/Src/main.c **** 
 299:Core/Src/main.c ****       NeoPixel_states[3][0] = UART4_rxBuffer[11 ];
 300:Core/Src/main.c ****       NeoPixel_states[3][1] = UART4_rxBuffer[12 ];
 301:Core/Src/main.c ****       NeoPixel_states[3][2] = UART4_rxBuffer[13 ];
 302:Core/Src/main.c ****   
 303:Core/Src/main.c **** 
 304:Core/Src/main.c **** // 7 Seg
 305:Core/Src/main.c ****       for (int i = 0; i < 4; i++) {
 306:Core/Src/main.c ****         SEG_number_state[i] = (UART4_rxBuffer[14+i ]);
 307:Core/Src/main.c ****       }
 308:Core/Src/main.c **** 
 309:Core/Src/main.c **** // Servo Motor
 310:Core/Src/main.c ****       for (int i = 0; i < 4; i++) {
 311:Core/Src/main.c ****         Servo_state[i][0][0] = (UART4_rxBuffer[18 + (i*2)    +1 ]);
 312:Core/Src/main.c ****         Servo_state[i][0][1] = (UART4_rxBuffer[18 + (i*2)+1  +1 ]); //max angle
 313:Core/Src/main.c **** 
 314:Core/Src/main.c ****         Servo_state[i][1][0] = (UART4_rxBuffer[19 + (i*2)   + 8 ]);
 315:Core/Src/main.c ****         Servo_state[i][1][1] = (UART4_rxBuffer[19 + (i*2)+1 + 8 ]); //starting time
 316:Core/Src/main.c **** 
ARM GAS  C:\Temp\cc4ZtMPR.s 			page 7


 317:Core/Src/main.c ****         Servo_state[i][2][0] = (UART4_rxBuffer[20 + (i*2)   + 15]);
 318:Core/Src/main.c ****         Servo_state[i][2][1] = (UART4_rxBuffer[20 + (i*2)+1 + 15]); //servo angle
 319:Core/Src/main.c ****       }
 320:Core/Src/main.c **** 
 321:Core/Src/main.c **** 
 322:Core/Src/main.c **** 
 323:Core/Src/main.c **** // Stepper Motor
 324:Core/Src/main.c ****       StepperMode_state = UART4_rxBuffer[42];
 325:Core/Src/main.c **** 
 326:Core/Src/main.c ****       for (int i = 0; i < 2; i++) {
 327:Core/Src/main.c ****         StepperRevolution_state[i] = (UART4_rxBuffer[43+i]);
 328:Core/Src/main.c ****       }
 329:Core/Src/main.c **** 
 330:Core/Src/main.c ****       for (int i = 0; i < 2; i++) {
 331:Core/Src/main.c ****         StepperSpeed_state[i] = (UART4_rxBuffer[45+i]);
 332:Core/Src/main.c ****       }
 333:Core/Src/main.c **** 
 334:Core/Src/main.c ****       updateBoard();
 335:Core/Src/main.c ****   }
 336:Core/Src/main.c **** 
 337:Core/Src/main.c **** }
 338:Core/Src/main.c **** 
 339:Core/Src/main.c **** /* USER CODE END 0 */
 340:Core/Src/main.c **** 
 341:Core/Src/main.c **** /**
 342:Core/Src/main.c ****   * @brief  The application entry point.
 343:Core/Src/main.c ****   * @retval int
 344:Core/Src/main.c ****   */
 345:Core/Src/main.c **** int main(void)
 346:Core/Src/main.c **** {
 347:Core/Src/main.c ****   /* USER CODE BEGIN 1 */
 348:Core/Src/main.c **** 
 349:Core/Src/main.c ****   /* USER CODE END 1 */
 350:Core/Src/main.c **** 
 351:Core/Src/main.c ****   /* MCU Configuration--------------------------------------------------------*/
 352:Core/Src/main.c **** 
 353:Core/Src/main.c ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
 354:Core/Src/main.c ****   HAL_Init();
 355:Core/Src/main.c **** 
 356:Core/Src/main.c ****   /* USER CODE BEGIN Init */
 357:Core/Src/main.c **** 
 358:Core/Src/main.c ****   /* USER CODE END Init */
 359:Core/Src/main.c **** 
 360:Core/Src/main.c ****   /* Configure the system clock */
 361:Core/Src/main.c ****   SystemClock_Config();
 362:Core/Src/main.c **** 
 363:Core/Src/main.c ****   /* USER CODE BEGIN SysInit */
 364:Core/Src/main.c **** 
 365:Core/Src/main.c ****   /* USER CODE END SysInit */
 366:Core/Src/main.c **** 
 367:Core/Src/main.c ****   /* Initialize all configured peripherals */
 368:Core/Src/main.c ****   MX_GPIO_Init();
 369:Core/Src/main.c ****   MX_DMA_Init();
 370:Core/Src/main.c ****   MX_TIM2_Init();
 371:Core/Src/main.c ****   MX_I2C1_Init();
 372:Core/Src/main.c ****   MX_ADC1_Init();
 373:Core/Src/main.c ****   MX_TIM7_Init();
ARM GAS  C:\Temp\cc4ZtMPR.s 			page 8


 374:Core/Src/main.c ****   MX_TIM6_Init();
 375:Core/Src/main.c ****   MX_I2C2_Init();
 376:Core/Src/main.c ****   MX_TIM4_Init();
 377:Core/Src/main.c ****   MX_TIM1_Init();
 378:Core/Src/main.c ****   MX_TIM3_Init();
 379:Core/Src/main.c ****   MX_TIM5_Init();
 380:Core/Src/main.c ****   MX_UART4_Init();
 381:Core/Src/main.c ****   MX_TIM14_Init();
 382:Core/Src/main.c ****   MX_TIM8_Init();
 383:Core/Src/main.c ****   /* USER CODE BEGIN 2 */
 384:Core/Src/main.c **** 
 385:Core/Src/main.c ****   init_7SegDisplay();
 386:Core/Src/main.c ****   init_POTs(NONE);
 387:Core/Src/main.c ****   init_IMU();
 388:Core/Src/main.c ****   
 389:Core/Src/main.c ****   for (int i = 0 ; i < 4 ; i++){
 390:Core/Src/main.c ****     init_ServoMotor(i,50,90,0);
 391:Core/Src/main.c ****     setServoAngle(i,0);
 392:Core/Src/main.c ****   }
 393:Core/Src/main.c ****   init_AllCurrentMonitors();
 394:Core/Src/main.c ****   /* USER CODE END 2 */
 395:Core/Src/main.c **** 
 396:Core/Src/main.c ****   /* Infinite loop */
 397:Core/Src/main.c ****   /* USER CODE BEGIN WHILE */
 398:Core/Src/main.c **** while (1)
 399:Core/Src/main.c ****   {
 400:Core/Src/main.c ****     while (HAL_UART_Receive_DMA(&huart4,(uint8_t *) &bigBuffer, sizeof(bigBuffer)) == HAL_BUSY){}
 401:Core/Src/main.c ****     receivedFromSimulink();
 402:Core/Src/main.c ****     sendToSimulink();
 403:Core/Src/main.c ****     /* USER CODE END WHILE */
 404:Core/Src/main.c **** 
 405:Core/Src/main.c ****     /* USER CODE BEGIN 3 */
 406:Core/Src/main.c ****   }
 407:Core/Src/main.c ****   /* USER CODE END 3 */
 408:Core/Src/main.c **** }
 409:Core/Src/main.c **** 
 410:Core/Src/main.c **** /**
 411:Core/Src/main.c ****   * @brief System Clock Configuration
 412:Core/Src/main.c ****   * @retval None
 413:Core/Src/main.c ****   */
 414:Core/Src/main.c **** void SystemClock_Config(void)
 415:Core/Src/main.c **** {
 416:Core/Src/main.c ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 417:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 418:Core/Src/main.c **** 
 419:Core/Src/main.c ****   /** Configure the main internal regulator output voltage
 420:Core/Src/main.c ****   */
 421:Core/Src/main.c ****   __HAL_RCC_PWR_CLK_ENABLE();
 422:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 423:Core/Src/main.c **** 
 424:Core/Src/main.c ****   /** Initializes the RCC Oscillators according to the specified parameters
 425:Core/Src/main.c ****   * in the RCC_OscInitTypeDef structure.
 426:Core/Src/main.c ****   */
 427:Core/Src/main.c ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 428:Core/Src/main.c ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 429:Core/Src/main.c ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 430:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
ARM GAS  C:\Temp\cc4ZtMPR.s 			page 9


 431:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 432:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLM = 8;
 433:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLN = 84;
 434:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 435:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLQ = 4;
 436:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 437:Core/Src/main.c ****   {
 438:Core/Src/main.c ****     Error_Handler();
 439:Core/Src/main.c ****   }
 440:Core/Src/main.c **** 
 441:Core/Src/main.c ****   /** Initializes the CPU, AHB and APB buses clocks
 442:Core/Src/main.c ****   */
 443:Core/Src/main.c ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 444:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 445:Core/Src/main.c ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 446:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 447:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 448:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 449:Core/Src/main.c **** 
 450:Core/Src/main.c ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 451:Core/Src/main.c ****   {
 452:Core/Src/main.c ****     Error_Handler();
 453:Core/Src/main.c ****   }
 454:Core/Src/main.c **** }
 455:Core/Src/main.c **** 
 456:Core/Src/main.c **** /**
 457:Core/Src/main.c ****   * @brief ADC1 Initialization Function
 458:Core/Src/main.c ****   * @param None
 459:Core/Src/main.c ****   * @retval None
 460:Core/Src/main.c ****   */
 461:Core/Src/main.c **** static void MX_ADC1_Init(void)
 462:Core/Src/main.c **** {
 463:Core/Src/main.c **** 
 464:Core/Src/main.c ****   /* USER CODE BEGIN ADC1_Init 0 */
 465:Core/Src/main.c **** 
 466:Core/Src/main.c ****   /* USER CODE END ADC1_Init 0 */
 467:Core/Src/main.c **** 
 468:Core/Src/main.c ****   ADC_ChannelConfTypeDef sConfig = {0};
 469:Core/Src/main.c **** 
 470:Core/Src/main.c ****   /* USER CODE BEGIN ADC1_Init 1 */
 471:Core/Src/main.c **** 
 472:Core/Src/main.c ****   /* USER CODE END ADC1_Init 1 */
 473:Core/Src/main.c **** 
 474:Core/Src/main.c ****   /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of con
 475:Core/Src/main.c ****   */
 476:Core/Src/main.c ****   hadc1.Instance = ADC1;
 477:Core/Src/main.c ****   hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 478:Core/Src/main.c ****   hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 479:Core/Src/main.c ****   hadc1.Init.ScanConvMode = ENABLE;
 480:Core/Src/main.c ****   hadc1.Init.ContinuousConvMode = ENABLE;
 481:Core/Src/main.c ****   hadc1.Init.DiscontinuousConvMode = DISABLE;
 482:Core/Src/main.c ****   hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 483:Core/Src/main.c ****   hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 484:Core/Src/main.c ****   hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 485:Core/Src/main.c ****   hadc1.Init.NbrOfConversion = 4;
 486:Core/Src/main.c ****   hadc1.Init.DMAContinuousRequests = ENABLE;
 487:Core/Src/main.c ****   hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
ARM GAS  C:\Temp\cc4ZtMPR.s 			page 10


 488:Core/Src/main.c ****   if (HAL_ADC_Init(&hadc1) != HAL_OK)
 489:Core/Src/main.c ****   {
 490:Core/Src/main.c ****     Error_Handler();
 491:Core/Src/main.c ****   }
 492:Core/Src/main.c **** 
 493:Core/Src/main.c ****   /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and it
 494:Core/Src/main.c ****   */
 495:Core/Src/main.c ****   sConfig.Channel = ADC_CHANNEL_0;
 496:Core/Src/main.c ****   sConfig.Rank = 1;
 497:Core/Src/main.c ****   sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 498:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 499:Core/Src/main.c ****   {
 500:Core/Src/main.c ****     Error_Handler();
 501:Core/Src/main.c ****   }
 502:Core/Src/main.c **** 
 503:Core/Src/main.c ****   /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and it
 504:Core/Src/main.c ****   */
 505:Core/Src/main.c ****   sConfig.Channel = ADC_CHANNEL_1;
 506:Core/Src/main.c ****   sConfig.Rank = 2;
 507:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 508:Core/Src/main.c ****   {
 509:Core/Src/main.c ****     Error_Handler();
 510:Core/Src/main.c ****   }
 511:Core/Src/main.c **** 
 512:Core/Src/main.c ****   /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and it
 513:Core/Src/main.c ****   */
 514:Core/Src/main.c ****   sConfig.Channel = ADC_CHANNEL_2;
 515:Core/Src/main.c ****   sConfig.Rank = 3;
 516:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 517:Core/Src/main.c ****   {
 518:Core/Src/main.c ****     Error_Handler();
 519:Core/Src/main.c ****   }
 520:Core/Src/main.c **** 
 521:Core/Src/main.c ****   /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and it
 522:Core/Src/main.c ****   */
 523:Core/Src/main.c ****   sConfig.Channel = ADC_CHANNEL_3;
 524:Core/Src/main.c ****   sConfig.Rank = 4;
 525:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 526:Core/Src/main.c ****   {
 527:Core/Src/main.c ****     Error_Handler();
 528:Core/Src/main.c ****   }
 529:Core/Src/main.c ****   /* USER CODE BEGIN ADC1_Init 2 */
 530:Core/Src/main.c **** 
 531:Core/Src/main.c ****   /* USER CODE END ADC1_Init 2 */
 532:Core/Src/main.c **** 
 533:Core/Src/main.c **** }
 534:Core/Src/main.c **** 
 535:Core/Src/main.c **** /**
 536:Core/Src/main.c ****   * @brief I2C1 Initialization Function
 537:Core/Src/main.c ****   * @param None
 538:Core/Src/main.c ****   * @retval None
 539:Core/Src/main.c ****   */
 540:Core/Src/main.c **** static void MX_I2C1_Init(void)
 541:Core/Src/main.c **** {
 542:Core/Src/main.c **** 
 543:Core/Src/main.c ****   /* USER CODE BEGIN I2C1_Init 0 */
 544:Core/Src/main.c **** 
ARM GAS  C:\Temp\cc4ZtMPR.s 			page 11


 545:Core/Src/main.c ****   /* USER CODE END I2C1_Init 0 */
 546:Core/Src/main.c **** 
 547:Core/Src/main.c ****   /* USER CODE BEGIN I2C1_Init 1 */
 548:Core/Src/main.c **** 
 549:Core/Src/main.c ****   /* USER CODE END I2C1_Init 1 */
 550:Core/Src/main.c ****   hi2c1.Instance = I2C1;
 551:Core/Src/main.c ****   hi2c1.Init.ClockSpeed = 1000000;
 552:Core/Src/main.c ****   hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 553:Core/Src/main.c ****   hi2c1.Init.OwnAddress1 = 0;
 554:Core/Src/main.c ****   hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 555:Core/Src/main.c ****   hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 556:Core/Src/main.c ****   hi2c1.Init.OwnAddress2 = 0;
 557:Core/Src/main.c ****   hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 558:Core/Src/main.c ****   hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 559:Core/Src/main.c ****   if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 560:Core/Src/main.c ****   {
 561:Core/Src/main.c ****     Error_Handler();
 562:Core/Src/main.c ****   }
 563:Core/Src/main.c ****   /* USER CODE BEGIN I2C1_Init 2 */
 564:Core/Src/main.c **** 
 565:Core/Src/main.c ****   /* USER CODE END I2C1_Init 2 */
 566:Core/Src/main.c **** 
 567:Core/Src/main.c **** }
 568:Core/Src/main.c **** 
 569:Core/Src/main.c **** /**
 570:Core/Src/main.c ****   * @brief I2C2 Initialization Function
 571:Core/Src/main.c ****   * @param None
 572:Core/Src/main.c ****   * @retval None
 573:Core/Src/main.c ****   */
 574:Core/Src/main.c **** static void MX_I2C2_Init(void)
 575:Core/Src/main.c **** {
 576:Core/Src/main.c **** 
 577:Core/Src/main.c ****   /* USER CODE BEGIN I2C2_Init 0 */
 578:Core/Src/main.c **** 
 579:Core/Src/main.c ****   /* USER CODE END I2C2_Init 0 */
 580:Core/Src/main.c **** 
 581:Core/Src/main.c ****   /* USER CODE BEGIN I2C2_Init 1 */
 582:Core/Src/main.c **** 
 583:Core/Src/main.c ****   /* USER CODE END I2C2_Init 1 */
 584:Core/Src/main.c ****   hi2c2.Instance = I2C2;
 585:Core/Src/main.c ****   hi2c2.Init.ClockSpeed = 100000;
 586:Core/Src/main.c ****   hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 587:Core/Src/main.c ****   hi2c2.Init.OwnAddress1 = 0;
 588:Core/Src/main.c ****   hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 589:Core/Src/main.c ****   hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 590:Core/Src/main.c ****   hi2c2.Init.OwnAddress2 = 0;
 591:Core/Src/main.c ****   hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 592:Core/Src/main.c ****   hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 593:Core/Src/main.c ****   if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 594:Core/Src/main.c ****   {
 595:Core/Src/main.c ****     Error_Handler();
 596:Core/Src/main.c ****   }
 597:Core/Src/main.c ****   /* USER CODE BEGIN I2C2_Init 2 */
 598:Core/Src/main.c **** 
 599:Core/Src/main.c ****   /* USER CODE END I2C2_Init 2 */
 600:Core/Src/main.c **** 
 601:Core/Src/main.c **** }
ARM GAS  C:\Temp\cc4ZtMPR.s 			page 12


 602:Core/Src/main.c **** 
 603:Core/Src/main.c **** /**
 604:Core/Src/main.c ****   * @brief TIM1 Initialization Function
 605:Core/Src/main.c ****   * @param None
 606:Core/Src/main.c ****   * @retval None
 607:Core/Src/main.c ****   */
 608:Core/Src/main.c **** static void MX_TIM1_Init(void)
 609:Core/Src/main.c **** {
 610:Core/Src/main.c **** 
 611:Core/Src/main.c ****   /* USER CODE BEGIN TIM1_Init 0 */
 612:Core/Src/main.c **** 
 613:Core/Src/main.c ****   /* USER CODE END TIM1_Init 0 */
 614:Core/Src/main.c **** 
 615:Core/Src/main.c ****   TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 616:Core/Src/main.c ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 617:Core/Src/main.c ****   TIM_IC_InitTypeDef sConfigIC = {0};
 618:Core/Src/main.c **** 
 619:Core/Src/main.c ****   /* USER CODE BEGIN TIM1_Init 1 */
 620:Core/Src/main.c **** 
 621:Core/Src/main.c ****   /* USER CODE END TIM1_Init 1 */
 622:Core/Src/main.c ****   htim1.Instance = TIM1;
 623:Core/Src/main.c ****   htim1.Init.Prescaler = 0;
 624:Core/Src/main.c ****   htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 625:Core/Src/main.c ****   htim1.Init.Period = 65535;
 626:Core/Src/main.c ****   htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 627:Core/Src/main.c ****   htim1.Init.RepetitionCounter = 0;
 628:Core/Src/main.c ****   htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 629:Core/Src/main.c ****   if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 630:Core/Src/main.c ****   {
 631:Core/Src/main.c ****     Error_Handler();
 632:Core/Src/main.c ****   }
 633:Core/Src/main.c ****   sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 634:Core/Src/main.c ****   if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 635:Core/Src/main.c ****   {
 636:Core/Src/main.c ****     Error_Handler();
 637:Core/Src/main.c ****   }
 638:Core/Src/main.c ****   if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 639:Core/Src/main.c ****   {
 640:Core/Src/main.c ****     Error_Handler();
 641:Core/Src/main.c ****   }
 642:Core/Src/main.c ****   sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 643:Core/Src/main.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 644:Core/Src/main.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 645:Core/Src/main.c ****   {
 646:Core/Src/main.c ****     Error_Handler();
 647:Core/Src/main.c ****   }
 648:Core/Src/main.c ****   sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 649:Core/Src/main.c ****   sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 650:Core/Src/main.c ****   sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 651:Core/Src/main.c ****   sConfigIC.ICFilter = 0;
 652:Core/Src/main.c ****   if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 653:Core/Src/main.c ****   {
 654:Core/Src/main.c ****     Error_Handler();
 655:Core/Src/main.c ****   }
 656:Core/Src/main.c ****   if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 657:Core/Src/main.c ****   {
 658:Core/Src/main.c ****     Error_Handler();
ARM GAS  C:\Temp\cc4ZtMPR.s 			page 13


 659:Core/Src/main.c ****   }
 660:Core/Src/main.c ****   if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 661:Core/Src/main.c ****   {
 662:Core/Src/main.c ****     Error_Handler();
 663:Core/Src/main.c ****   }
 664:Core/Src/main.c ****   if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 665:Core/Src/main.c ****   {
 666:Core/Src/main.c ****     Error_Handler();
 667:Core/Src/main.c ****   }
 668:Core/Src/main.c ****   /* USER CODE BEGIN TIM1_Init 2 */
 669:Core/Src/main.c **** 
 670:Core/Src/main.c ****   /* USER CODE END TIM1_Init 2 */
 671:Core/Src/main.c **** 
 672:Core/Src/main.c **** }
 673:Core/Src/main.c **** 
 674:Core/Src/main.c **** /**
 675:Core/Src/main.c ****   * @brief TIM2 Initialization Function
 676:Core/Src/main.c ****   * @param None
 677:Core/Src/main.c ****   * @retval None
 678:Core/Src/main.c ****   */
 679:Core/Src/main.c **** static void MX_TIM2_Init(void)
 680:Core/Src/main.c **** {
 681:Core/Src/main.c **** 
 682:Core/Src/main.c ****   /* USER CODE BEGIN TIM2_Init 0 */
 683:Core/Src/main.c **** 
 684:Core/Src/main.c ****   /* USER CODE END TIM2_Init 0 */
 685:Core/Src/main.c **** 
 686:Core/Src/main.c ****   TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 687:Core/Src/main.c ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 688:Core/Src/main.c ****   TIM_OC_InitTypeDef sConfigOC = {0};
 689:Core/Src/main.c **** 
 690:Core/Src/main.c ****   /* USER CODE BEGIN TIM2_Init 1 */
 691:Core/Src/main.c **** 
 692:Core/Src/main.c ****   /* USER CODE END TIM2_Init 1 */
 693:Core/Src/main.c ****   htim2.Instance = TIM2;
 694:Core/Src/main.c ****   htim2.Init.Prescaler = 0;
 695:Core/Src/main.c ****   htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 696:Core/Src/main.c ****   htim2.Init.Period = 104;
 697:Core/Src/main.c ****   htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 698:Core/Src/main.c ****   htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 699:Core/Src/main.c ****   if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 700:Core/Src/main.c ****   {
 701:Core/Src/main.c ****     Error_Handler();
 702:Core/Src/main.c ****   }
 703:Core/Src/main.c ****   sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 704:Core/Src/main.c ****   if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 705:Core/Src/main.c ****   {
 706:Core/Src/main.c ****     Error_Handler();
 707:Core/Src/main.c ****   }
 708:Core/Src/main.c ****   if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 709:Core/Src/main.c ****   {
 710:Core/Src/main.c ****     Error_Handler();
 711:Core/Src/main.c ****   }
 712:Core/Src/main.c ****   sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 713:Core/Src/main.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 714:Core/Src/main.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 715:Core/Src/main.c ****   {
ARM GAS  C:\Temp\cc4ZtMPR.s 			page 14


 716:Core/Src/main.c ****     Error_Handler();
 717:Core/Src/main.c ****   }
 718:Core/Src/main.c ****   sConfigOC.OCMode = TIM_OCMODE_PWM1;
 719:Core/Src/main.c ****   sConfigOC.Pulse = 0;
 720:Core/Src/main.c ****   sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 721:Core/Src/main.c ****   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 722:Core/Src/main.c ****   if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 723:Core/Src/main.c ****   {
 724:Core/Src/main.c ****     Error_Handler();
 725:Core/Src/main.c ****   }
 726:Core/Src/main.c ****   /* USER CODE BEGIN TIM2_Init 2 */
 727:Core/Src/main.c **** 
 728:Core/Src/main.c ****   /* USER CODE END TIM2_Init 2 */
 729:Core/Src/main.c ****   HAL_TIM_MspPostInit(&htim2);
 730:Core/Src/main.c **** 
 731:Core/Src/main.c **** }
 732:Core/Src/main.c **** 
 733:Core/Src/main.c **** /**
 734:Core/Src/main.c ****   * @brief TIM3 Initialization Function
 735:Core/Src/main.c ****   * @param None
 736:Core/Src/main.c ****   * @retval None
 737:Core/Src/main.c ****   */
 738:Core/Src/main.c **** static void MX_TIM3_Init(void)
 739:Core/Src/main.c **** {
 740:Core/Src/main.c **** 
 741:Core/Src/main.c ****   /* USER CODE BEGIN TIM3_Init 0 */
 742:Core/Src/main.c **** 
 743:Core/Src/main.c ****   /* USER CODE END TIM3_Init 0 */
 744:Core/Src/main.c **** 
 745:Core/Src/main.c ****   TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 746:Core/Src/main.c ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 747:Core/Src/main.c ****   TIM_OC_InitTypeDef sConfigOC = {0};
 748:Core/Src/main.c **** 
 749:Core/Src/main.c ****   /* USER CODE BEGIN TIM3_Init 1 */
 750:Core/Src/main.c **** 
 751:Core/Src/main.c ****   /* USER CODE END TIM3_Init 1 */
 752:Core/Src/main.c ****   htim3.Instance = TIM3;
 753:Core/Src/main.c ****   htim3.Init.Prescaler = 83;
 754:Core/Src/main.c ****   htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 755:Core/Src/main.c ****   htim3.Init.Period = 20000-1;
 756:Core/Src/main.c ****   htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 757:Core/Src/main.c ****   htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 758:Core/Src/main.c ****   if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 759:Core/Src/main.c ****   {
 760:Core/Src/main.c ****     Error_Handler();
 761:Core/Src/main.c ****   }
 762:Core/Src/main.c ****   sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 763:Core/Src/main.c ****   if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 764:Core/Src/main.c ****   {
 765:Core/Src/main.c ****     Error_Handler();
 766:Core/Src/main.c ****   }
 767:Core/Src/main.c ****   if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 768:Core/Src/main.c ****   {
 769:Core/Src/main.c ****     Error_Handler();
 770:Core/Src/main.c ****   }
 771:Core/Src/main.c ****   sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 772:Core/Src/main.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
ARM GAS  C:\Temp\cc4ZtMPR.s 			page 15


 773:Core/Src/main.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 774:Core/Src/main.c ****   {
 775:Core/Src/main.c ****     Error_Handler();
 776:Core/Src/main.c ****   }
 777:Core/Src/main.c ****   sConfigOC.OCMode = TIM_OCMODE_PWM1;
 778:Core/Src/main.c ****   sConfigOC.Pulse = 0;
 779:Core/Src/main.c ****   sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 780:Core/Src/main.c ****   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 781:Core/Src/main.c ****   if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 782:Core/Src/main.c ****   {
 783:Core/Src/main.c ****     Error_Handler();
 784:Core/Src/main.c ****   }
 785:Core/Src/main.c ****   if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 786:Core/Src/main.c ****   {
 787:Core/Src/main.c ****     Error_Handler();
 788:Core/Src/main.c ****   }
 789:Core/Src/main.c ****   if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 790:Core/Src/main.c ****   {
 791:Core/Src/main.c ****     Error_Handler();
 792:Core/Src/main.c ****   }
 793:Core/Src/main.c ****   if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 794:Core/Src/main.c ****   {
 795:Core/Src/main.c ****     Error_Handler();
 796:Core/Src/main.c ****   }
 797:Core/Src/main.c ****   /* USER CODE BEGIN TIM3_Init 2 */
 798:Core/Src/main.c **** 
 799:Core/Src/main.c ****   /* USER CODE END TIM3_Init 2 */
 800:Core/Src/main.c ****   HAL_TIM_MspPostInit(&htim3);
 801:Core/Src/main.c **** 
 802:Core/Src/main.c **** }
 803:Core/Src/main.c **** 
 804:Core/Src/main.c **** /**
 805:Core/Src/main.c ****   * @brief TIM4 Initialization Function
 806:Core/Src/main.c ****   * @param None
 807:Core/Src/main.c ****   * @retval None
 808:Core/Src/main.c ****   */
 809:Core/Src/main.c **** static void MX_TIM4_Init(void)
 810:Core/Src/main.c **** {
 811:Core/Src/main.c **** 
 812:Core/Src/main.c ****   /* USER CODE BEGIN TIM4_Init 0 */
 813:Core/Src/main.c **** 
 814:Core/Src/main.c ****   /* USER CODE END TIM4_Init 0 */
 815:Core/Src/main.c **** 
 816:Core/Src/main.c ****   TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 817:Core/Src/main.c ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 818:Core/Src/main.c **** 
 819:Core/Src/main.c ****   /* USER CODE BEGIN TIM4_Init 1 */
 820:Core/Src/main.c **** 
 821:Core/Src/main.c ****   /* USER CODE END TIM4_Init 1 */
 822:Core/Src/main.c ****   htim4.Instance = TIM4;
 823:Core/Src/main.c ****   htim4.Init.Prescaler = 9999;
 824:Core/Src/main.c ****   htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 825:Core/Src/main.c ****   htim4.Init.Period = 8400;
 826:Core/Src/main.c ****   htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 827:Core/Src/main.c ****   htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 828:Core/Src/main.c ****   if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 829:Core/Src/main.c ****   {
ARM GAS  C:\Temp\cc4ZtMPR.s 			page 16


 830:Core/Src/main.c ****     Error_Handler();
 831:Core/Src/main.c ****   }
 832:Core/Src/main.c ****   sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 833:Core/Src/main.c ****   if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 834:Core/Src/main.c ****   {
 835:Core/Src/main.c ****     Error_Handler();
 836:Core/Src/main.c ****   }
 837:Core/Src/main.c ****   sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 838:Core/Src/main.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 839:Core/Src/main.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 840:Core/Src/main.c ****   {
 841:Core/Src/main.c ****     Error_Handler();
 842:Core/Src/main.c ****   }
 843:Core/Src/main.c ****   /* USER CODE BEGIN TIM4_Init 2 */
 844:Core/Src/main.c **** 
 845:Core/Src/main.c ****   /* USER CODE END TIM4_Init 2 */
 846:Core/Src/main.c **** 
 847:Core/Src/main.c **** }
 848:Core/Src/main.c **** 
 849:Core/Src/main.c **** /**
 850:Core/Src/main.c ****   * @brief TIM5 Initialization Function
 851:Core/Src/main.c ****   * @param None
 852:Core/Src/main.c ****   * @retval None
 853:Core/Src/main.c ****   */
 854:Core/Src/main.c **** static void MX_TIM5_Init(void)
 855:Core/Src/main.c **** {
 856:Core/Src/main.c **** 
 857:Core/Src/main.c ****   /* USER CODE BEGIN TIM5_Init 0 */
 858:Core/Src/main.c **** 
 859:Core/Src/main.c ****   /* USER CODE END TIM5_Init 0 */
 860:Core/Src/main.c **** 
 861:Core/Src/main.c ****   TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 862:Core/Src/main.c ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 863:Core/Src/main.c **** 
 864:Core/Src/main.c ****   /* USER CODE BEGIN TIM5_Init 1 */
 865:Core/Src/main.c **** 
 866:Core/Src/main.c ****   /* USER CODE END TIM5_Init 1 */
 867:Core/Src/main.c ****   htim5.Instance = TIM5;
 868:Core/Src/main.c ****   htim5.Init.Prescaler = (8400/3/60)-1;
 869:Core/Src/main.c ****   htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 870:Core/Src/main.c ****   htim5.Init.Period = 10000-1;
 871:Core/Src/main.c ****   htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 872:Core/Src/main.c ****   htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 873:Core/Src/main.c ****   if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 874:Core/Src/main.c ****   {
 875:Core/Src/main.c ****     Error_Handler();
 876:Core/Src/main.c ****   }
 877:Core/Src/main.c ****   sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 878:Core/Src/main.c ****   if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 879:Core/Src/main.c ****   {
 880:Core/Src/main.c ****     Error_Handler();
 881:Core/Src/main.c ****   }
 882:Core/Src/main.c ****   sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 883:Core/Src/main.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 884:Core/Src/main.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 885:Core/Src/main.c ****   {
 886:Core/Src/main.c ****     Error_Handler();
ARM GAS  C:\Temp\cc4ZtMPR.s 			page 17


 887:Core/Src/main.c ****   }
 888:Core/Src/main.c ****   /* USER CODE BEGIN TIM5_Init 2 */
 889:Core/Src/main.c **** 
 890:Core/Src/main.c ****   /* USER CODE END TIM5_Init 2 */
 891:Core/Src/main.c **** 
 892:Core/Src/main.c **** }
 893:Core/Src/main.c **** 
 894:Core/Src/main.c **** /**
 895:Core/Src/main.c ****   * @brief TIM6 Initialization Function
 896:Core/Src/main.c ****   * @param None
 897:Core/Src/main.c ****   * @retval None
 898:Core/Src/main.c ****   */
 899:Core/Src/main.c **** static void MX_TIM6_Init(void)
 900:Core/Src/main.c **** {
 901:Core/Src/main.c **** 
 902:Core/Src/main.c ****   /* USER CODE BEGIN TIM6_Init 0 */
 903:Core/Src/main.c **** 
 904:Core/Src/main.c ****   /* USER CODE END TIM6_Init 0 */
 905:Core/Src/main.c **** 
 906:Core/Src/main.c ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 907:Core/Src/main.c **** 
 908:Core/Src/main.c ****   /* USER CODE BEGIN TIM6_Init 1 */
 909:Core/Src/main.c **** 
 910:Core/Src/main.c ****   /* USER CODE END TIM6_Init 1 */
 911:Core/Src/main.c ****   htim6.Instance = TIM6;
 912:Core/Src/main.c ****   htim6.Init.Prescaler = 8400-1;
 913:Core/Src/main.c ****   htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 914:Core/Src/main.c ****   htim6.Init.Period = 1000-1;
 915:Core/Src/main.c ****   htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 916:Core/Src/main.c ****   if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 917:Core/Src/main.c ****   {
 918:Core/Src/main.c ****     Error_Handler();
 919:Core/Src/main.c ****   }
 920:Core/Src/main.c ****   sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 921:Core/Src/main.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 922:Core/Src/main.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 923:Core/Src/main.c ****   {
 924:Core/Src/main.c ****     Error_Handler();
 925:Core/Src/main.c ****   }
 926:Core/Src/main.c ****   /* USER CODE BEGIN TIM6_Init 2 */
 927:Core/Src/main.c **** 
 928:Core/Src/main.c ****   /* USER CODE END TIM6_Init 2 */
 929:Core/Src/main.c **** 
 930:Core/Src/main.c **** }
 931:Core/Src/main.c **** 
 932:Core/Src/main.c **** /**
 933:Core/Src/main.c ****   * @brief TIM7 Initialization Function
 934:Core/Src/main.c ****   * @param None
 935:Core/Src/main.c ****   * @retval None
 936:Core/Src/main.c ****   */
 937:Core/Src/main.c **** static void MX_TIM7_Init(void)
 938:Core/Src/main.c **** {
 939:Core/Src/main.c **** 
 940:Core/Src/main.c ****   /* USER CODE BEGIN TIM7_Init 0 */
 941:Core/Src/main.c **** 
 942:Core/Src/main.c ****   /* USER CODE END TIM7_Init 0 */
 943:Core/Src/main.c **** 
ARM GAS  C:\Temp\cc4ZtMPR.s 			page 18


 944:Core/Src/main.c ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 945:Core/Src/main.c **** 
 946:Core/Src/main.c ****   /* USER CODE BEGIN TIM7_Init 1 */
 947:Core/Src/main.c ****   
 948:Core/Src/main.c **** 
 949:Core/Src/main.c **** 
 950:Core/Src/main.c ****   // prescalar and ARR setup to theoretically achieve 240Hz display refresh rate
 951:Core/Src/main.c ****   /* USER CODE END TIM7_Init 1 */
 952:Core/Src/main.c ****   htim7.Instance = TIM7;
 953:Core/Src/main.c ****   htim7.Init.Prescaler = (8400/3/240)-1;
 954:Core/Src/main.c ****   htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 955:Core/Src/main.c ****   htim7.Init.Period = 10000-1;
 956:Core/Src/main.c ****   htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 957:Core/Src/main.c ****   if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 958:Core/Src/main.c ****   {
 959:Core/Src/main.c ****     Error_Handler();
 960:Core/Src/main.c ****   }
 961:Core/Src/main.c ****   sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 962:Core/Src/main.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 963:Core/Src/main.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 964:Core/Src/main.c ****   {
 965:Core/Src/main.c ****     Error_Handler();
 966:Core/Src/main.c ****   }
 967:Core/Src/main.c ****   /* USER CODE BEGIN TIM7_Init 2 */
 968:Core/Src/main.c **** 
 969:Core/Src/main.c ****   /* USER CODE END TIM7_Init 2 */
 970:Core/Src/main.c **** 
 971:Core/Src/main.c **** }
 972:Core/Src/main.c **** 
 973:Core/Src/main.c **** /**
 974:Core/Src/main.c ****   * @brief TIM8 Initialization Function
 975:Core/Src/main.c ****   * @param None
 976:Core/Src/main.c ****   * @retval None
 977:Core/Src/main.c ****   */
 978:Core/Src/main.c **** static void MX_TIM8_Init(void)
 979:Core/Src/main.c **** {
 980:Core/Src/main.c **** 
 981:Core/Src/main.c ****   /* USER CODE BEGIN TIM8_Init 0 */
 982:Core/Src/main.c **** 
 983:Core/Src/main.c ****   /* USER CODE END TIM8_Init 0 */
 984:Core/Src/main.c **** 
 985:Core/Src/main.c ****   TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 986:Core/Src/main.c ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 987:Core/Src/main.c **** 
 988:Core/Src/main.c ****   /* USER CODE BEGIN TIM8_Init 1 */
 989:Core/Src/main.c **** 
 990:Core/Src/main.c ****   /* USER CODE END TIM8_Init 1 */
 991:Core/Src/main.c ****   htim8.Instance = TIM8;
 992:Core/Src/main.c ****   htim8.Init.Prescaler = 0;
 993:Core/Src/main.c ****   htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 994:Core/Src/main.c ****   htim8.Init.Period = 65535;
 995:Core/Src/main.c ****   htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 996:Core/Src/main.c ****   htim8.Init.RepetitionCounter = 0;
 997:Core/Src/main.c ****   htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 998:Core/Src/main.c ****   if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 999:Core/Src/main.c ****   {
1000:Core/Src/main.c ****     Error_Handler();
ARM GAS  C:\Temp\cc4ZtMPR.s 			page 19


1001:Core/Src/main.c ****   }
1002:Core/Src/main.c ****   sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
1003:Core/Src/main.c ****   if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
1004:Core/Src/main.c ****   {
1005:Core/Src/main.c ****     Error_Handler();
1006:Core/Src/main.c ****   }
1007:Core/Src/main.c ****   sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
1008:Core/Src/main.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
1009:Core/Src/main.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
1010:Core/Src/main.c ****   {
1011:Core/Src/main.c ****     Error_Handler();
1012:Core/Src/main.c ****   }
1013:Core/Src/main.c ****   /* USER CODE BEGIN TIM8_Init 2 */
1014:Core/Src/main.c **** 
1015:Core/Src/main.c ****   /* USER CODE END TIM8_Init 2 */
1016:Core/Src/main.c **** 
1017:Core/Src/main.c **** }
1018:Core/Src/main.c **** 
1019:Core/Src/main.c **** /**
1020:Core/Src/main.c ****   * @brief TIM14 Initialization Function
1021:Core/Src/main.c ****   * @param None
1022:Core/Src/main.c ****   * @retval None
1023:Core/Src/main.c ****   */
1024:Core/Src/main.c **** static void MX_TIM14_Init(void)
1025:Core/Src/main.c **** {
1026:Core/Src/main.c **** 
1027:Core/Src/main.c ****   /* USER CODE BEGIN TIM14_Init 0 */
1028:Core/Src/main.c **** 
1029:Core/Src/main.c ****   /* USER CODE END TIM14_Init 0 */
1030:Core/Src/main.c **** 
1031:Core/Src/main.c ****   /* USER CODE BEGIN TIM14_Init 1 */
1032:Core/Src/main.c **** 
1033:Core/Src/main.c ****   /* USER CODE END TIM14_Init 1 */
1034:Core/Src/main.c ****   htim14.Instance = TIM14;
1035:Core/Src/main.c ****   htim14.Init.Prescaler = 8400-1;
1036:Core/Src/main.c ****   htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
1037:Core/Src/main.c ****   htim14.Init.Period = 1000-1;
1038:Core/Src/main.c ****   htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
1039:Core/Src/main.c ****   htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
1040:Core/Src/main.c ****   if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
1041:Core/Src/main.c ****   {
1042:Core/Src/main.c ****     Error_Handler();
1043:Core/Src/main.c ****   }
1044:Core/Src/main.c ****   /* USER CODE BEGIN TIM14_Init 2 */
1045:Core/Src/main.c **** 
1046:Core/Src/main.c ****   /* USER CODE END TIM14_Init 2 */
1047:Core/Src/main.c **** 
1048:Core/Src/main.c **** }
1049:Core/Src/main.c **** 
1050:Core/Src/main.c **** /**
1051:Core/Src/main.c ****   * @brief UART4 Initialization Function
1052:Core/Src/main.c ****   * @param None
1053:Core/Src/main.c ****   * @retval None
1054:Core/Src/main.c ****   */
1055:Core/Src/main.c **** static void MX_UART4_Init(void)
1056:Core/Src/main.c **** {
1057:Core/Src/main.c **** 
ARM GAS  C:\Temp\cc4ZtMPR.s 			page 20


1058:Core/Src/main.c ****   /* USER CODE BEGIN UART4_Init 0 */
1059:Core/Src/main.c **** 
1060:Core/Src/main.c ****   /* USER CODE END UART4_Init 0 */
1061:Core/Src/main.c **** 
1062:Core/Src/main.c ****   /* USER CODE BEGIN UART4_Init 1 */
1063:Core/Src/main.c **** 
1064:Core/Src/main.c ****   /* USER CODE END UART4_Init 1 */
1065:Core/Src/main.c ****   huart4.Instance = UART4;
1066:Core/Src/main.c ****   huart4.Init.BaudRate = 115200;
1067:Core/Src/main.c ****   huart4.Init.WordLength = UART_WORDLENGTH_8B;
1068:Core/Src/main.c ****   huart4.Init.StopBits = UART_STOPBITS_1;
1069:Core/Src/main.c ****   huart4.Init.Parity = UART_PARITY_NONE;
1070:Core/Src/main.c ****   huart4.Init.Mode = UART_MODE_TX_RX;
1071:Core/Src/main.c ****   huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
1072:Core/Src/main.c ****   huart4.Init.OverSampling = UART_OVERSAMPLING_16;
1073:Core/Src/main.c ****   if (HAL_UART_Init(&huart4) != HAL_OK)
1074:Core/Src/main.c ****   {
1075:Core/Src/main.c ****     Error_Handler();
1076:Core/Src/main.c ****   }
1077:Core/Src/main.c ****   /* USER CODE BEGIN UART4_Init 2 */
1078:Core/Src/main.c **** 
1079:Core/Src/main.c ****   /* USER CODE END UART4_Init 2 */
1080:Core/Src/main.c **** 
1081:Core/Src/main.c **** }
1082:Core/Src/main.c **** 
1083:Core/Src/main.c **** /**
1084:Core/Src/main.c ****   * Enable DMA controller clock
1085:Core/Src/main.c ****   */
1086:Core/Src/main.c **** static void MX_DMA_Init(void)
1087:Core/Src/main.c **** {
1088:Core/Src/main.c **** 
1089:Core/Src/main.c ****   /* DMA controller clock enable */
1090:Core/Src/main.c ****   __HAL_RCC_DMA1_CLK_ENABLE();
1091:Core/Src/main.c ****   __HAL_RCC_DMA2_CLK_ENABLE();
1092:Core/Src/main.c **** 
1093:Core/Src/main.c ****   /* DMA interrupt init */
1094:Core/Src/main.c ****   /* DMA1_Stream1_IRQn interrupt configuration */
1095:Core/Src/main.c ****   HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
1096:Core/Src/main.c ****   HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
1097:Core/Src/main.c ****   /* DMA1_Stream2_IRQn interrupt configuration */
1098:Core/Src/main.c ****   HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
1099:Core/Src/main.c ****   HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
1100:Core/Src/main.c ****   /* DMA2_Stream0_IRQn interrupt configuration */
1101:Core/Src/main.c ****   HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
1102:Core/Src/main.c ****   HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
1103:Core/Src/main.c **** 
1104:Core/Src/main.c **** }
1105:Core/Src/main.c **** 
1106:Core/Src/main.c **** /**
1107:Core/Src/main.c ****   * @brief GPIO Initialization Function
1108:Core/Src/main.c ****   * @param None
1109:Core/Src/main.c ****   * @retval None
1110:Core/Src/main.c ****   */
1111:Core/Src/main.c **** static void MX_GPIO_Init(void)
1112:Core/Src/main.c **** {
  28              		.loc 1 1112 1 view -0
  29              		.cfi_startproc
ARM GAS  C:\Temp\cc4ZtMPR.s 			page 21


  30              		@ args = 0, pretend = 0, frame = 56
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
  33              		.cfi_def_cfa_offset 24
  34              		.cfi_offset 4, -24
  35              		.cfi_offset 5, -20
  36              		.cfi_offset 6, -16
  37              		.cfi_offset 7, -12
  38              		.cfi_offset 8, -8
  39              		.cfi_offset 14, -4
  40 0004 8EB0     		sub	sp, sp, #56
  41              		.cfi_def_cfa_offset 80
1113:Core/Src/main.c ****   GPIO_InitTypeDef GPIO_InitStruct = {0};
  42              		.loc 1 1113 3 view .LVU1
  43              		.loc 1 1113 20 is_stmt 0 view .LVU2
  44 0006 0024     		movs	r4, #0
  45 0008 0994     		str	r4, [sp, #36]
  46 000a 0A94     		str	r4, [sp, #40]
  47 000c 0B94     		str	r4, [sp, #44]
  48 000e 0C94     		str	r4, [sp, #48]
  49 0010 0D94     		str	r4, [sp, #52]
1114:Core/Src/main.c **** /* USER CODE BEGIN MX_GPIO_Init_1 */
1115:Core/Src/main.c **** /* USER CODE END MX_GPIO_Init_1 */
1116:Core/Src/main.c **** 
1117:Core/Src/main.c ****   /* GPIO Ports Clock Enable */
1118:Core/Src/main.c ****   __HAL_RCC_GPIOE_CLK_ENABLE();
  50              		.loc 1 1118 3 is_stmt 1 view .LVU3
  51              	.LBB4:
  52              		.loc 1 1118 3 view .LVU4
  53 0012 0194     		str	r4, [sp, #4]
  54              		.loc 1 1118 3 view .LVU5
  55 0014 564B     		ldr	r3, .L3
  56 0016 1A6B     		ldr	r2, [r3, #48]
  57 0018 42F01002 		orr	r2, r2, #16
  58 001c 1A63     		str	r2, [r3, #48]
  59              		.loc 1 1118 3 view .LVU6
  60 001e 1A6B     		ldr	r2, [r3, #48]
  61 0020 02F01002 		and	r2, r2, #16
  62 0024 0192     		str	r2, [sp, #4]
  63              		.loc 1 1118 3 view .LVU7
  64 0026 019A     		ldr	r2, [sp, #4]
  65              	.LBE4:
  66              		.loc 1 1118 3 view .LVU8
1119:Core/Src/main.c ****   __HAL_RCC_GPIOC_CLK_ENABLE();
  67              		.loc 1 1119 3 view .LVU9
  68              	.LBB5:
  69              		.loc 1 1119 3 view .LVU10
  70 0028 0294     		str	r4, [sp, #8]
  71              		.loc 1 1119 3 view .LVU11
  72 002a 1A6B     		ldr	r2, [r3, #48]
  73 002c 42F00402 		orr	r2, r2, #4
  74 0030 1A63     		str	r2, [r3, #48]
  75              		.loc 1 1119 3 view .LVU12
  76 0032 1A6B     		ldr	r2, [r3, #48]
  77 0034 02F00402 		and	r2, r2, #4
  78 0038 0292     		str	r2, [sp, #8]
  79              		.loc 1 1119 3 view .LVU13
ARM GAS  C:\Temp\cc4ZtMPR.s 			page 22


  80 003a 029A     		ldr	r2, [sp, #8]
  81              	.LBE5:
  82              		.loc 1 1119 3 view .LVU14
1120:Core/Src/main.c ****   __HAL_RCC_GPIOF_CLK_ENABLE();
  83              		.loc 1 1120 3 view .LVU15
  84              	.LBB6:
  85              		.loc 1 1120 3 view .LVU16
  86 003c 0394     		str	r4, [sp, #12]
  87              		.loc 1 1120 3 view .LVU17
  88 003e 1A6B     		ldr	r2, [r3, #48]
  89 0040 42F02002 		orr	r2, r2, #32
  90 0044 1A63     		str	r2, [r3, #48]
  91              		.loc 1 1120 3 view .LVU18
  92 0046 1A6B     		ldr	r2, [r3, #48]
  93 0048 02F02002 		and	r2, r2, #32
  94 004c 0392     		str	r2, [sp, #12]
  95              		.loc 1 1120 3 view .LVU19
  96 004e 039A     		ldr	r2, [sp, #12]
  97              	.LBE6:
  98              		.loc 1 1120 3 view .LVU20
1121:Core/Src/main.c ****   __HAL_RCC_GPIOH_CLK_ENABLE();
  99              		.loc 1 1121 3 view .LVU21
 100              	.LBB7:
 101              		.loc 1 1121 3 view .LVU22
 102 0050 0494     		str	r4, [sp, #16]
 103              		.loc 1 1121 3 view .LVU23
 104 0052 1A6B     		ldr	r2, [r3, #48]
 105 0054 42F08002 		orr	r2, r2, #128
 106 0058 1A63     		str	r2, [r3, #48]
 107              		.loc 1 1121 3 view .LVU24
 108 005a 1A6B     		ldr	r2, [r3, #48]
 109 005c 02F08002 		and	r2, r2, #128
 110 0060 0492     		str	r2, [sp, #16]
 111              		.loc 1 1121 3 view .LVU25
 112 0062 049A     		ldr	r2, [sp, #16]
 113              	.LBE7:
 114              		.loc 1 1121 3 view .LVU26
1122:Core/Src/main.c ****   __HAL_RCC_GPIOA_CLK_ENABLE();
 115              		.loc 1 1122 3 view .LVU27
 116              	.LBB8:
 117              		.loc 1 1122 3 view .LVU28
 118 0064 0594     		str	r4, [sp, #20]
 119              		.loc 1 1122 3 view .LVU29
 120 0066 1A6B     		ldr	r2, [r3, #48]
 121 0068 42F00102 		orr	r2, r2, #1
 122 006c 1A63     		str	r2, [r3, #48]
 123              		.loc 1 1122 3 view .LVU30
 124 006e 1A6B     		ldr	r2, [r3, #48]
 125 0070 02F00102 		and	r2, r2, #1
 126 0074 0592     		str	r2, [sp, #20]
 127              		.loc 1 1122 3 view .LVU31
 128 0076 059A     		ldr	r2, [sp, #20]
 129              	.LBE8:
 130              		.loc 1 1122 3 view .LVU32
1123:Core/Src/main.c ****   __HAL_RCC_GPIOB_CLK_ENABLE();
 131              		.loc 1 1123 3 view .LVU33
 132              	.LBB9:
ARM GAS  C:\Temp\cc4ZtMPR.s 			page 23


 133              		.loc 1 1123 3 view .LVU34
 134 0078 0694     		str	r4, [sp, #24]
 135              		.loc 1 1123 3 view .LVU35
 136 007a 1A6B     		ldr	r2, [r3, #48]
 137 007c 42F00202 		orr	r2, r2, #2
 138 0080 1A63     		str	r2, [r3, #48]
 139              		.loc 1 1123 3 view .LVU36
 140 0082 1A6B     		ldr	r2, [r3, #48]
 141 0084 02F00202 		and	r2, r2, #2
 142 0088 0692     		str	r2, [sp, #24]
 143              		.loc 1 1123 3 view .LVU37
 144 008a 069A     		ldr	r2, [sp, #24]
 145              	.LBE9:
 146              		.loc 1 1123 3 view .LVU38
1124:Core/Src/main.c ****   __HAL_RCC_GPIOD_CLK_ENABLE();
 147              		.loc 1 1124 3 view .LVU39
 148              	.LBB10:
 149              		.loc 1 1124 3 view .LVU40
 150 008c 0794     		str	r4, [sp, #28]
 151              		.loc 1 1124 3 view .LVU41
 152 008e 1A6B     		ldr	r2, [r3, #48]
 153 0090 42F00802 		orr	r2, r2, #8
 154 0094 1A63     		str	r2, [r3, #48]
 155              		.loc 1 1124 3 view .LVU42
 156 0096 1A6B     		ldr	r2, [r3, #48]
 157 0098 02F00802 		and	r2, r2, #8
 158 009c 0792     		str	r2, [sp, #28]
 159              		.loc 1 1124 3 view .LVU43
 160 009e 079A     		ldr	r2, [sp, #28]
 161              	.LBE10:
 162              		.loc 1 1124 3 view .LVU44
1125:Core/Src/main.c ****   __HAL_RCC_GPIOG_CLK_ENABLE();
 163              		.loc 1 1125 3 view .LVU45
 164              	.LBB11:
 165              		.loc 1 1125 3 view .LVU46
 166 00a0 0894     		str	r4, [sp, #32]
 167              		.loc 1 1125 3 view .LVU47
 168 00a2 1A6B     		ldr	r2, [r3, #48]
 169 00a4 42F04002 		orr	r2, r2, #64
 170 00a8 1A63     		str	r2, [r3, #48]
 171              		.loc 1 1125 3 view .LVU48
 172 00aa 1B6B     		ldr	r3, [r3, #48]
 173 00ac 03F04003 		and	r3, r3, #64
 174 00b0 0893     		str	r3, [sp, #32]
 175              		.loc 1 1125 3 view .LVU49
 176 00b2 089B     		ldr	r3, [sp, #32]
 177              	.LBE11:
 178              		.loc 1 1125 3 view .LVU50
1126:Core/Src/main.c **** 
1127:Core/Src/main.c ****   /*Configure GPIO pin Output Level */
1128:Core/Src/main.c ****   HAL_GPIO_WritePin(GPIOB, LED_0_Pin|LED_1_Pin|LED_2_Pin|LED_3_Pin
 179              		.loc 1 1128 3 view .LVU51
 180 00b4 2F4F     		ldr	r7, .L3+4
 181 00b6 2246     		mov	r2, r4
 182 00b8 FF21     		movs	r1, #255
 183 00ba 3846     		mov	r0, r7
 184 00bc FFF7FEFF 		bl	HAL_GPIO_WritePin
ARM GAS  C:\Temp\cc4ZtMPR.s 			page 24


 185              	.LVL0:
1129:Core/Src/main.c ****                           |LED_4_Pin|LED_5_Pin|LED_6_Pin|LED_7_Pin, GPIO_PIN_RESET);
1130:Core/Src/main.c **** 
1131:Core/Src/main.c ****   /*Configure GPIO pin Output Level */
1132:Core/Src/main.c ****   HAL_GPIO_WritePin(GPIOD, Stepper_0_Pin|Stepper_2_Pin|Stepper_1_Pin|Stepper_3_Pin
 186              		.loc 1 1132 3 view .LVU52
 187 00c0 DFF8BC80 		ldr	r8, .L3+16
 188 00c4 2246     		mov	r2, r4
 189 00c6 4FF20C01 		movw	r1, #61452
 190 00ca 4046     		mov	r0, r8
 191 00cc FFF7FEFF 		bl	HAL_GPIO_WritePin
 192              	.LVL1:
1133:Core/Src/main.c ****                           |Relay_1_Pin|Relay_2_Pin, GPIO_PIN_RESET);
1134:Core/Src/main.c **** 
1135:Core/Src/main.c ****   /*Configure GPIO pin Output Level */
1136:Core/Src/main.c ****   HAL_GPIO_WritePin(GPIOG, SEG_G0_Pin|SEG_G1_Pin|SEG_A_Pin|SEG_F_Pin
 193              		.loc 1 1136 3 view .LVU53
 194 00d0 294E     		ldr	r6, .L3+8
 195 00d2 2246     		mov	r2, r4
 196 00d4 41F6FC71 		movw	r1, #8188
 197 00d8 3046     		mov	r0, r6
 198 00da FFF7FEFF 		bl	HAL_GPIO_WritePin
 199              	.LVL2:
1137:Core/Src/main.c ****                           |SEG_B_Pin|SEG_G2_Pin|SEG_G_Pin|SEG_C_Pin
1138:Core/Src/main.c ****                           |SEG_DP_Pin|SEG_D_Pin|SEG_E_Pin, GPIO_PIN_RESET);
1139:Core/Src/main.c **** 
1140:Core/Src/main.c ****   /*Configure GPIO pins : SW_0_Pin SW_1_Pin SW_2_Pin SW_3_Pin
1141:Core/Src/main.c ****                            TOG_0_Pin TOG_1_Pin TOG_2_Pin TOG_3_Pin */
1142:Core/Src/main.c ****   GPIO_InitStruct.Pin = SW_0_Pin|SW_1_Pin|SW_2_Pin|SW_3_Pin
 200              		.loc 1 1142 3 view .LVU54
 201              		.loc 1 1142 23 is_stmt 0 view .LVU55
 202 00de 40F2BC73 		movw	r3, #1980
 203 00e2 0993     		str	r3, [sp, #36]
1143:Core/Src/main.c ****                           |TOG_0_Pin|TOG_1_Pin|TOG_2_Pin|TOG_3_Pin;
1144:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 204              		.loc 1 1144 3 is_stmt 1 view .LVU56
 205              		.loc 1 1144 24 is_stmt 0 view .LVU57
 206 00e4 0A94     		str	r4, [sp, #40]
1145:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 207              		.loc 1 1145 3 is_stmt 1 view .LVU58
 208              		.loc 1 1145 24 is_stmt 0 view .LVU59
 209 00e6 0B94     		str	r4, [sp, #44]
1146:Core/Src/main.c ****   HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 210              		.loc 1 1146 3 is_stmt 1 view .LVU60
 211 00e8 09A9     		add	r1, sp, #36
 212 00ea 2448     		ldr	r0, .L3+12
 213 00ec FFF7FEFF 		bl	HAL_GPIO_Init
 214              	.LVL3:
1147:Core/Src/main.c **** 
1148:Core/Src/main.c ****   /*Configure GPIO pins : LED_0_Pin LED_1_Pin LED_2_Pin LED_3_Pin
1149:Core/Src/main.c ****                            LED_4_Pin LED_5_Pin LED_6_Pin LED_7_Pin */
1150:Core/Src/main.c ****   GPIO_InitStruct.Pin = LED_0_Pin|LED_1_Pin|LED_2_Pin|LED_3_Pin
 215              		.loc 1 1150 3 view .LVU61
 216              		.loc 1 1150 23 is_stmt 0 view .LVU62
 217 00f0 FF23     		movs	r3, #255
 218 00f2 0993     		str	r3, [sp, #36]
1151:Core/Src/main.c ****                           |LED_4_Pin|LED_5_Pin|LED_6_Pin|LED_7_Pin;
ARM GAS  C:\Temp\cc4ZtMPR.s 			page 25


1152:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 219              		.loc 1 1152 3 is_stmt 1 view .LVU63
 220              		.loc 1 1152 24 is_stmt 0 view .LVU64
 221 00f4 0125     		movs	r5, #1
 222 00f6 0A95     		str	r5, [sp, #40]
1153:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 223              		.loc 1 1153 3 is_stmt 1 view .LVU65
 224              		.loc 1 1153 24 is_stmt 0 view .LVU66
 225 00f8 0B94     		str	r4, [sp, #44]
1154:Core/Src/main.c ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 226              		.loc 1 1154 3 is_stmt 1 view .LVU67
 227              		.loc 1 1154 25 is_stmt 0 view .LVU68
 228 00fa 0C94     		str	r4, [sp, #48]
1155:Core/Src/main.c ****   HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 229              		.loc 1 1155 3 is_stmt 1 view .LVU69
 230 00fc 09A9     		add	r1, sp, #36
 231 00fe 3846     		mov	r0, r7
 232 0100 FFF7FEFF 		bl	HAL_GPIO_Init
 233              	.LVL4:
1156:Core/Src/main.c **** 
1157:Core/Src/main.c ****   /*Configure GPIO pins : Stepper_0_Pin Stepper_2_Pin Stepper_1_Pin Stepper_3_Pin
1158:Core/Src/main.c ****                            Relay_1_Pin Relay_2_Pin */
1159:Core/Src/main.c ****   GPIO_InitStruct.Pin = Stepper_0_Pin|Stepper_2_Pin|Stepper_1_Pin|Stepper_3_Pin
 234              		.loc 1 1159 3 view .LVU70
 235              		.loc 1 1159 23 is_stmt 0 view .LVU71
 236 0104 4FF20C03 		movw	r3, #61452
 237 0108 0993     		str	r3, [sp, #36]
1160:Core/Src/main.c ****                           |Relay_1_Pin|Relay_2_Pin;
1161:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 238              		.loc 1 1161 3 is_stmt 1 view .LVU72
 239              		.loc 1 1161 24 is_stmt 0 view .LVU73
 240 010a 0A95     		str	r5, [sp, #40]
1162:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 241              		.loc 1 1162 3 is_stmt 1 view .LVU74
 242              		.loc 1 1162 24 is_stmt 0 view .LVU75
 243 010c 0B94     		str	r4, [sp, #44]
1163:Core/Src/main.c ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 244              		.loc 1 1163 3 is_stmt 1 view .LVU76
 245              		.loc 1 1163 25 is_stmt 0 view .LVU77
 246 010e 0327     		movs	r7, #3
 247 0110 0C97     		str	r7, [sp, #48]
1164:Core/Src/main.c ****   HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 248              		.loc 1 1164 3 is_stmt 1 view .LVU78
 249 0112 09A9     		add	r1, sp, #36
 250 0114 4046     		mov	r0, r8
 251 0116 FFF7FEFF 		bl	HAL_GPIO_Init
 252              	.LVL5:
1165:Core/Src/main.c **** 
1166:Core/Src/main.c ****   /*Configure GPIO pins : SEG_G0_Pin SEG_G1_Pin SEG_A_Pin SEG_F_Pin
1167:Core/Src/main.c ****                            SEG_B_Pin SEG_G2_Pin SEG_DP_Pin */
1168:Core/Src/main.c ****   GPIO_InitStruct.Pin = SEG_G0_Pin|SEG_G1_Pin|SEG_A_Pin|SEG_F_Pin
 253              		.loc 1 1168 3 view .LVU79
 254              		.loc 1 1168 23 is_stmt 0 view .LVU80
 255 011a 40F2FC43 		movw	r3, #1276
 256 011e 0993     		str	r3, [sp, #36]
1169:Core/Src/main.c ****                           |SEG_B_Pin|SEG_G2_Pin|SEG_DP_Pin;
1170:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
ARM GAS  C:\Temp\cc4ZtMPR.s 			page 26


 257              		.loc 1 1170 3 is_stmt 1 view .LVU81
 258              		.loc 1 1170 24 is_stmt 0 view .LVU82
 259 0120 0A95     		str	r5, [sp, #40]
1171:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 260              		.loc 1 1171 3 is_stmt 1 view .LVU83
 261              		.loc 1 1171 24 is_stmt 0 view .LVU84
 262 0122 0B94     		str	r4, [sp, #44]
1172:Core/Src/main.c ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 263              		.loc 1 1172 3 is_stmt 1 view .LVU85
 264              		.loc 1 1172 25 is_stmt 0 view .LVU86
 265 0124 0C94     		str	r4, [sp, #48]
1173:Core/Src/main.c ****   HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 266              		.loc 1 1173 3 is_stmt 1 view .LVU87
 267 0126 09A9     		add	r1, sp, #36
 268 0128 3046     		mov	r0, r6
 269 012a FFF7FEFF 		bl	HAL_GPIO_Init
 270              	.LVL6:
1174:Core/Src/main.c **** 
1175:Core/Src/main.c ****   /*Configure GPIO pins : SEG_G_Pin SEG_C_Pin SEG_D_Pin SEG_E_Pin */
1176:Core/Src/main.c ****   GPIO_InitStruct.Pin = SEG_G_Pin|SEG_C_Pin|SEG_D_Pin|SEG_E_Pin;
 271              		.loc 1 1176 3 view .LVU88
 272              		.loc 1 1176 23 is_stmt 0 view .LVU89
 273 012e 4FF4D853 		mov	r3, #6912
 274 0132 0993     		str	r3, [sp, #36]
1177:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 275              		.loc 1 1177 3 is_stmt 1 view .LVU90
 276              		.loc 1 1177 24 is_stmt 0 view .LVU91
 277 0134 0A95     		str	r5, [sp, #40]
1178:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 278              		.loc 1 1178 3 is_stmt 1 view .LVU92
 279              		.loc 1 1178 24 is_stmt 0 view .LVU93
 280 0136 0B94     		str	r4, [sp, #44]
1179:Core/Src/main.c ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 281              		.loc 1 1179 3 is_stmt 1 view .LVU94
 282              		.loc 1 1179 25 is_stmt 0 view .LVU95
 283 0138 0C97     		str	r7, [sp, #48]
1180:Core/Src/main.c ****   HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 284              		.loc 1 1180 3 is_stmt 1 view .LVU96
 285 013a 09A9     		add	r1, sp, #36
 286 013c 3046     		mov	r0, r6
 287 013e FFF7FEFF 		bl	HAL_GPIO_Init
 288              	.LVL7:
1181:Core/Src/main.c **** 
1182:Core/Src/main.c ****   /*Configure GPIO pin : IMU_INT_Pin */
1183:Core/Src/main.c ****   GPIO_InitStruct.Pin = IMU_INT_Pin;
 289              		.loc 1 1183 3 view .LVU97
 290              		.loc 1 1183 23 is_stmt 0 view .LVU98
 291 0142 4FF40043 		mov	r3, #32768
 292 0146 0993     		str	r3, [sp, #36]
1184:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 293              		.loc 1 1184 3 is_stmt 1 view .LVU99
 294              		.loc 1 1184 24 is_stmt 0 view .LVU100
 295 0148 4FF40413 		mov	r3, #2162688
 296 014c 0A93     		str	r3, [sp, #40]
1185:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_PULLUP;
 297              		.loc 1 1185 3 is_stmt 1 view .LVU101
 298              		.loc 1 1185 24 is_stmt 0 view .LVU102
ARM GAS  C:\Temp\cc4ZtMPR.s 			page 27


 299 014e 0B95     		str	r5, [sp, #44]
1186:Core/Src/main.c ****   HAL_GPIO_Init(IMU_INT_GPIO_Port, &GPIO_InitStruct);
 300              		.loc 1 1186 3 is_stmt 1 view .LVU103
 301 0150 09A9     		add	r1, sp, #36
 302 0152 3046     		mov	r0, r6
 303 0154 FFF7FEFF 		bl	HAL_GPIO_Init
 304              	.LVL8:
1187:Core/Src/main.c **** 
1188:Core/Src/main.c ****   /* EXTI interrupt init*/
1189:Core/Src/main.c ****   HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 305              		.loc 1 1189 3 view .LVU104
 306 0158 2246     		mov	r2, r4
 307 015a 2146     		mov	r1, r4
 308 015c 2820     		movs	r0, #40
 309 015e FFF7FEFF 		bl	HAL_NVIC_SetPriority
 310              	.LVL9:
1190:Core/Src/main.c ****   HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 311              		.loc 1 1190 3 view .LVU105
 312 0162 2820     		movs	r0, #40
 313 0164 FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 314              	.LVL10:
1191:Core/Src/main.c **** 
1192:Core/Src/main.c **** /* USER CODE BEGIN MX_GPIO_Init_2 */
1193:Core/Src/main.c **** /* USER CODE END MX_GPIO_Init_2 */
1194:Core/Src/main.c **** }
 315              		.loc 1 1194 1 is_stmt 0 view .LVU106
 316 0168 0EB0     		add	sp, sp, #56
 317              		.cfi_def_cfa_offset 24
 318              		@ sp needed
 319 016a BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 320              	.L4:
 321 016e 00BF     		.align	2
 322              	.L3:
 323 0170 00380240 		.word	1073887232
 324 0174 00040240 		.word	1073873920
 325 0178 00180240 		.word	1073879040
 326 017c 00100240 		.word	1073876992
 327 0180 000C0240 		.word	1073875968
 328              		.cfi_endproc
 329              	.LFE259:
 331              		.section	.text.MX_DMA_Init,"ax",%progbits
 332              		.align	1
 333              		.syntax unified
 334              		.thumb
 335              		.thumb_func
 337              	MX_DMA_Init:
 338              	.LFB258:
1087:Core/Src/main.c **** 
 339              		.loc 1 1087 1 is_stmt 1 view -0
 340              		.cfi_startproc
 341              		@ args = 0, pretend = 0, frame = 8
 342              		@ frame_needed = 0, uses_anonymous_args = 0
 343 0000 10B5     		push	{r4, lr}
 344              		.cfi_def_cfa_offset 8
 345              		.cfi_offset 4, -8
 346              		.cfi_offset 14, -4
 347 0002 82B0     		sub	sp, sp, #8
ARM GAS  C:\Temp\cc4ZtMPR.s 			page 28


 348              		.cfi_def_cfa_offset 16
1090:Core/Src/main.c ****   __HAL_RCC_DMA2_CLK_ENABLE();
 349              		.loc 1 1090 3 view .LVU108
 350              	.LBB12:
1090:Core/Src/main.c ****   __HAL_RCC_DMA2_CLK_ENABLE();
 351              		.loc 1 1090 3 view .LVU109
 352 0004 0024     		movs	r4, #0
 353 0006 0094     		str	r4, [sp]
1090:Core/Src/main.c ****   __HAL_RCC_DMA2_CLK_ENABLE();
 354              		.loc 1 1090 3 view .LVU110
 355 0008 164B     		ldr	r3, .L7
 356 000a 1A6B     		ldr	r2, [r3, #48]
 357 000c 42F40012 		orr	r2, r2, #2097152
 358 0010 1A63     		str	r2, [r3, #48]
1090:Core/Src/main.c ****   __HAL_RCC_DMA2_CLK_ENABLE();
 359              		.loc 1 1090 3 view .LVU111
 360 0012 1A6B     		ldr	r2, [r3, #48]
 361 0014 02F40012 		and	r2, r2, #2097152
 362 0018 0092     		str	r2, [sp]
1090:Core/Src/main.c ****   __HAL_RCC_DMA2_CLK_ENABLE();
 363              		.loc 1 1090 3 view .LVU112
 364 001a 009A     		ldr	r2, [sp]
 365              	.LBE12:
1090:Core/Src/main.c ****   __HAL_RCC_DMA2_CLK_ENABLE();
 366              		.loc 1 1090 3 view .LVU113
1091:Core/Src/main.c **** 
 367              		.loc 1 1091 3 view .LVU114
 368              	.LBB13:
1091:Core/Src/main.c **** 
 369              		.loc 1 1091 3 view .LVU115
 370 001c 0194     		str	r4, [sp, #4]
1091:Core/Src/main.c **** 
 371              		.loc 1 1091 3 view .LVU116
 372 001e 1A6B     		ldr	r2, [r3, #48]
 373 0020 42F48002 		orr	r2, r2, #4194304
 374 0024 1A63     		str	r2, [r3, #48]
1091:Core/Src/main.c **** 
 375              		.loc 1 1091 3 view .LVU117
 376 0026 1B6B     		ldr	r3, [r3, #48]
 377 0028 03F48003 		and	r3, r3, #4194304
 378 002c 0193     		str	r3, [sp, #4]
1091:Core/Src/main.c **** 
 379              		.loc 1 1091 3 view .LVU118
 380 002e 019B     		ldr	r3, [sp, #4]
 381              	.LBE13:
1091:Core/Src/main.c **** 
 382              		.loc 1 1091 3 view .LVU119
1095:Core/Src/main.c ****   HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 383              		.loc 1 1095 3 view .LVU120
 384 0030 2246     		mov	r2, r4
 385 0032 2146     		mov	r1, r4
 386 0034 0C20     		movs	r0, #12
 387 0036 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 388              	.LVL11:
1096:Core/Src/main.c ****   /* DMA1_Stream2_IRQn interrupt configuration */
 389              		.loc 1 1096 3 view .LVU121
 390 003a 0C20     		movs	r0, #12
ARM GAS  C:\Temp\cc4ZtMPR.s 			page 29


 391 003c FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 392              	.LVL12:
1098:Core/Src/main.c ****   HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 393              		.loc 1 1098 3 view .LVU122
 394 0040 2246     		mov	r2, r4
 395 0042 2146     		mov	r1, r4
 396 0044 0D20     		movs	r0, #13
 397 0046 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 398              	.LVL13:
1099:Core/Src/main.c ****   /* DMA2_Stream0_IRQn interrupt configuration */
 399              		.loc 1 1099 3 view .LVU123
 400 004a 0D20     		movs	r0, #13
 401 004c FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 402              	.LVL14:
1101:Core/Src/main.c ****   HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 403              		.loc 1 1101 3 view .LVU124
 404 0050 2246     		mov	r2, r4
 405 0052 2146     		mov	r1, r4
 406 0054 3820     		movs	r0, #56
 407 0056 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 408              	.LVL15:
1102:Core/Src/main.c **** 
 409              		.loc 1 1102 3 view .LVU125
 410 005a 3820     		movs	r0, #56
 411 005c FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 412              	.LVL16:
1104:Core/Src/main.c **** 
 413              		.loc 1 1104 1 is_stmt 0 view .LVU126
 414 0060 02B0     		add	sp, sp, #8
 415              		.cfi_def_cfa_offset 8
 416              		@ sp needed
 417 0062 10BD     		pop	{r4, pc}
 418              	.L8:
 419              		.align	2
 420              	.L7:
 421 0064 00380240 		.word	1073887232
 422              		.cfi_endproc
 423              	.LFE258:
 425              		.section	.text.toByte,"ax",%progbits
 426              		.align	1
 427              		.global	toByte
 428              		.syntax unified
 429              		.thumb
 430              		.thumb_func
 432              	toByte:
 433              	.LVL17:
 434              	.LFB238:
 154:Core/Src/main.c ****   return (bool_array[0]<<7|
 435              		.loc 1 154 34 is_stmt 1 view -0
 436              		.cfi_startproc
 437              		@ args = 0, pretend = 0, frame = 0
 438              		@ frame_needed = 0, uses_anonymous_args = 0
 439              		@ link register save eliminated.
 155:Core/Src/main.c ****           bool_array[1]<<6|
 440              		.loc 1 155 3 view .LVU128
 155:Core/Src/main.c ****           bool_array[1]<<6|
 441              		.loc 1 155 21 is_stmt 0 view .LVU129
ARM GAS  C:\Temp\cc4ZtMPR.s 			page 30


 442 0000 0278     		ldrb	r2, [r0]	@ zero_extendqisi2
 156:Core/Src/main.c ****           bool_array[2]<<5|
 443              		.loc 1 156 21 view .LVU130
 444 0002 4378     		ldrb	r3, [r0, #1]	@ zero_extendqisi2
 156:Core/Src/main.c ****           bool_array[2]<<5|
 445              		.loc 1 156 24 view .LVU131
 446 0004 9B01     		lsls	r3, r3, #6
 155:Core/Src/main.c ****           bool_array[1]<<6|
 447              		.loc 1 155 27 view .LVU132
 448 0006 43EAC213 		orr	r3, r3, r2, lsl #7
 449 000a 5BB2     		sxtb	r3, r3
 157:Core/Src/main.c ****           bool_array[3]<<4|
 450              		.loc 1 157 21 view .LVU133
 451 000c 8278     		ldrb	r2, [r0, #2]	@ zero_extendqisi2
 156:Core/Src/main.c ****           bool_array[2]<<5|
 452              		.loc 1 156 27 view .LVU134
 453 000e 43EA4213 		orr	r3, r3, r2, lsl #5
 454 0012 5BB2     		sxtb	r3, r3
 158:Core/Src/main.c ****           bool_array[4]<<3|
 455              		.loc 1 158 21 view .LVU135
 456 0014 C278     		ldrb	r2, [r0, #3]	@ zero_extendqisi2
 157:Core/Src/main.c ****           bool_array[3]<<4|
 457              		.loc 1 157 27 view .LVU136
 458 0016 43EA0213 		orr	r3, r3, r2, lsl #4
 459 001a 5BB2     		sxtb	r3, r3
 159:Core/Src/main.c ****           bool_array[5]<<2|
 460              		.loc 1 159 21 view .LVU137
 461 001c 0279     		ldrb	r2, [r0, #4]	@ zero_extendqisi2
 158:Core/Src/main.c ****           bool_array[4]<<3|
 462              		.loc 1 158 27 view .LVU138
 463 001e 43EAC203 		orr	r3, r3, r2, lsl #3
 464 0022 5BB2     		sxtb	r3, r3
 160:Core/Src/main.c ****           bool_array[6]<<1|
 465              		.loc 1 160 21 view .LVU139
 466 0024 4279     		ldrb	r2, [r0, #5]	@ zero_extendqisi2
 159:Core/Src/main.c ****           bool_array[5]<<2|
 467              		.loc 1 159 27 view .LVU140
 468 0026 43EA8203 		orr	r3, r3, r2, lsl #2
 469 002a 5BB2     		sxtb	r3, r3
 161:Core/Src/main.c ****           bool_array[7]<<0
 470              		.loc 1 161 21 view .LVU141
 471 002c 8279     		ldrb	r2, [r0, #6]	@ zero_extendqisi2
 160:Core/Src/main.c ****           bool_array[6]<<1|
 472              		.loc 1 160 27 view .LVU142
 473 002e 43EA4203 		orr	r3, r3, r2, lsl #1
 474 0032 5BB2     		sxtb	r3, r3
 162:Core/Src/main.c ****   );
 475              		.loc 1 162 21 view .LVU143
 476 0034 90F90720 		ldrsb	r2, [r0, #7]
 161:Core/Src/main.c ****           bool_array[7]<<0
 477              		.loc 1 161 27 view .LVU144
 478 0038 43EA0200 		orr	r0, r3, r2
 479              	.LVL18:
 164:Core/Src/main.c **** 
 480              		.loc 1 164 1 view .LVU145
 481 003c C0B2     		uxtb	r0, r0
 482 003e 7047     		bx	lr
ARM GAS  C:\Temp\cc4ZtMPR.s 			page 31


 483              		.cfi_endproc
 484              	.LFE238:
 486              		.section	.text.signNumber32,"ax",%progbits
 487              		.align	1
 488              		.global	signNumber32
 489              		.syntax unified
 490              		.thumb
 491              		.thumb_func
 493              	signNumber32:
 494              	.LVL19:
 495              	.LFB239:
 166:Core/Src/main.c **** 	int32_t signedValue;
 496              		.loc 1 166 45 is_stmt 1 view -0
 497              		.cfi_startproc
 498              		@ args = 0, pretend = 0, frame = 0
 499              		@ frame_needed = 0, uses_anonymous_args = 0
 500              		@ link register save eliminated.
 167:Core/Src/main.c **** 
 501              		.loc 1 167 2 view .LVU147
 169:Core/Src/main.c ****         signedValue = (int32_t)unsignedValue; // No change needed, it fits in the signed range.
 502              		.loc 1 169 2 view .LVU148
 175:Core/Src/main.c **** }
 503              		.loc 1 175 2 view .LVU149
 176:Core/Src/main.c **** 
 504              		.loc 1 176 1 is_stmt 0 view .LVU150
 505 0000 7047     		bx	lr
 506              		.cfi_endproc
 507              	.LFE239:
 509              		.section	.text.sendToSimulink,"ax",%progbits
 510              		.align	1
 511              		.global	sendToSimulink
 512              		.syntax unified
 513              		.thumb
 514              		.thumb_func
 516              	sendToSimulink:
 517              	.LFB240:
 185:Core/Src/main.c ****   // Get toggle states
 518              		.loc 1 185 26 is_stmt 1 view -0
 519              		.cfi_startproc
 520              		@ args = 0, pretend = 0, frame = 0
 521              		@ frame_needed = 0, uses_anonymous_args = 0
 522 0000 38B5     		push	{r3, r4, r5, lr}
 523              		.cfi_def_cfa_offset 16
 524              		.cfi_offset 3, -16
 525              		.cfi_offset 4, -12
 526              		.cfi_offset 5, -8
 527              		.cfi_offset 14, -4
 187:Core/Src/main.c **** 	switch_states[6] = HAL_GPIO_ReadPin(TOG_1_GPIO_Port, TOG_1_Pin);
 528              		.loc 1 187 2 view .LVU152
 187:Core/Src/main.c **** 	switch_states[6] = HAL_GPIO_ReadPin(TOG_1_GPIO_Port, TOG_1_Pin);
 529              		.loc 1 187 21 is_stmt 0 view .LVU153
 530 0002 3E4D     		ldr	r5, .L13
 531 0004 8021     		movs	r1, #128
 532 0006 2846     		mov	r0, r5
 533 0008 FFF7FEFF 		bl	HAL_GPIO_ReadPin
 534              	.LVL20:
 535 000c 0038     		subs	r0, r0, #0
ARM GAS  C:\Temp\cc4ZtMPR.s 			page 32


 536 000e 18BF     		it	ne
 537 0010 0120     		movne	r0, #1
 187:Core/Src/main.c **** 	switch_states[6] = HAL_GPIO_ReadPin(TOG_1_GPIO_Port, TOG_1_Pin);
 538              		.loc 1 187 19 view .LVU154
 539 0012 3B4C     		ldr	r4, .L13+4
 540 0014 E071     		strb	r0, [r4, #7]
 188:Core/Src/main.c **** 	switch_states[5] = HAL_GPIO_ReadPin(TOG_2_GPIO_Port, TOG_2_Pin);
 541              		.loc 1 188 2 is_stmt 1 view .LVU155
 188:Core/Src/main.c **** 	switch_states[5] = HAL_GPIO_ReadPin(TOG_2_GPIO_Port, TOG_2_Pin);
 542              		.loc 1 188 21 is_stmt 0 view .LVU156
 543 0016 4FF48071 		mov	r1, #256
 544 001a 2846     		mov	r0, r5
 545 001c FFF7FEFF 		bl	HAL_GPIO_ReadPin
 546              	.LVL21:
 547 0020 0038     		subs	r0, r0, #0
 548 0022 18BF     		it	ne
 549 0024 0120     		movne	r0, #1
 188:Core/Src/main.c **** 	switch_states[5] = HAL_GPIO_ReadPin(TOG_2_GPIO_Port, TOG_2_Pin);
 550              		.loc 1 188 19 view .LVU157
 551 0026 A071     		strb	r0, [r4, #6]
 189:Core/Src/main.c **** 	switch_states[4] = HAL_GPIO_ReadPin(TOG_3_GPIO_Port, TOG_3_Pin);
 552              		.loc 1 189 2 is_stmt 1 view .LVU158
 189:Core/Src/main.c **** 	switch_states[4] = HAL_GPIO_ReadPin(TOG_3_GPIO_Port, TOG_3_Pin);
 553              		.loc 1 189 21 is_stmt 0 view .LVU159
 554 0028 4FF40071 		mov	r1, #512
 555 002c 2846     		mov	r0, r5
 556 002e FFF7FEFF 		bl	HAL_GPIO_ReadPin
 557              	.LVL22:
 558 0032 0038     		subs	r0, r0, #0
 559 0034 18BF     		it	ne
 560 0036 0120     		movne	r0, #1
 189:Core/Src/main.c **** 	switch_states[4] = HAL_GPIO_ReadPin(TOG_3_GPIO_Port, TOG_3_Pin);
 561              		.loc 1 189 19 view .LVU160
 562 0038 6071     		strb	r0, [r4, #5]
 190:Core/Src/main.c **** 	// Get button states (inverted because normally high)
 563              		.loc 1 190 2 is_stmt 1 view .LVU161
 190:Core/Src/main.c **** 	// Get button states (inverted because normally high)
 564              		.loc 1 190 21 is_stmt 0 view .LVU162
 565 003a 4FF48061 		mov	r1, #1024
 566 003e 2846     		mov	r0, r5
 567 0040 FFF7FEFF 		bl	HAL_GPIO_ReadPin
 568              	.LVL23:
 569 0044 0038     		subs	r0, r0, #0
 570 0046 18BF     		it	ne
 571 0048 0120     		movne	r0, #1
 190:Core/Src/main.c **** 	// Get button states (inverted because normally high)
 572              		.loc 1 190 19 view .LVU163
 573 004a 2071     		strb	r0, [r4, #4]
 192:Core/Src/main.c **** 	switch_states[2] = !HAL_GPIO_ReadPin(SW_1_GPIO_Port, SW_1_Pin);
 574              		.loc 1 192 2 is_stmt 1 view .LVU164
 192:Core/Src/main.c **** 	switch_states[2] = !HAL_GPIO_ReadPin(SW_1_GPIO_Port, SW_1_Pin);
 575              		.loc 1 192 22 is_stmt 0 view .LVU165
 576 004c 0421     		movs	r1, #4
 577 004e 2846     		mov	r0, r5
 578 0050 FFF7FEFF 		bl	HAL_GPIO_ReadPin
 579              	.LVL24:
 192:Core/Src/main.c **** 	switch_states[2] = !HAL_GPIO_ReadPin(SW_1_GPIO_Port, SW_1_Pin);
ARM GAS  C:\Temp\cc4ZtMPR.s 			page 33


 580              		.loc 1 192 21 view .LVU166
 581 0054 B0FA80F0 		clz	r0, r0
 582 0058 4009     		lsrs	r0, r0, #5
 192:Core/Src/main.c **** 	switch_states[2] = !HAL_GPIO_ReadPin(SW_1_GPIO_Port, SW_1_Pin);
 583              		.loc 1 192 19 view .LVU167
 584 005a E070     		strb	r0, [r4, #3]
 193:Core/Src/main.c **** 	switch_states[1] = !HAL_GPIO_ReadPin(SW_2_GPIO_Port, SW_2_Pin);
 585              		.loc 1 193 2 is_stmt 1 view .LVU168
 193:Core/Src/main.c **** 	switch_states[1] = !HAL_GPIO_ReadPin(SW_2_GPIO_Port, SW_2_Pin);
 586              		.loc 1 193 22 is_stmt 0 view .LVU169
 587 005c 0821     		movs	r1, #8
 588 005e 2846     		mov	r0, r5
 589 0060 FFF7FEFF 		bl	HAL_GPIO_ReadPin
 590              	.LVL25:
 193:Core/Src/main.c **** 	switch_states[1] = !HAL_GPIO_ReadPin(SW_2_GPIO_Port, SW_2_Pin);
 591              		.loc 1 193 21 view .LVU170
 592 0064 B0FA80F0 		clz	r0, r0
 593 0068 4009     		lsrs	r0, r0, #5
 193:Core/Src/main.c **** 	switch_states[1] = !HAL_GPIO_ReadPin(SW_2_GPIO_Port, SW_2_Pin);
 594              		.loc 1 193 19 view .LVU171
 595 006a A070     		strb	r0, [r4, #2]
 194:Core/Src/main.c **** 	switch_states[0] = !HAL_GPIO_ReadPin(SW_3_GPIO_Port, SW_3_Pin);
 596              		.loc 1 194 2 is_stmt 1 view .LVU172
 194:Core/Src/main.c **** 	switch_states[0] = !HAL_GPIO_ReadPin(SW_3_GPIO_Port, SW_3_Pin);
 597              		.loc 1 194 22 is_stmt 0 view .LVU173
 598 006c 1021     		movs	r1, #16
 599 006e 2846     		mov	r0, r5
 600 0070 FFF7FEFF 		bl	HAL_GPIO_ReadPin
 601              	.LVL26:
 194:Core/Src/main.c **** 	switch_states[0] = !HAL_GPIO_ReadPin(SW_3_GPIO_Port, SW_3_Pin);
 602              		.loc 1 194 21 view .LVU174
 603 0074 B0FA80F0 		clz	r0, r0
 604 0078 4009     		lsrs	r0, r0, #5
 194:Core/Src/main.c **** 	switch_states[0] = !HAL_GPIO_ReadPin(SW_3_GPIO_Port, SW_3_Pin);
 605              		.loc 1 194 19 view .LVU175
 606 007a 6070     		strb	r0, [r4, #1]
 195:Core/Src/main.c **** 
 607              		.loc 1 195 2 is_stmt 1 view .LVU176
 195:Core/Src/main.c **** 
 608              		.loc 1 195 22 is_stmt 0 view .LVU177
 609 007c 2021     		movs	r1, #32
 610 007e 2846     		mov	r0, r5
 611 0080 FFF7FEFF 		bl	HAL_GPIO_ReadPin
 612              	.LVL27:
 195:Core/Src/main.c **** 
 613              		.loc 1 195 21 view .LVU178
 614 0084 B0FA80F0 		clz	r0, r0
 615 0088 4009     		lsrs	r0, r0, #5
 195:Core/Src/main.c **** 
 616              		.loc 1 195 19 view .LVU179
 617 008a 2070     		strb	r0, [r4]
 197:Core/Src/main.c **** 
 618              		.loc 1 197 3 is_stmt 1 view .LVU180
 197:Core/Src/main.c **** 
 619              		.loc 1 197 25 is_stmt 0 view .LVU181
 620 008c 2046     		mov	r0, r4
 621 008e FFF7FEFF 		bl	toByte
ARM GAS  C:\Temp\cc4ZtMPR.s 			page 34


 622              	.LVL28:
 197:Core/Src/main.c **** 
 623              		.loc 1 197 23 view .LVU182
 624 0092 1C4D     		ldr	r5, .L13+8
 625 0094 2870     		strb	r0, [r5]
 199:Core/Src/main.c ****     HAL_UART_Transmit(&huart4, (uint8_t *)&POTS, sizeof(POTS), 10);
 626              		.loc 1 199 5 is_stmt 1 view .LVU183
 627 0096 1C4C     		ldr	r4, .L13+12
 628 0098 0A23     		movs	r3, #10
 629 009a 0122     		movs	r2, #1
 630 009c 1B49     		ldr	r1, .L13+16
 631 009e 2046     		mov	r0, r4
 632 00a0 FFF7FEFF 		bl	HAL_UART_Transmit
 633              	.LVL29:
 200:Core/Src/main.c ****     HAL_UART_Transmit(&huart4, (uint8_t *)&switch_states_uint8, sizeof(switch_states_uint8), 10);
 634              		.loc 1 200 5 view .LVU184
 635 00a4 0A23     		movs	r3, #10
 636 00a6 0822     		movs	r2, #8
 637 00a8 1949     		ldr	r1, .L13+20
 638 00aa 2046     		mov	r0, r4
 639 00ac FFF7FEFF 		bl	HAL_UART_Transmit
 640              	.LVL30:
 201:Core/Src/main.c ****     HAL_UART_Transmit(&huart4, (float_t *)&IMU_Accel, sizeof(IMU_Accel), 10);
 641              		.loc 1 201 5 view .LVU185
 642 00b0 0A23     		movs	r3, #10
 643 00b2 0122     		movs	r2, #1
 644 00b4 2946     		mov	r1, r5
 645 00b6 2046     		mov	r0, r4
 646 00b8 FFF7FEFF 		bl	HAL_UART_Transmit
 647              	.LVL31:
 202:Core/Src/main.c ****     HAL_UART_Transmit(&huart4, (float_t *)&IMU_Gyro, sizeof(IMU_Gyro), 10);
 648              		.loc 1 202 5 view .LVU186
 649 00bc 0A23     		movs	r3, #10
 650 00be 0C22     		movs	r2, #12
 651 00c0 1449     		ldr	r1, .L13+24
 652 00c2 2046     		mov	r0, r4
 653 00c4 FFF7FEFF 		bl	HAL_UART_Transmit
 654              	.LVL32:
 203:Core/Src/main.c **** 
 655              		.loc 1 203 5 view .LVU187
 656 00c8 0A23     		movs	r3, #10
 657 00ca 0C22     		movs	r2, #12
 658 00cc 1249     		ldr	r1, .L13+28
 659 00ce 2046     		mov	r0, r4
 660 00d0 FFF7FEFF 		bl	HAL_UART_Transmit
 661              	.LVL33:
 205:Core/Src/main.c ****     HAL_UART_Transmit(&huart4, (int16_t *)&CurrentMonitor_Servo, sizeof(CurrentMonitor_Servo), 10);
 662              		.loc 1 205 5 view .LVU188
 663 00d4 0A23     		movs	r3, #10
 664 00d6 0422     		movs	r2, #4
 665 00d8 1049     		ldr	r1, .L13+32
 666 00da 2046     		mov	r0, r4
 667 00dc FFF7FEFF 		bl	HAL_UART_Transmit
 668              	.LVL34:
 206:Core/Src/main.c ****     HAL_UART_Transmit(&huart4, (int16_t *)&CurrentMonitor_Stepper, sizeof(CurrentMonitor_Stepper), 
 669              		.loc 1 206 5 view .LVU189
 670 00e0 0A23     		movs	r3, #10
ARM GAS  C:\Temp\cc4ZtMPR.s 			page 35


 671 00e2 0422     		movs	r2, #4
 672 00e4 0E49     		ldr	r1, .L13+36
 673 00e6 2046     		mov	r0, r4
 674 00e8 FFF7FEFF 		bl	HAL_UART_Transmit
 675              	.LVL35:
 207:Core/Src/main.c **** }
 676              		.loc 1 207 5 view .LVU190
 677 00ec 0A23     		movs	r3, #10
 678 00ee 0422     		movs	r2, #4
 679 00f0 0C49     		ldr	r1, .L13+40
 680 00f2 2046     		mov	r0, r4
 681 00f4 FFF7FEFF 		bl	HAL_UART_Transmit
 682              	.LVL36:
 208:Core/Src/main.c **** 
 683              		.loc 1 208 1 is_stmt 0 view .LVU191
 684 00f8 38BD     		pop	{r3, r4, r5, pc}
 685              	.L14:
 686 00fa 00BF     		.align	2
 687              	.L13:
 688 00fc 00100240 		.word	1073876992
 689 0100 00000000 		.word	switch_states
 690 0104 00000000 		.word	switch_states_uint8
 691 0108 00000000 		.word	huart4
 692 010c 00000000 		.word	header1
 693 0110 00000000 		.word	POTS
 694 0114 00000000 		.word	IMU_Accel
 695 0118 00000000 		.word	IMU_Gyro
 696 011c 00000000 		.word	CurrentMonitor_Barrel
 697 0120 00000000 		.word	CurrentMonitor_Servo
 698 0124 00000000 		.word	CurrentMonitor_Stepper
 699              		.cfi_endproc
 700              	.LFE240:
 702              		.section	.text.updateBoard,"ax",%progbits
 703              		.align	1
 704              		.global	updateBoard
 705              		.syntax unified
 706              		.thumb
 707              		.thumb_func
 709              	updateBoard:
 710              	.LFB241:
 210:Core/Src/main.c **** // Update LED states
 711              		.loc 1 210 23 is_stmt 1 view -0
 712              		.cfi_startproc
 713              		@ args = 0, pretend = 0, frame = 0
 714              		@ frame_needed = 0, uses_anonymous_args = 0
 715 0000 38B5     		push	{r3, r4, r5, lr}
 716              		.cfi_def_cfa_offset 16
 717              		.cfi_offset 3, -16
 718              		.cfi_offset 4, -12
 719              		.cfi_offset 5, -8
 720              		.cfi_offset 14, -4
 212:Core/Src/main.c **** 	HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, LED_states[1]);
 721              		.loc 1 212 2 view .LVU193
 212:Core/Src/main.c **** 	HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, LED_states[1]);
 722              		.loc 1 212 58 is_stmt 0 view .LVU194
 723 0002 534D     		ldr	r5, .L23
 724 0004 2A78     		ldrb	r2, [r5]	@ zero_extendqisi2
ARM GAS  C:\Temp\cc4ZtMPR.s 			page 36


 212:Core/Src/main.c **** 	HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, LED_states[1]);
 725              		.loc 1 212 2 view .LVU195
 726 0006 534C     		ldr	r4, .L23+4
 727 0008 0121     		movs	r1, #1
 728 000a 2046     		mov	r0, r4
 729 000c FFF7FEFF 		bl	HAL_GPIO_WritePin
 730              	.LVL37:
 213:Core/Src/main.c **** 	HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, LED_states[2]);
 731              		.loc 1 213 2 is_stmt 1 view .LVU196
 213:Core/Src/main.c **** 	HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, LED_states[2]);
 732              		.loc 1 213 58 is_stmt 0 view .LVU197
 733 0010 6A78     		ldrb	r2, [r5, #1]	@ zero_extendqisi2
 213:Core/Src/main.c **** 	HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, LED_states[2]);
 734              		.loc 1 213 2 view .LVU198
 735 0012 0221     		movs	r1, #2
 736 0014 2046     		mov	r0, r4
 737 0016 FFF7FEFF 		bl	HAL_GPIO_WritePin
 738              	.LVL38:
 214:Core/Src/main.c **** 	HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, LED_states[3]);
 739              		.loc 1 214 2 is_stmt 1 view .LVU199
 214:Core/Src/main.c **** 	HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, LED_states[3]);
 740              		.loc 1 214 58 is_stmt 0 view .LVU200
 741 001a AA78     		ldrb	r2, [r5, #2]	@ zero_extendqisi2
 214:Core/Src/main.c **** 	HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, LED_states[3]);
 742              		.loc 1 214 2 view .LVU201
 743 001c 0421     		movs	r1, #4
 744 001e 2046     		mov	r0, r4
 745 0020 FFF7FEFF 		bl	HAL_GPIO_WritePin
 746              	.LVL39:
 215:Core/Src/main.c **** 	HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin, LED_states[4]);
 747              		.loc 1 215 2 is_stmt 1 view .LVU202
 215:Core/Src/main.c **** 	HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin, LED_states[4]);
 748              		.loc 1 215 58 is_stmt 0 view .LVU203
 749 0024 EA78     		ldrb	r2, [r5, #3]	@ zero_extendqisi2
 215:Core/Src/main.c **** 	HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin, LED_states[4]);
 750              		.loc 1 215 2 view .LVU204
 751 0026 0821     		movs	r1, #8
 752 0028 2046     		mov	r0, r4
 753 002a FFF7FEFF 		bl	HAL_GPIO_WritePin
 754              	.LVL40:
 216:Core/Src/main.c **** 	HAL_GPIO_WritePin(LED_5_GPIO_Port, LED_5_Pin, LED_states[5]);
 755              		.loc 1 216 2 is_stmt 1 view .LVU205
 216:Core/Src/main.c **** 	HAL_GPIO_WritePin(LED_5_GPIO_Port, LED_5_Pin, LED_states[5]);
 756              		.loc 1 216 58 is_stmt 0 view .LVU206
 757 002e 2A79     		ldrb	r2, [r5, #4]	@ zero_extendqisi2
 216:Core/Src/main.c **** 	HAL_GPIO_WritePin(LED_5_GPIO_Port, LED_5_Pin, LED_states[5]);
 758              		.loc 1 216 2 view .LVU207
 759 0030 1021     		movs	r1, #16
 760 0032 2046     		mov	r0, r4
 761 0034 FFF7FEFF 		bl	HAL_GPIO_WritePin
 762              	.LVL41:
 217:Core/Src/main.c **** 	HAL_GPIO_WritePin(LED_6_GPIO_Port, LED_6_Pin, LED_states[6]);
 763              		.loc 1 217 2 is_stmt 1 view .LVU208
 217:Core/Src/main.c **** 	HAL_GPIO_WritePin(LED_6_GPIO_Port, LED_6_Pin, LED_states[6]);
 764              		.loc 1 217 58 is_stmt 0 view .LVU209
 765 0038 6A79     		ldrb	r2, [r5, #5]	@ zero_extendqisi2
 217:Core/Src/main.c **** 	HAL_GPIO_WritePin(LED_6_GPIO_Port, LED_6_Pin, LED_states[6]);
ARM GAS  C:\Temp\cc4ZtMPR.s 			page 37


 766              		.loc 1 217 2 view .LVU210
 767 003a 2021     		movs	r1, #32
 768 003c 2046     		mov	r0, r4
 769 003e FFF7FEFF 		bl	HAL_GPIO_WritePin
 770              	.LVL42:
 218:Core/Src/main.c **** 	HAL_GPIO_WritePin(LED_7_GPIO_Port, LED_7_Pin, LED_states[7]);
 771              		.loc 1 218 2 is_stmt 1 view .LVU211
 218:Core/Src/main.c **** 	HAL_GPIO_WritePin(LED_7_GPIO_Port, LED_7_Pin, LED_states[7]);
 772              		.loc 1 218 58 is_stmt 0 view .LVU212
 773 0042 AA79     		ldrb	r2, [r5, #6]	@ zero_extendqisi2
 218:Core/Src/main.c **** 	HAL_GPIO_WritePin(LED_7_GPIO_Port, LED_7_Pin, LED_states[7]);
 774              		.loc 1 218 2 view .LVU213
 775 0044 4021     		movs	r1, #64
 776 0046 2046     		mov	r0, r4
 777 0048 FFF7FEFF 		bl	HAL_GPIO_WritePin
 778              	.LVL43:
 219:Core/Src/main.c **** 
 779              		.loc 1 219 2 is_stmt 1 view .LVU214
 219:Core/Src/main.c **** 
 780              		.loc 1 219 58 is_stmt 0 view .LVU215
 781 004c EA79     		ldrb	r2, [r5, #7]	@ zero_extendqisi2
 219:Core/Src/main.c **** 
 782              		.loc 1 219 2 view .LVU216
 783 004e 8021     		movs	r1, #128
 784 0050 2046     		mov	r0, r4
 785 0052 FFF7FEFF 		bl	HAL_GPIO_WritePin
 786              	.LVL44:
 222:Core/Src/main.c ****   setRelay(RELAY_2,Relay_states[1]);
 787              		.loc 1 222 3 is_stmt 1 view .LVU217
 222:Core/Src/main.c ****   setRelay(RELAY_2,Relay_states[1]);
 788              		.loc 1 222 32 is_stmt 0 view .LVU218
 789 0056 404C     		ldr	r4, .L23+8
 790 0058 2178     		ldrb	r1, [r4]	@ zero_extendqisi2
 222:Core/Src/main.c ****   setRelay(RELAY_2,Relay_states[1]);
 791              		.loc 1 222 3 view .LVU219
 792 005a 0120     		movs	r0, #1
 793 005c FFF7FEFF 		bl	setRelay
 794              	.LVL45:
 223:Core/Src/main.c **** 
 795              		.loc 1 223 3 is_stmt 1 view .LVU220
 223:Core/Src/main.c **** 
 796              		.loc 1 223 32 is_stmt 0 view .LVU221
 797 0060 6178     		ldrb	r1, [r4, #1]	@ zero_extendqisi2
 223:Core/Src/main.c **** 
 798              		.loc 1 223 3 view .LVU222
 799 0062 0220     		movs	r0, #2
 800 0064 FFF7FEFF 		bl	setRelay
 801              	.LVL46:
 226:Core/Src/main.c ****   set_RGB(NeoPixel_states[i][0],NeoPixel_states[i][1],NeoPixel_states[i][2],i);
 802              		.loc 1 226 3 is_stmt 1 view .LVU223
 803              	.LBB14:
 226:Core/Src/main.c ****   set_RGB(NeoPixel_states[i][0],NeoPixel_states[i][1],NeoPixel_states[i][2],i);
 804              		.loc 1 226 8 view .LVU224
 226:Core/Src/main.c ****   set_RGB(NeoPixel_states[i][0],NeoPixel_states[i][1],NeoPixel_states[i][2],i);
 805              		.loc 1 226 12 is_stmt 0 view .LVU225
 806 0068 0024     		movs	r4, #0
 226:Core/Src/main.c ****   set_RGB(NeoPixel_states[i][0],NeoPixel_states[i][1],NeoPixel_states[i][2],i);
ARM GAS  C:\Temp\cc4ZtMPR.s 			page 38


 807              		.loc 1 226 3 view .LVU226
 808 006a 0AE0     		b	.L16
 809              	.LVL47:
 810              	.L17:
 227:Core/Src/main.c ****   }
 811              		.loc 1 227 3 is_stmt 1 discriminator 3 view .LVU227
 227:Core/Src/main.c ****   }
 812              		.loc 1 227 29 is_stmt 0 discriminator 3 view .LVU228
 813 006c 3B49     		ldr	r1, .L23+12
 814 006e 04EB4402 		add	r2, r4, r4, lsl #1
 815 0072 8B18     		adds	r3, r1, r2
 816 0074 885C     		ldrb	r0, [r1, r2]	@ zero_extendqisi2
 227:Core/Src/main.c ****   }
 817              		.loc 1 227 51 discriminator 3 view .LVU229
 818 0076 5978     		ldrb	r1, [r3, #1]	@ zero_extendqisi2
 227:Core/Src/main.c ****   }
 819              		.loc 1 227 73 discriminator 3 view .LVU230
 820 0078 9A78     		ldrb	r2, [r3, #2]	@ zero_extendqisi2
 227:Core/Src/main.c ****   }
 821              		.loc 1 227 3 discriminator 3 view .LVU231
 822 007a E3B2     		uxtb	r3, r4
 823 007c FFF7FEFF 		bl	set_RGB
 824              	.LVL48:
 226:Core/Src/main.c ****   set_RGB(NeoPixel_states[i][0],NeoPixel_states[i][1],NeoPixel_states[i][2],i);
 825              		.loc 1 226 27 is_stmt 1 discriminator 3 view .LVU232
 826 0080 0134     		adds	r4, r4, #1
 827              	.LVL49:
 828              	.L16:
 226:Core/Src/main.c ****   set_RGB(NeoPixel_states[i][0],NeoPixel_states[i][1],NeoPixel_states[i][2],i);
 829              		.loc 1 226 21 discriminator 1 view .LVU233
 830 0082 032C     		cmp	r4, #3
 831 0084 F2DD     		ble	.L17
 832              	.LBE14:
 231:Core/Src/main.c ****                       | (SEG_number_state[1] << 8*1)
 833              		.loc 1 231 3 view .LVU234
 231:Core/Src/main.c ****                       | (SEG_number_state[1] << 8*1)
 834              		.loc 1 231 38 is_stmt 0 view .LVU235
 835 0086 364A     		ldr	r2, .L23+16
 836 0088 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
 232:Core/Src/main.c ****                       | (SEG_number_state[2] << 8*2)
 837              		.loc 1 232 42 view .LVU236
 838 008a 5178     		ldrb	r1, [r2, #1]	@ zero_extendqisi2
 232:Core/Src/main.c ****                       | (SEG_number_state[2] << 8*2)
 839              		.loc 1 232 23 view .LVU237
 840 008c 43EA0123 		orr	r3, r3, r1, lsl #8
 233:Core/Src/main.c ****                       | (SEG_number_state[3] << 8*3);
 841              		.loc 1 233 42 view .LVU238
 842 0090 9178     		ldrb	r1, [r2, #2]	@ zero_extendqisi2
 233:Core/Src/main.c ****                       | (SEG_number_state[3] << 8*3);
 843              		.loc 1 233 23 view .LVU239
 844 0092 43EA0143 		orr	r3, r3, r1, lsl #16
 234:Core/Src/main.c ****   actualSegNumber = actualSegNumber/1000.0f;
 845              		.loc 1 234 42 view .LVU240
 846 0096 D278     		ldrb	r2, [r2, #3]	@ zero_extendqisi2
 234:Core/Src/main.c ****   actualSegNumber = actualSegNumber/1000.0f;
 847              		.loc 1 234 23 view .LVU241
 848 0098 43EA0263 		orr	r3, r3, r2, lsl #24
ARM GAS  C:\Temp\cc4ZtMPR.s 			page 39


 231:Core/Src/main.c ****                       | (SEG_number_state[1] << 8*1)
 849              		.loc 1 231 19 view .LVU242
 850 009c 07EE903A 		vmov	s15, r3	@ int
 851 00a0 F8EEE77A 		vcvt.f32.s32	s15, s15
 852 00a4 2F4B     		ldr	r3, .L23+20
 853 00a6 C3ED007A 		vstr.32	s15, [r3]
 235:Core/Src/main.c ****   setFloatNumber(actualSegNumber);
 854              		.loc 1 235 3 is_stmt 1 view .LVU243
 235:Core/Src/main.c ****   setFloatNumber(actualSegNumber);
 855              		.loc 1 235 36 is_stmt 0 view .LVU244
 856 00aa 9FED2F7A 		vldr.32	s14, .L23+24
 857 00ae 87EE870A 		vdiv.f32	s0, s15, s14
 235:Core/Src/main.c ****   setFloatNumber(actualSegNumber);
 858              		.loc 1 235 19 view .LVU245
 859 00b2 83ED000A 		vstr.32	s0, [r3]
 236:Core/Src/main.c **** 
 860              		.loc 1 236 3 is_stmt 1 view .LVU246
 861 00b6 FFF7FEFF 		bl	setFloatNumber
 862              	.LVL50:
 239:Core/Src/main.c ****     actualServoState[i][0] = (Servo_state[i][0][0] << 8*0) | (Servo_state[i][0][1] << 8*1);
 863              		.loc 1 239 3 view .LVU247
 864              	.LBB15:
 239:Core/Src/main.c ****     actualServoState[i][0] = (Servo_state[i][0][0] << 8*0) | (Servo_state[i][0][1] << 8*1);
 865              		.loc 1 239 8 view .LVU248
 239:Core/Src/main.c ****     actualServoState[i][0] = (Servo_state[i][0][0] << 8*0) | (Servo_state[i][0][1] << 8*1);
 866              		.loc 1 239 12 is_stmt 0 view .LVU249
 867 00ba 0024     		movs	r4, #0
 868              	.LVL51:
 239:Core/Src/main.c ****     actualServoState[i][0] = (Servo_state[i][0][0] << 8*0) | (Servo_state[i][0][1] << 8*1);
 869              		.loc 1 239 3 view .LVU250
 870 00bc 00E0     		b	.L18
 871              	.LVL52:
 872              	.L19:
 239:Core/Src/main.c ****     actualServoState[i][0] = (Servo_state[i][0][0] << 8*0) | (Servo_state[i][0][1] << 8*1);
 873              		.loc 1 239 29 is_stmt 1 discriminator 2 view .LVU251
 874 00be 0134     		adds	r4, r4, #1
 875              	.LVL53:
 876              	.L18:
 239:Core/Src/main.c ****     actualServoState[i][0] = (Servo_state[i][0][0] << 8*0) | (Servo_state[i][0][1] << 8*1);
 877              		.loc 1 239 22 discriminator 1 view .LVU252
 878 00c0 032C     		cmp	r4, #3
 879 00c2 2DDC     		bgt	.L22
 240:Core/Src/main.c ****     actualServoState[i][1] = (Servo_state[i][1][0] << 8*0) | (Servo_state[i][1][1] << 8*1);
 880              		.loc 1 240 5 view .LVU253
 240:Core/Src/main.c ****     actualServoState[i][1] = (Servo_state[i][1][0] << 8*0) | (Servo_state[i][1][1] << 8*1);
 881              		.loc 1 240 48 is_stmt 0 view .LVU254
 882 00c4 294A     		ldr	r2, .L23+28
 883 00c6 04EB4401 		add	r1, r4, r4, lsl #1
 884 00ca 4B00     		lsls	r3, r1, #1
 885 00cc D118     		adds	r1, r2, r3
 886 00ce D25C     		ldrb	r2, [r2, r3]	@ zero_extendqisi2
 240:Core/Src/main.c ****     actualServoState[i][1] = (Servo_state[i][1][0] << 8*0) | (Servo_state[i][1][1] << 8*1);
 887              		.loc 1 240 80 view .LVU255
 888 00d0 4B78     		ldrb	r3, [r1, #1]	@ zero_extendqisi2
 240:Core/Src/main.c ****     actualServoState[i][1] = (Servo_state[i][1][0] << 8*0) | (Servo_state[i][1][1] << 8*1);
 889              		.loc 1 240 60 view .LVU256
 890 00d2 42EA0322 		orr	r2, r2, r3, lsl #8
ARM GAS  C:\Temp\cc4ZtMPR.s 			page 40


 240:Core/Src/main.c ****     actualServoState[i][1] = (Servo_state[i][1][0] << 8*0) | (Servo_state[i][1][1] << 8*1);
 891              		.loc 1 240 28 view .LVU257
 892 00d6 2648     		ldr	r0, .L23+32
 893 00d8 04EB440C 		add	ip, r4, r4, lsl #1
 894 00dc 4FEA4C03 		lsl	r3, ip, #1
 895 00e0 00EB030C 		add	ip, r0, r3
 896 00e4 C252     		strh	r2, [r0, r3]	@ movhi
 241:Core/Src/main.c ****     actualServoState[i][2] = (Servo_state[i][2][0] << 8*0) | (Servo_state[i][2][1] << 8*1);
 897              		.loc 1 241 5 is_stmt 1 view .LVU258
 241:Core/Src/main.c ****     actualServoState[i][2] = (Servo_state[i][2][0] << 8*0) | (Servo_state[i][2][1] << 8*1);
 898              		.loc 1 241 48 is_stmt 0 view .LVU259
 899 00e6 8B78     		ldrb	r3, [r1, #2]	@ zero_extendqisi2
 241:Core/Src/main.c ****     actualServoState[i][2] = (Servo_state[i][2][0] << 8*0) | (Servo_state[i][2][1] << 8*1);
 900              		.loc 1 241 80 view .LVU260
 901 00e8 C878     		ldrb	r0, [r1, #3]	@ zero_extendqisi2
 241:Core/Src/main.c ****     actualServoState[i][2] = (Servo_state[i][2][0] << 8*0) | (Servo_state[i][2][1] << 8*1);
 902              		.loc 1 241 60 view .LVU261
 903 00ea 43EA0023 		orr	r3, r3, r0, lsl #8
 241:Core/Src/main.c ****     actualServoState[i][2] = (Servo_state[i][2][0] << 8*0) | (Servo_state[i][2][1] << 8*1);
 904              		.loc 1 241 28 view .LVU262
 905 00ee ACF80230 		strh	r3, [ip, #2]	@ movhi
 242:Core/Src/main.c **** 
 906              		.loc 1 242 5 is_stmt 1 view .LVU263
 242:Core/Src/main.c **** 
 907              		.loc 1 242 48 is_stmt 0 view .LVU264
 908 00f2 0879     		ldrb	r0, [r1, #4]	@ zero_extendqisi2
 242:Core/Src/main.c **** 
 909              		.loc 1 242 80 view .LVU265
 910 00f4 4979     		ldrb	r1, [r1, #5]	@ zero_extendqisi2
 242:Core/Src/main.c **** 
 911              		.loc 1 242 60 view .LVU266
 912 00f6 40EA0121 		orr	r1, r0, r1, lsl #8
 242:Core/Src/main.c **** 
 913              		.loc 1 242 28 view .LVU267
 914 00fa ACF80410 		strh	r1, [ip, #4]	@ movhi
 244:Core/Src/main.c ****       init_ServoMotor(i+1,SERVO_FREQUENCY_50,actualServoState[i][0],actualServoState[i][1]);
 915              		.loc 1 244 5 is_stmt 1 view .LVU268
 244:Core/Src/main.c ****       init_ServoMotor(i+1,SERVO_FREQUENCY_50,actualServoState[i][0],actualServoState[i][1]);
 916              		.loc 1 244 8 is_stmt 0 view .LVU269
 917 00fe 002A     		cmp	r2, #0
 918 0100 DDD0     		beq	.L19
 245:Core/Src/main.c ****       setServoAngle(i+1,actualServoState[i][2]);
 919              		.loc 1 245 7 is_stmt 1 view .LVU270
 920 0102 651C     		adds	r5, r4, #1
 921 0104 3221     		movs	r1, #50
 922 0106 2846     		mov	r0, r5
 923 0108 FFF7FEFF 		bl	init_ServoMotor
 924              	.LVL54:
 246:Core/Src/main.c ****     }
 925              		.loc 1 246 7 view .LVU271
 246:Core/Src/main.c ****     }
 926              		.loc 1 246 44 is_stmt 0 view .LVU272
 927 010c 04EB4403 		add	r3, r4, r4, lsl #1
 928 0110 5A00     		lsls	r2, r3, #1
 929 0112 174B     		ldr	r3, .L23+32
 930 0114 1344     		add	r3, r3, r2
 246:Core/Src/main.c ****     }
ARM GAS  C:\Temp\cc4ZtMPR.s 			page 41


 931              		.loc 1 246 7 view .LVU273
 932 0116 9988     		ldrh	r1, [r3, #4]
 933 0118 2846     		mov	r0, r5
 934 011a FFF7FEFF 		bl	setServoAngle
 935              	.LVL55:
 936 011e CEE7     		b	.L19
 937              	.L22:
 938              	.LBE15:
 251:Core/Src/main.c ****                          | (StepperRevolution_state[1] << 8*0));
 939              		.loc 1 251 3 is_stmt 1 view .LVU274
 251:Core/Src/main.c ****                          | (StepperRevolution_state[1] << 8*0));
 940              		.loc 1 251 54 is_stmt 0 view .LVU275
 941 0120 144B     		ldr	r3, .L23+36
 942 0122 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 252:Core/Src/main.c **** 
 943              		.loc 1 252 52 view .LVU276
 944 0124 5978     		ldrb	r1, [r3, #1]	@ zero_extendqisi2
 252:Core/Src/main.c **** 
 945              		.loc 1 252 26 view .LVU277
 946 0126 41EA0221 		orr	r1, r1, r2, lsl #8
 251:Core/Src/main.c ****                          | (StepperRevolution_state[1] << 8*0));
 947              		.loc 1 251 27 view .LVU278
 948 012a 134B     		ldr	r3, .L23+40
 949 012c 1980     		strh	r1, [r3]	@ movhi
 254:Core/Src/main.c ****                          | (StepperSpeed_state[1] << 8*0));
 950              		.loc 1 254 3 is_stmt 1 view .LVU279
 254:Core/Src/main.c ****                          | (StepperSpeed_state[1] << 8*0));
 951              		.loc 1 254 45 is_stmt 0 view .LVU280
 952 012e 134B     		ldr	r3, .L23+44
 953 0130 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 255:Core/Src/main.c **** 
 954              		.loc 1 255 47 view .LVU281
 955 0132 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 255:Core/Src/main.c **** 
 956              		.loc 1 255 26 view .LVU282
 957 0134 43EA0223 		orr	r3, r3, r2, lsl #8
 254:Core/Src/main.c ****                          | (StepperSpeed_state[1] << 8*0));
 958              		.loc 1 254 23 view .LVU283
 959 0138 114C     		ldr	r4, .L23+48
 960              	.LVL56:
 254:Core/Src/main.c ****                          | (StepperSpeed_state[1] << 8*0));
 961              		.loc 1 254 23 view .LVU284
 962 013a 2380     		strh	r3, [r4]	@ movhi
 257:Core/Src/main.c ****   setStepperSpeed(actualStepperNumber);
 963              		.loc 1 257 3 is_stmt 1 view .LVU285
 964 013c 114B     		ldr	r3, .L23+52
 965 013e 1878     		ldrb	r0, [r3]	@ zero_extendqisi2
 966 0140 0122     		movs	r2, #1
 967 0142 FFF7FEFF 		bl	init_StepperMotor
 968              	.LVL57:
 258:Core/Src/main.c **** 
 969              		.loc 1 258 3 view .LVU286
 970 0146 B4F90000 		ldrsh	r0, [r4]
 971 014a FFF7FEFF 		bl	setStepperSpeed
 972              	.LVL58:
 261:Core/Src/main.c **** 
 973              		.loc 1 261 1 is_stmt 0 view .LVU287
ARM GAS  C:\Temp\cc4ZtMPR.s 			page 42


 974 014e 38BD     		pop	{r3, r4, r5, pc}
 975              	.L24:
 976              		.align	2
 977              	.L23:
 978 0150 00000000 		.word	LED_states
 979 0154 00040240 		.word	1073873920
 980 0158 00000000 		.word	Relay_states
 981 015c 00000000 		.word	NeoPixel_states
 982 0160 00000000 		.word	SEG_number_state
 983 0164 00000000 		.word	actualSegNumber
 984 0168 00007A44 		.word	1148846080
 985 016c 00000000 		.word	Servo_state
 986 0170 00000000 		.word	actualServoState
 987 0174 00000000 		.word	StepperRevolution_state
 988 0178 00000000 		.word	actualStepperRevolution
 989 017c 00000000 		.word	StepperSpeed_state
 990 0180 00000000 		.word	actualStepperNumber
 991 0184 00000000 		.word	StepperMode_state
 992              		.cfi_endproc
 993              	.LFE241:
 995              		.section	.text.receivedFromSimulink,"ax",%progbits
 996              		.align	1
 997              		.global	receivedFromSimulink
 998              		.syntax unified
 999              		.thumb
 1000              		.thumb_func
 1002              	receivedFromSimulink:
 1003              	.LFB242:
 268:Core/Src/main.c ****   // check for recognised header byte
 1004              		.loc 1 268 28 is_stmt 1 view -0
 1005              		.cfi_startproc
 1006              		@ args = 0, pretend = 0, frame = 0
 1007              		@ frame_needed = 0, uses_anonymous_args = 0
 271:Core/Src/main.c **** 
 1008              		.loc 1 271 3 view .LVU289
 271:Core/Src/main.c **** 
 1009              		.loc 1 271 16 is_stmt 0 view .LVU290
 1010 0000 4E4B     		ldr	r3, .L49
 1011 0002 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 271:Core/Src/main.c **** 
 1012              		.loc 1 271 6 view .LVU291
 1013 0004 922B     		cmp	r3, #146
 1014 0006 00D0     		beq	.L46
 1015              	.L43:
 1016 0008 7047     		bx	lr
 1017              	.L46:
 271:Core/Src/main.c **** 
 1018              		.loc 1 271 43 discriminator 1 view .LVU292
 1019 000a 4C4B     		ldr	r3, .L49
 1020 000c 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 271:Core/Src/main.c **** 
 1021              		.loc 1 271 31 discriminator 1 view .LVU293
 1022 000e 492B     		cmp	r3, #73
 1023 0010 FAD1     		bne	.L43
 268:Core/Src/main.c ****   // check for recognised header byte
 1024              		.loc 1 268 28 view .LVU294
 1025 0012 10B5     		push	{r4, lr}
ARM GAS  C:\Temp\cc4ZtMPR.s 			page 43


 1026              		.cfi_def_cfa_offset 8
 1027              		.cfi_offset 4, -8
 1028              		.cfi_offset 14, -4
 1029              	.LBB16:
 273:Core/Src/main.c ****         UART4_rxBuffer[i] = bigBuffer[i+2];
 1030              		.loc 1 273 16 view .LVU295
 1031 0014 0023     		movs	r3, #0
 1032 0016 05E0     		b	.L27
 1033              	.LVL59:
 1034              	.L28:
 274:Core/Src/main.c ****       }
 1035              		.loc 1 274 9 is_stmt 1 discriminator 3 view .LVU296
 274:Core/Src/main.c ****       }
 1036              		.loc 1 274 40 is_stmt 0 discriminator 3 view .LVU297
 1037 0018 9A1C     		adds	r2, r3, #2
 274:Core/Src/main.c ****       }
 1038              		.loc 1 274 38 discriminator 3 view .LVU298
 1039 001a 4849     		ldr	r1, .L49
 1040 001c 895C     		ldrb	r1, [r1, r2]	@ zero_extendqisi2
 274:Core/Src/main.c ****       }
 1041              		.loc 1 274 27 discriminator 3 view .LVU299
 1042 001e 484A     		ldr	r2, .L49+4
 1043 0020 D154     		strb	r1, [r2, r3]
 273:Core/Src/main.c ****         UART4_rxBuffer[i] = bigBuffer[i+2];
 1044              		.loc 1 273 54 is_stmt 1 discriminator 3 view .LVU300
 1045 0022 0133     		adds	r3, r3, #1
 1046              	.LVL60:
 1047              	.L27:
 273:Core/Src/main.c ****         UART4_rxBuffer[i] = bigBuffer[i+2];
 1048              		.loc 1 273 26 discriminator 1 view .LVU301
 1049 0024 2E2B     		cmp	r3, #46
 1050 0026 F7D9     		bls	.L28
 1051              	.LBE16:
 1052              	.LBB17:
 277:Core/Src/main.c ****         LED_states[i] = (UART4_rxBuffer[0 ] >> i) & 1;
 1053              		.loc 1 277 16 is_stmt 0 view .LVU302
 1054 0028 0722     		movs	r2, #7
 1055 002a 07E0     		b	.L29
 1056              	.LVL61:
 1057              	.L30:
 278:Core/Src/main.c ****       }
 1058              		.loc 1 278 9 is_stmt 1 discriminator 3 view .LVU303
 278:Core/Src/main.c ****       }
 1059              		.loc 1 278 40 is_stmt 0 discriminator 3 view .LVU304
 1060 002c 444B     		ldr	r3, .L49+4
 1061 002e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 278:Core/Src/main.c ****       }
 1062              		.loc 1 278 45 discriminator 3 view .LVU305
 1063 0030 1341     		asrs	r3, r3, r2
 278:Core/Src/main.c ****       }
 1064              		.loc 1 278 51 discriminator 3 view .LVU306
 1065 0032 03F00103 		and	r3, r3, #1
 278:Core/Src/main.c ****       }
 1066              		.loc 1 278 23 discriminator 3 view .LVU307
 1067 0036 4349     		ldr	r1, .L49+8
 1068 0038 8B54     		strb	r3, [r1, r2]
 277:Core/Src/main.c ****         LED_states[i] = (UART4_rxBuffer[0 ] >> i) & 1;
ARM GAS  C:\Temp\cc4ZtMPR.s 			page 44


 1069              		.loc 1 277 32 is_stmt 1 discriminator 3 view .LVU308
 1070 003a 013A     		subs	r2, r2, #1
 1071              	.LVL62:
 1072              	.L29:
 277:Core/Src/main.c ****         LED_states[i] = (UART4_rxBuffer[0 ] >> i) & 1;
 1073              		.loc 1 277 25 discriminator 1 view .LVU309
 1074 003c 002A     		cmp	r2, #0
 1075 003e F5DA     		bge	.L30
 1076              	.LBE17:
 1077              	.LBB18:
 282:Core/Src/main.c ****         Relay_states[i] = (UART4_rxBuffer[1 ] >> i) & 1;
 1078              		.loc 1 282 16 is_stmt 0 view .LVU310
 1079 0040 0722     		movs	r2, #7
 1080              	.LVL63:
 282:Core/Src/main.c ****         Relay_states[i] = (UART4_rxBuffer[1 ] >> i) & 1;
 1081              		.loc 1 282 16 view .LVU311
 1082 0042 07E0     		b	.L31
 1083              	.LVL64:
 1084              	.L32:
 283:Core/Src/main.c ****       }
 1085              		.loc 1 283 9 is_stmt 1 discriminator 3 view .LVU312
 283:Core/Src/main.c ****       }
 1086              		.loc 1 283 42 is_stmt 0 discriminator 3 view .LVU313
 1087 0044 3E4B     		ldr	r3, .L49+4
 1088 0046 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 283:Core/Src/main.c ****       }
 1089              		.loc 1 283 47 discriminator 3 view .LVU314
 1090 0048 1341     		asrs	r3, r3, r2
 283:Core/Src/main.c ****       }
 1091              		.loc 1 283 53 discriminator 3 view .LVU315
 1092 004a 03F00103 		and	r3, r3, #1
 283:Core/Src/main.c ****       }
 1093              		.loc 1 283 25 discriminator 3 view .LVU316
 1094 004e 3E49     		ldr	r1, .L49+12
 1095 0050 8B54     		strb	r3, [r1, r2]
 282:Core/Src/main.c ****         Relay_states[i] = (UART4_rxBuffer[1 ] >> i) & 1;
 1096              		.loc 1 282 32 is_stmt 1 discriminator 3 view .LVU317
 1097 0052 013A     		subs	r2, r2, #1
 1098              	.LVL65:
 1099              	.L31:
 282:Core/Src/main.c ****         Relay_states[i] = (UART4_rxBuffer[1 ] >> i) & 1;
 1100              		.loc 1 282 25 discriminator 1 view .LVU318
 1101 0054 002A     		cmp	r2, #0
 1102 0056 F5DA     		bge	.L32
 1103              	.LBE18:
 287:Core/Src/main.c ****       NeoPixel_states[0][1] = UART4_rxBuffer[3  ];
 1104              		.loc 1 287 7 view .LVU319
 287:Core/Src/main.c ****       NeoPixel_states[0][1] = UART4_rxBuffer[3  ];
 1105              		.loc 1 287 45 is_stmt 0 view .LVU320
 1106 0058 394A     		ldr	r2, .L49+4
 1107              	.LVL66:
 287:Core/Src/main.c ****       NeoPixel_states[0][1] = UART4_rxBuffer[3  ];
 1108              		.loc 1 287 45 view .LVU321
 1109 005a 9178     		ldrb	r1, [r2, #2]	@ zero_extendqisi2
 287:Core/Src/main.c ****       NeoPixel_states[0][1] = UART4_rxBuffer[3  ];
 1110              		.loc 1 287 29 view .LVU322
 1111 005c 3B4B     		ldr	r3, .L49+16
ARM GAS  C:\Temp\cc4ZtMPR.s 			page 45


 1112 005e 1970     		strb	r1, [r3]
 288:Core/Src/main.c ****       NeoPixel_states[0][2] = UART4_rxBuffer[4  ];
 1113              		.loc 1 288 7 is_stmt 1 view .LVU323
 288:Core/Src/main.c ****       NeoPixel_states[0][2] = UART4_rxBuffer[4  ];
 1114              		.loc 1 288 45 is_stmt 0 view .LVU324
 1115 0060 D178     		ldrb	r1, [r2, #3]	@ zero_extendqisi2
 288:Core/Src/main.c ****       NeoPixel_states[0][2] = UART4_rxBuffer[4  ];
 1116              		.loc 1 288 29 view .LVU325
 1117 0062 5970     		strb	r1, [r3, #1]
 289:Core/Src/main.c **** 
 1118              		.loc 1 289 7 is_stmt 1 view .LVU326
 289:Core/Src/main.c **** 
 1119              		.loc 1 289 45 is_stmt 0 view .LVU327
 1120 0064 1179     		ldrb	r1, [r2, #4]	@ zero_extendqisi2
 289:Core/Src/main.c **** 
 1121              		.loc 1 289 29 view .LVU328
 1122 0066 9970     		strb	r1, [r3, #2]
 291:Core/Src/main.c ****       NeoPixel_states[1][1] = UART4_rxBuffer[6  ];
 1123              		.loc 1 291 7 is_stmt 1 view .LVU329
 291:Core/Src/main.c ****       NeoPixel_states[1][1] = UART4_rxBuffer[6  ];
 1124              		.loc 1 291 45 is_stmt 0 view .LVU330
 1125 0068 5179     		ldrb	r1, [r2, #5]	@ zero_extendqisi2
 291:Core/Src/main.c ****       NeoPixel_states[1][1] = UART4_rxBuffer[6  ];
 1126              		.loc 1 291 29 view .LVU331
 1127 006a D970     		strb	r1, [r3, #3]
 292:Core/Src/main.c ****       NeoPixel_states[1][2] = UART4_rxBuffer[7  ];
 1128              		.loc 1 292 7 is_stmt 1 view .LVU332
 292:Core/Src/main.c ****       NeoPixel_states[1][2] = UART4_rxBuffer[7  ];
 1129              		.loc 1 292 45 is_stmt 0 view .LVU333
 1130 006c 9179     		ldrb	r1, [r2, #6]	@ zero_extendqisi2
 292:Core/Src/main.c ****       NeoPixel_states[1][2] = UART4_rxBuffer[7  ];
 1131              		.loc 1 292 29 view .LVU334
 1132 006e 1971     		strb	r1, [r3, #4]
 293:Core/Src/main.c **** 
 1133              		.loc 1 293 7 is_stmt 1 view .LVU335
 293:Core/Src/main.c **** 
 1134              		.loc 1 293 45 is_stmt 0 view .LVU336
 1135 0070 D179     		ldrb	r1, [r2, #7]	@ zero_extendqisi2
 293:Core/Src/main.c **** 
 1136              		.loc 1 293 29 view .LVU337
 1137 0072 5971     		strb	r1, [r3, #5]
 295:Core/Src/main.c ****       NeoPixel_states[2][1] = UART4_rxBuffer[9  ];
 1138              		.loc 1 295 7 is_stmt 1 view .LVU338
 295:Core/Src/main.c ****       NeoPixel_states[2][1] = UART4_rxBuffer[9  ];
 1139              		.loc 1 295 45 is_stmt 0 view .LVU339
 1140 0074 117A     		ldrb	r1, [r2, #8]	@ zero_extendqisi2
 295:Core/Src/main.c ****       NeoPixel_states[2][1] = UART4_rxBuffer[9  ];
 1141              		.loc 1 295 29 view .LVU340
 1142 0076 9971     		strb	r1, [r3, #6]
 296:Core/Src/main.c ****       NeoPixel_states[2][2] = UART4_rxBuffer[10 ];
 1143              		.loc 1 296 7 is_stmt 1 view .LVU341
 296:Core/Src/main.c ****       NeoPixel_states[2][2] = UART4_rxBuffer[10 ];
 1144              		.loc 1 296 45 is_stmt 0 view .LVU342
 1145 0078 517A     		ldrb	r1, [r2, #9]	@ zero_extendqisi2
 296:Core/Src/main.c ****       NeoPixel_states[2][2] = UART4_rxBuffer[10 ];
 1146              		.loc 1 296 29 view .LVU343
 1147 007a D971     		strb	r1, [r3, #7]
ARM GAS  C:\Temp\cc4ZtMPR.s 			page 46


 297:Core/Src/main.c **** 
 1148              		.loc 1 297 7 is_stmt 1 view .LVU344
 297:Core/Src/main.c **** 
 1149              		.loc 1 297 45 is_stmt 0 view .LVU345
 1150 007c 917A     		ldrb	r1, [r2, #10]	@ zero_extendqisi2
 297:Core/Src/main.c **** 
 1151              		.loc 1 297 29 view .LVU346
 1152 007e 1972     		strb	r1, [r3, #8]
 299:Core/Src/main.c ****       NeoPixel_states[3][1] = UART4_rxBuffer[12 ];
 1153              		.loc 1 299 7 is_stmt 1 view .LVU347
 299:Core/Src/main.c ****       NeoPixel_states[3][1] = UART4_rxBuffer[12 ];
 1154              		.loc 1 299 45 is_stmt 0 view .LVU348
 1155 0080 D17A     		ldrb	r1, [r2, #11]	@ zero_extendqisi2
 299:Core/Src/main.c ****       NeoPixel_states[3][1] = UART4_rxBuffer[12 ];
 1156              		.loc 1 299 29 view .LVU349
 1157 0082 5972     		strb	r1, [r3, #9]
 300:Core/Src/main.c ****       NeoPixel_states[3][2] = UART4_rxBuffer[13 ];
 1158              		.loc 1 300 7 is_stmt 1 view .LVU350
 300:Core/Src/main.c ****       NeoPixel_states[3][2] = UART4_rxBuffer[13 ];
 1159              		.loc 1 300 45 is_stmt 0 view .LVU351
 1160 0084 117B     		ldrb	r1, [r2, #12]	@ zero_extendqisi2
 300:Core/Src/main.c ****       NeoPixel_states[3][2] = UART4_rxBuffer[13 ];
 1161              		.loc 1 300 29 view .LVU352
 1162 0086 9972     		strb	r1, [r3, #10]
 301:Core/Src/main.c ****   
 1163              		.loc 1 301 7 is_stmt 1 view .LVU353
 301:Core/Src/main.c ****   
 1164              		.loc 1 301 45 is_stmt 0 view .LVU354
 1165 0088 527B     		ldrb	r2, [r2, #13]	@ zero_extendqisi2
 301:Core/Src/main.c ****   
 1166              		.loc 1 301 29 view .LVU355
 1167 008a DA72     		strb	r2, [r3, #11]
 305:Core/Src/main.c ****         SEG_number_state[i] = (UART4_rxBuffer[14+i ]);
 1168              		.loc 1 305 7 is_stmt 1 view .LVU356
 1169              	.LBB19:
 305:Core/Src/main.c ****         SEG_number_state[i] = (UART4_rxBuffer[14+i ]);
 1170              		.loc 1 305 12 view .LVU357
 1171              	.LVL67:
 305:Core/Src/main.c ****         SEG_number_state[i] = (UART4_rxBuffer[14+i ]);
 1172              		.loc 1 305 16 is_stmt 0 view .LVU358
 1173 008c 0023     		movs	r3, #0
 305:Core/Src/main.c ****         SEG_number_state[i] = (UART4_rxBuffer[14+i ]);
 1174              		.loc 1 305 7 view .LVU359
 1175 008e 06E0     		b	.L33
 1176              	.LVL68:
 1177              	.L34:
 306:Core/Src/main.c ****       }
 1178              		.loc 1 306 9 is_stmt 1 discriminator 3 view .LVU360
 306:Core/Src/main.c ****       }
 1179              		.loc 1 306 49 is_stmt 0 discriminator 3 view .LVU361
 1180 0090 03F10E02 		add	r2, r3, #14
 306:Core/Src/main.c ****       }
 1181              		.loc 1 306 46 discriminator 3 view .LVU362
 1182 0094 2A49     		ldr	r1, .L49+4
 1183 0096 895C     		ldrb	r1, [r1, r2]	@ zero_extendqisi2
 306:Core/Src/main.c ****       }
 1184              		.loc 1 306 29 discriminator 3 view .LVU363
ARM GAS  C:\Temp\cc4ZtMPR.s 			page 47


 1185 0098 2D4A     		ldr	r2, .L49+20
 1186 009a D154     		strb	r1, [r2, r3]
 305:Core/Src/main.c ****         SEG_number_state[i] = (UART4_rxBuffer[14+i ]);
 1187              		.loc 1 305 31 is_stmt 1 discriminator 3 view .LVU364
 1188 009c 0133     		adds	r3, r3, #1
 1189              	.LVL69:
 1190              	.L33:
 305:Core/Src/main.c ****         SEG_number_state[i] = (UART4_rxBuffer[14+i ]);
 1191              		.loc 1 305 25 discriminator 1 view .LVU365
 1192 009e 032B     		cmp	r3, #3
 1193 00a0 F6DD     		ble	.L34
 1194              	.LBE19:
 1195              	.LBB20:
 310:Core/Src/main.c ****         Servo_state[i][0][0] = (UART4_rxBuffer[18 + (i*2)    +1 ]);
 1196              		.loc 1 310 16 is_stmt 0 view .LVU366
 1197 00a2 0023     		movs	r3, #0
 1198              	.LVL70:
 310:Core/Src/main.c ****         Servo_state[i][0][0] = (UART4_rxBuffer[18 + (i*2)    +1 ]);
 1199              		.loc 1 310 16 view .LVU367
 1200 00a4 29E0     		b	.L35
 1201              	.LVL71:
 1202              	.L36:
 311:Core/Src/main.c ****         Servo_state[i][0][1] = (UART4_rxBuffer[18 + (i*2)+1  +1 ]); //max angle
 1203              		.loc 1 311 9 is_stmt 1 discriminator 3 view .LVU368
 311:Core/Src/main.c ****         Servo_state[i][0][1] = (UART4_rxBuffer[18 + (i*2)+1  +1 ]); //max angle
 1204              		.loc 1 311 51 is_stmt 0 discriminator 3 view .LVU369
 1205 00a6 03F10901 		add	r1, r3, #9
 1206 00aa 4900     		lsls	r1, r1, #1
 311:Core/Src/main.c ****         Servo_state[i][0][1] = (UART4_rxBuffer[18 + (i*2)+1  +1 ]); //max angle
 1207              		.loc 1 311 62 discriminator 3 view .LVU370
 1208 00ac 0131     		adds	r1, r1, #1
 311:Core/Src/main.c ****         Servo_state[i][0][1] = (UART4_rxBuffer[18 + (i*2)+1  +1 ]); //max angle
 1209              		.loc 1 311 47 discriminator 3 view .LVU371
 1210 00ae 244A     		ldr	r2, .L49+4
 1211 00b0 12F801E0 		ldrb	lr, [r2, r1]	@ zero_extendqisi2
 311:Core/Src/main.c ****         Servo_state[i][0][1] = (UART4_rxBuffer[18 + (i*2)+1  +1 ]); //max angle
 1212              		.loc 1 311 30 discriminator 3 view .LVU372
 1213 00b4 274C     		ldr	r4, .L49+24
 1214 00b6 4FEA430C 		lsl	ip, r3, #1
 1215 00ba 03EB4301 		add	r1, r3, r3, lsl #1
 1216 00be 4800     		lsls	r0, r1, #1
 1217 00c0 2118     		adds	r1, r4, r0
 1218 00c2 04F800E0 		strb	lr, [r4, r0]
 312:Core/Src/main.c **** 
 1219              		.loc 1 312 9 is_stmt 1 discriminator 3 view .LVU373
 312:Core/Src/main.c **** 
 1220              		.loc 1 312 62 is_stmt 0 discriminator 3 view .LVU374
 1221 00c6 03F10A0E 		add	lr, r3, #10
 1222 00ca 4FEA4E00 		lsl	r0, lr, #1
 312:Core/Src/main.c **** 
 1223              		.loc 1 312 47 discriminator 3 view .LVU375
 1224 00ce 12F81E40 		ldrb	r4, [r2, lr, lsl #1]	@ zero_extendqisi2
 312:Core/Src/main.c **** 
 1225              		.loc 1 312 30 discriminator 3 view .LVU376
 1226 00d2 4C70     		strb	r4, [r1, #1]
 314:Core/Src/main.c ****         Servo_state[i][1][1] = (UART4_rxBuffer[19 + (i*2)+1 + 8 ]); //starting time
 1227              		.loc 1 314 9 is_stmt 1 discriminator 3 view .LVU377
ARM GAS  C:\Temp\cc4ZtMPR.s 			page 48


 314:Core/Src/main.c ****         Servo_state[i][1][1] = (UART4_rxBuffer[19 + (i*2)+1 + 8 ]); //starting time
 1228              		.loc 1 314 61 is_stmt 0 discriminator 3 view .LVU378
 1229 00d4 0CF11B0C 		add	ip, ip, #27
 314:Core/Src/main.c ****         Servo_state[i][1][1] = (UART4_rxBuffer[19 + (i*2)+1 + 8 ]); //starting time
 1230              		.loc 1 314 47 discriminator 3 view .LVU379
 1231 00d8 12F80C40 		ldrb	r4, [r2, ip]	@ zero_extendqisi2
 314:Core/Src/main.c ****         Servo_state[i][1][1] = (UART4_rxBuffer[19 + (i*2)+1 + 8 ]); //starting time
 1232              		.loc 1 314 30 discriminator 3 view .LVU380
 1233 00dc 8C70     		strb	r4, [r1, #2]
 315:Core/Src/main.c **** 
 1234              		.loc 1 315 9 is_stmt 1 discriminator 3 view .LVU381
 315:Core/Src/main.c **** 
 1235              		.loc 1 315 61 is_stmt 0 discriminator 3 view .LVU382
 1236 00de 03F10E04 		add	r4, r3, #14
 315:Core/Src/main.c **** 
 1237              		.loc 1 315 47 discriminator 3 view .LVU383
 1238 00e2 12F81440 		ldrb	r4, [r2, r4, lsl #1]	@ zero_extendqisi2
 315:Core/Src/main.c **** 
 1239              		.loc 1 315 30 discriminator 3 view .LVU384
 1240 00e6 CC70     		strb	r4, [r1, #3]
 317:Core/Src/main.c ****         Servo_state[i][2][1] = (UART4_rxBuffer[20 + (i*2)+1 + 15]); //servo angle
 1241              		.loc 1 317 9 is_stmt 1 discriminator 3 view .LVU385
 317:Core/Src/main.c ****         Servo_state[i][2][1] = (UART4_rxBuffer[20 + (i*2)+1 + 15]); //servo angle
 1242              		.loc 1 317 61 is_stmt 0 discriminator 3 view .LVU386
 1243 00e8 0F30     		adds	r0, r0, #15
 317:Core/Src/main.c ****         Servo_state[i][2][1] = (UART4_rxBuffer[20 + (i*2)+1 + 15]); //servo angle
 1244              		.loc 1 317 47 discriminator 3 view .LVU387
 1245 00ea 105C     		ldrb	r0, [r2, r0]	@ zero_extendqisi2
 317:Core/Src/main.c ****         Servo_state[i][2][1] = (UART4_rxBuffer[20 + (i*2)+1 + 15]); //servo angle
 1246              		.loc 1 317 30 discriminator 3 view .LVU388
 1247 00ec 0871     		strb	r0, [r1, #4]
 318:Core/Src/main.c ****       }
 1248              		.loc 1 318 9 is_stmt 1 discriminator 3 view .LVU389
 318:Core/Src/main.c ****       }
 1249              		.loc 1 318 61 is_stmt 0 discriminator 3 view .LVU390
 1250 00ee 03F11200 		add	r0, r3, #18
 318:Core/Src/main.c ****       }
 1251              		.loc 1 318 47 discriminator 3 view .LVU391
 1252 00f2 12F81020 		ldrb	r2, [r2, r0, lsl #1]	@ zero_extendqisi2
 318:Core/Src/main.c ****       }
 1253              		.loc 1 318 30 discriminator 3 view .LVU392
 1254 00f6 4A71     		strb	r2, [r1, #5]
 310:Core/Src/main.c ****         Servo_state[i][0][0] = (UART4_rxBuffer[18 + (i*2)    +1 ]);
 1255              		.loc 1 310 31 is_stmt 1 discriminator 3 view .LVU393
 1256 00f8 0133     		adds	r3, r3, #1
 1257              	.LVL72:
 1258              	.L35:
 310:Core/Src/main.c ****         Servo_state[i][0][0] = (UART4_rxBuffer[18 + (i*2)    +1 ]);
 1259              		.loc 1 310 25 discriminator 1 view .LVU394
 1260 00fa 032B     		cmp	r3, #3
 1261 00fc D3DD     		ble	.L36
 1262              	.LBE20:
 324:Core/Src/main.c **** 
 1263              		.loc 1 324 7 view .LVU395
 324:Core/Src/main.c **** 
 1264              		.loc 1 324 41 is_stmt 0 view .LVU396
 1265 00fe 104B     		ldr	r3, .L49+4
ARM GAS  C:\Temp\cc4ZtMPR.s 			page 49


 1266              	.LVL73:
 324:Core/Src/main.c **** 
 1267              		.loc 1 324 41 view .LVU397
 1268 0100 93F82A20 		ldrb	r2, [r3, #42]	@ zero_extendqisi2
 324:Core/Src/main.c **** 
 1269              		.loc 1 324 25 view .LVU398
 1270 0104 144B     		ldr	r3, .L49+28
 1271 0106 1A70     		strb	r2, [r3]
 326:Core/Src/main.c ****         StepperRevolution_state[i] = (UART4_rxBuffer[43+i]);
 1272              		.loc 1 326 7 is_stmt 1 view .LVU399
 1273              	.LBB21:
 326:Core/Src/main.c ****         StepperRevolution_state[i] = (UART4_rxBuffer[43+i]);
 1274              		.loc 1 326 12 view .LVU400
 1275              	.LVL74:
 326:Core/Src/main.c ****         StepperRevolution_state[i] = (UART4_rxBuffer[43+i]);
 1276              		.loc 1 326 16 is_stmt 0 view .LVU401
 1277 0108 0023     		movs	r3, #0
 1278              	.LVL75:
 1279              	.L37:
 326:Core/Src/main.c ****         StepperRevolution_state[i] = (UART4_rxBuffer[43+i]);
 1280              		.loc 1 326 25 is_stmt 1 discriminator 1 view .LVU402
 1281 010a 012B     		cmp	r3, #1
 1282 010c 07DC     		bgt	.L47
 327:Core/Src/main.c ****       }
 1283              		.loc 1 327 9 discriminator 3 view .LVU403
 327:Core/Src/main.c ****       }
 1284              		.loc 1 327 56 is_stmt 0 discriminator 3 view .LVU404
 1285 010e 03F12B02 		add	r2, r3, #43
 327:Core/Src/main.c ****       }
 1286              		.loc 1 327 53 discriminator 3 view .LVU405
 1287 0112 0B49     		ldr	r1, .L49+4
 1288 0114 895C     		ldrb	r1, [r1, r2]	@ zero_extendqisi2
 327:Core/Src/main.c ****       }
 1289              		.loc 1 327 36 discriminator 3 view .LVU406
 1290 0116 114A     		ldr	r2, .L49+32
 1291 0118 D154     		strb	r1, [r2, r3]
 326:Core/Src/main.c ****         StepperRevolution_state[i] = (UART4_rxBuffer[43+i]);
 1292              		.loc 1 326 31 is_stmt 1 discriminator 3 view .LVU407
 1293 011a 0133     		adds	r3, r3, #1
 1294              	.LVL76:
 326:Core/Src/main.c ****         StepperRevolution_state[i] = (UART4_rxBuffer[43+i]);
 1295              		.loc 1 326 31 is_stmt 0 discriminator 3 view .LVU408
 1296 011c F5E7     		b	.L37
 1297              	.L47:
 326:Core/Src/main.c ****         StepperRevolution_state[i] = (UART4_rxBuffer[43+i]);
 1298              		.loc 1 326 31 discriminator 3 view .LVU409
 1299              	.LBE21:
 1300              	.LBB22:
 330:Core/Src/main.c ****         StepperSpeed_state[i] = (UART4_rxBuffer[45+i]);
 1301              		.loc 1 330 16 view .LVU410
 1302 011e 0023     		movs	r3, #0
 1303              	.LVL77:
 1304              	.L39:
 330:Core/Src/main.c ****         StepperSpeed_state[i] = (UART4_rxBuffer[45+i]);
 1305              		.loc 1 330 25 is_stmt 1 discriminator 1 view .LVU411
 1306 0120 012B     		cmp	r3, #1
 1307 0122 07DC     		bgt	.L48
ARM GAS  C:\Temp\cc4ZtMPR.s 			page 50


 331:Core/Src/main.c ****       }
 1308              		.loc 1 331 9 discriminator 3 view .LVU412
 331:Core/Src/main.c ****       }
 1309              		.loc 1 331 51 is_stmt 0 discriminator 3 view .LVU413
 1310 0124 03F12D02 		add	r2, r3, #45
 331:Core/Src/main.c ****       }
 1311              		.loc 1 331 48 discriminator 3 view .LVU414
 1312 0128 0549     		ldr	r1, .L49+4
 1313 012a 895C     		ldrb	r1, [r1, r2]	@ zero_extendqisi2
 331:Core/Src/main.c ****       }
 1314              		.loc 1 331 31 discriminator 3 view .LVU415
 1315 012c 0C4A     		ldr	r2, .L49+36
 1316 012e D154     		strb	r1, [r2, r3]
 330:Core/Src/main.c ****         StepperSpeed_state[i] = (UART4_rxBuffer[45+i]);
 1317              		.loc 1 330 31 is_stmt 1 discriminator 3 view .LVU416
 1318 0130 0133     		adds	r3, r3, #1
 1319              	.LVL78:
 330:Core/Src/main.c ****         StepperSpeed_state[i] = (UART4_rxBuffer[45+i]);
 1320              		.loc 1 330 31 is_stmt 0 discriminator 3 view .LVU417
 1321 0132 F5E7     		b	.L39
 1322              	.L48:
 330:Core/Src/main.c ****         StepperSpeed_state[i] = (UART4_rxBuffer[45+i]);
 1323              		.loc 1 330 31 discriminator 3 view .LVU418
 1324              	.LBE22:
 334:Core/Src/main.c ****   }
 1325              		.loc 1 334 7 is_stmt 1 view .LVU419
 1326 0134 FFF7FEFF 		bl	updateBoard
 1327              	.LVL79:
 337:Core/Src/main.c **** 
 1328              		.loc 1 337 1 is_stmt 0 view .LVU420
 1329 0138 10BD     		pop	{r4, pc}
 1330              	.L50:
 1331 013a 00BF     		.align	2
 1332              	.L49:
 1333 013c 00000000 		.word	bigBuffer
 1334 0140 00000000 		.word	UART4_rxBuffer
 1335 0144 00000000 		.word	LED_states
 1336 0148 00000000 		.word	Relay_states
 1337 014c 00000000 		.word	NeoPixel_states
 1338 0150 00000000 		.word	SEG_number_state
 1339 0154 00000000 		.word	Servo_state
 1340 0158 00000000 		.word	StepperMode_state
 1341 015c 00000000 		.word	StepperRevolution_state
 1342 0160 00000000 		.word	StepperSpeed_state
 1343              		.cfi_endproc
 1344              	.LFE242:
 1346              		.section	.text.Error_Handler,"ax",%progbits
 1347              		.align	1
 1348              		.global	Error_Handler
 1349              		.syntax unified
 1350              		.thumb
 1351              		.thumb_func
 1353              	Error_Handler:
 1354              	.LFB260:
1195:Core/Src/main.c **** 
1196:Core/Src/main.c **** /* USER CODE BEGIN 4 */
1197:Core/Src/main.c **** 
ARM GAS  C:\Temp\cc4ZtMPR.s 			page 51


1198:Core/Src/main.c **** /* USER CODE END 4 */
1199:Core/Src/main.c **** 
1200:Core/Src/main.c **** /**
1201:Core/Src/main.c ****   * @brief  This function is executed in case of error occurrence.
1202:Core/Src/main.c ****   * @retval None
1203:Core/Src/main.c ****   */
1204:Core/Src/main.c **** void Error_Handler(void)
1205:Core/Src/main.c **** {
 1355              		.loc 1 1205 1 is_stmt 1 view -0
 1356              		.cfi_startproc
 1357              		@ Volatile: function does not return.
 1358              		@ args = 0, pretend = 0, frame = 0
 1359              		@ frame_needed = 0, uses_anonymous_args = 0
 1360              		@ link register save eliminated.
1206:Core/Src/main.c ****   /* USER CODE BEGIN Error_Handler_Debug */
1207:Core/Src/main.c ****   /* User can add his own implementation to report the HAL error return state */
1208:Core/Src/main.c ****   __disable_irq();
 1361              		.loc 1 1208 3 view .LVU422
 1362              	.LBB23:
 1363              	.LBI23:
 1364              		.file 2 "Drivers/CMSIS/Include/cmsis_gcc.h"
   1:Drivers/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS compiler GCC header file
   4:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @version  V5.0.4
   5:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @date     09. April 2018
   6:Drivers/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/cmsis_gcc.h **** /*
   8:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Copyright (c) 2009-2018 Arm Limited. All rights reserved.
   9:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  10:Drivers/CMSIS/Include/cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
  11:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  12:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:Drivers/CMSIS/Include/cmsis_gcc.h ****  * not use this file except in compliance with the License.
  14:Drivers/CMSIS/Include/cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  16:Drivers/CMSIS/Include/cmsis_gcc.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  18:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
  19:Drivers/CMSIS/Include/cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:Drivers/CMSIS/Include/cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:Drivers/CMSIS/Include/cmsis_gcc.h ****  * See the License for the specific language governing permissions and
  22:Drivers/CMSIS/Include/cmsis_gcc.h ****  * limitations under the License.
  23:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  24:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  25:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  26:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  27:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  28:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  29:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  30:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  31:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  32:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  33:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  34:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Fallback for __has_builtin */
  35:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __has_builtin
  36:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __has_builtin(x) (0)
ARM GAS  C:\Temp\cc4ZtMPR.s 			page 52


  37:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  38:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  39:Drivers/CMSIS/Include/cmsis_gcc.h **** /* CMSIS compiler specific defines */
  40:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ASM
  41:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ASM                                  __asm
  42:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  43:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __INLINE
  44:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __INLINE                               inline
  45:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  46:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_INLINE
  47:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_INLINE                        static inline
  48:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  49:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_FORCEINLINE                 
  50:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_FORCEINLINE                   __attribute__((always_inline)) static inline
  51:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif                                           
  52:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __NO_RETURN
  53:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __NO_RETURN                            __attribute__((__noreturn__))
  54:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  55:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __USED
  56:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __USED                                 __attribute__((used))
  57:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  58:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __WEAK
  59:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __WEAK                                 __attribute__((weak))
  60:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  61:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED
  62:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED                               __attribute__((packed, aligned(1)))
  63:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  64:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_STRUCT
  65:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_STRUCT                        struct __attribute__((packed, aligned(1)))
  66:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  67:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_UNION
  68:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_UNION                         union __attribute__((packed, aligned(1)))
  69:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  70:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32        /* deprecated */
  71:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  72:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  73:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  74:Drivers/CMSIS/Include/cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
  75:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  76:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
  77:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  78:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_WRITE
  79:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  80:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  81:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  82:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
  83:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  84:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))-
  85:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  86:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_READ
  87:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  88:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  89:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  90:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
  91:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  92:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(add
  93:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
ARM GAS  C:\Temp\cc4ZtMPR.s 			page 53


  94:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_WRITE
  95:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  96:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  97:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  98:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
  99:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 100:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))-
 101:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 102:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_READ
 103:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
 104:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
 105:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
 106:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
 107:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 108:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(add
 109:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 110:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ALIGNED
 111:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ALIGNED(x)                           __attribute__((aligned(x)))
 112:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 113:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __RESTRICT
 114:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __RESTRICT                             __restrict
 115:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 116:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 117:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 118:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
 119:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 120:Drivers/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
 121:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 122:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 123:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 124:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 125:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
 126:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
 127:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 128:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 129:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_irq(void)
 130:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 131:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
 132:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 133:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 134:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 135:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 136:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
 137:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
 138:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 139:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 140:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_irq(void)
 1365              		.loc 2 140 27 view .LVU423
 1366              	.LBB24:
 141:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 142:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
 1367              		.loc 2 142 3 view .LVU424
 1368              		.syntax unified
 1369              	@ 142 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 1370 0000 72B6     		cpsid i
 1371              	@ 0 "" 2
 1372              		.thumb
ARM GAS  C:\Temp\cc4ZtMPR.s 			page 54


 1373              		.syntax unified
 1374              	.L52:
 1375              	.LBE24:
 1376              	.LBE23:
1209:Core/Src/main.c ****   while (1)
 1377              		.loc 1 1209 3 discriminator 1 view .LVU425
1210:Core/Src/main.c ****   {
1211:Core/Src/main.c ****   }
 1378              		.loc 1 1211 3 discriminator 1 view .LVU426
1209:Core/Src/main.c ****   while (1)
 1379              		.loc 1 1209 9 discriminator 1 view .LVU427
 1380 0002 FEE7     		b	.L52
 1381              		.cfi_endproc
 1382              	.LFE260:
 1384              		.section	.text.MX_TIM2_Init,"ax",%progbits
 1385              		.align	1
 1386              		.syntax unified
 1387              		.thumb
 1388              		.thumb_func
 1390              	MX_TIM2_Init:
 1391              	.LFB249:
 680:Core/Src/main.c **** 
 1392              		.loc 1 680 1 view -0
 1393              		.cfi_startproc
 1394              		@ args = 0, pretend = 0, frame = 56
 1395              		@ frame_needed = 0, uses_anonymous_args = 0
 1396 0000 00B5     		push	{lr}
 1397              		.cfi_def_cfa_offset 4
 1398              		.cfi_offset 14, -4
 1399 0002 8FB0     		sub	sp, sp, #60
 1400              		.cfi_def_cfa_offset 64
 686:Core/Src/main.c ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 1401              		.loc 1 686 3 view .LVU429
 686:Core/Src/main.c ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 1402              		.loc 1 686 26 is_stmt 0 view .LVU430
 1403 0004 0023     		movs	r3, #0
 1404 0006 0A93     		str	r3, [sp, #40]
 1405 0008 0B93     		str	r3, [sp, #44]
 1406 000a 0C93     		str	r3, [sp, #48]
 1407 000c 0D93     		str	r3, [sp, #52]
 687:Core/Src/main.c ****   TIM_OC_InitTypeDef sConfigOC = {0};
 1408              		.loc 1 687 3 is_stmt 1 view .LVU431
 687:Core/Src/main.c ****   TIM_OC_InitTypeDef sConfigOC = {0};
 1409              		.loc 1 687 27 is_stmt 0 view .LVU432
 1410 000e 0893     		str	r3, [sp, #32]
 1411 0010 0993     		str	r3, [sp, #36]
 688:Core/Src/main.c **** 
 1412              		.loc 1 688 3 is_stmt 1 view .LVU433
 688:Core/Src/main.c **** 
 1413              		.loc 1 688 22 is_stmt 0 view .LVU434
 1414 0012 0193     		str	r3, [sp, #4]
 1415 0014 0293     		str	r3, [sp, #8]
 1416 0016 0393     		str	r3, [sp, #12]
 1417 0018 0493     		str	r3, [sp, #16]
 1418 001a 0593     		str	r3, [sp, #20]
 1419 001c 0693     		str	r3, [sp, #24]
 1420 001e 0793     		str	r3, [sp, #28]
ARM GAS  C:\Temp\cc4ZtMPR.s 			page 55


 693:Core/Src/main.c ****   htim2.Init.Prescaler = 0;
 1421              		.loc 1 693 3 is_stmt 1 view .LVU435
 693:Core/Src/main.c ****   htim2.Init.Prescaler = 0;
 1422              		.loc 1 693 18 is_stmt 0 view .LVU436
 1423 0020 1E48     		ldr	r0, .L65
 1424 0022 4FF08042 		mov	r2, #1073741824
 1425 0026 0260     		str	r2, [r0]
 694:Core/Src/main.c ****   htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 1426              		.loc 1 694 3 is_stmt 1 view .LVU437
 694:Core/Src/main.c ****   htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 1427              		.loc 1 694 24 is_stmt 0 view .LVU438
 1428 0028 4360     		str	r3, [r0, #4]
 695:Core/Src/main.c ****   htim2.Init.Period = 104;
 1429              		.loc 1 695 3 is_stmt 1 view .LVU439
 695:Core/Src/main.c ****   htim2.Init.Period = 104;
 1430              		.loc 1 695 26 is_stmt 0 view .LVU440
 1431 002a 8360     		str	r3, [r0, #8]
 696:Core/Src/main.c ****   htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 1432              		.loc 1 696 3 is_stmt 1 view .LVU441
 696:Core/Src/main.c ****   htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 1433              		.loc 1 696 21 is_stmt 0 view .LVU442
 1434 002c 6822     		movs	r2, #104
 1435 002e C260     		str	r2, [r0, #12]
 697:Core/Src/main.c ****   htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 1436              		.loc 1 697 3 is_stmt 1 view .LVU443
 697:Core/Src/main.c ****   htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 1437              		.loc 1 697 28 is_stmt 0 view .LVU444
 1438 0030 0361     		str	r3, [r0, #16]
 698:Core/Src/main.c ****   if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 1439              		.loc 1 698 3 is_stmt 1 view .LVU445
 698:Core/Src/main.c ****   if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 1440              		.loc 1 698 32 is_stmt 0 view .LVU446
 1441 0032 8361     		str	r3, [r0, #24]
 699:Core/Src/main.c ****   {
 1442              		.loc 1 699 3 is_stmt 1 view .LVU447
 699:Core/Src/main.c ****   {
 1443              		.loc 1 699 7 is_stmt 0 view .LVU448
 1444 0034 FFF7FEFF 		bl	HAL_TIM_Base_Init
 1445              	.LVL80:
 699:Core/Src/main.c ****   {
 1446              		.loc 1 699 6 view .LVU449
 1447 0038 28BB     		cbnz	r0, .L60
 703:Core/Src/main.c ****   if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 1448              		.loc 1 703 3 is_stmt 1 view .LVU450
 703:Core/Src/main.c ****   if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 1449              		.loc 1 703 34 is_stmt 0 view .LVU451
 1450 003a 4FF48053 		mov	r3, #4096
 1451 003e 0A93     		str	r3, [sp, #40]
 704:Core/Src/main.c ****   {
 1452              		.loc 1 704 3 is_stmt 1 view .LVU452
 704:Core/Src/main.c ****   {
 1453              		.loc 1 704 7 is_stmt 0 view .LVU453
 1454 0040 0AA9     		add	r1, sp, #40
 1455 0042 1648     		ldr	r0, .L65
 1456 0044 FFF7FEFF 		bl	HAL_TIM_ConfigClockSource
 1457              	.LVL81:
 704:Core/Src/main.c ****   {
ARM GAS  C:\Temp\cc4ZtMPR.s 			page 56


 1458              		.loc 1 704 6 view .LVU454
 1459 0048 F8B9     		cbnz	r0, .L61
 708:Core/Src/main.c ****   {
 1460              		.loc 1 708 3 is_stmt 1 view .LVU455
 708:Core/Src/main.c ****   {
 1461              		.loc 1 708 7 is_stmt 0 view .LVU456
 1462 004a 1448     		ldr	r0, .L65
 1463 004c FFF7FEFF 		bl	HAL_TIM_PWM_Init
 1464              	.LVL82:
 708:Core/Src/main.c ****   {
 1465              		.loc 1 708 6 view .LVU457
 1466 0050 E8B9     		cbnz	r0, .L62
 712:Core/Src/main.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 1467              		.loc 1 712 3 is_stmt 1 view .LVU458
 712:Core/Src/main.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 1468              		.loc 1 712 37 is_stmt 0 view .LVU459
 1469 0052 0023     		movs	r3, #0
 1470 0054 0893     		str	r3, [sp, #32]
 713:Core/Src/main.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 1471              		.loc 1 713 3 is_stmt 1 view .LVU460
 713:Core/Src/main.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 1472              		.loc 1 713 33 is_stmt 0 view .LVU461
 1473 0056 0993     		str	r3, [sp, #36]
 714:Core/Src/main.c ****   {
 1474              		.loc 1 714 3 is_stmt 1 view .LVU462
 714:Core/Src/main.c ****   {
 1475              		.loc 1 714 7 is_stmt 0 view .LVU463
 1476 0058 08A9     		add	r1, sp, #32
 1477 005a 1048     		ldr	r0, .L65
 1478 005c FFF7FEFF 		bl	HAL_TIMEx_MasterConfigSynchronization
 1479              	.LVL83:
 714:Core/Src/main.c ****   {
 1480              		.loc 1 714 6 view .LVU464
 1481 0060 B8B9     		cbnz	r0, .L63
 718:Core/Src/main.c ****   sConfigOC.Pulse = 0;
 1482              		.loc 1 718 3 is_stmt 1 view .LVU465
 718:Core/Src/main.c ****   sConfigOC.Pulse = 0;
 1483              		.loc 1 718 20 is_stmt 0 view .LVU466
 1484 0062 6023     		movs	r3, #96
 1485 0064 0193     		str	r3, [sp, #4]
 719:Core/Src/main.c ****   sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 1486              		.loc 1 719 3 is_stmt 1 view .LVU467
 719:Core/Src/main.c ****   sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 1487              		.loc 1 719 19 is_stmt 0 view .LVU468
 1488 0066 0023     		movs	r3, #0
 1489 0068 0293     		str	r3, [sp, #8]
 720:Core/Src/main.c ****   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 1490              		.loc 1 720 3 is_stmt 1 view .LVU469
 720:Core/Src/main.c ****   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 1491              		.loc 1 720 24 is_stmt 0 view .LVU470
 1492 006a 0393     		str	r3, [sp, #12]
 721:Core/Src/main.c ****   if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 1493              		.loc 1 721 3 is_stmt 1 view .LVU471
 721:Core/Src/main.c ****   if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 1494              		.loc 1 721 24 is_stmt 0 view .LVU472
 1495 006c 0593     		str	r3, [sp, #20]
 722:Core/Src/main.c ****   {
ARM GAS  C:\Temp\cc4ZtMPR.s 			page 57


 1496              		.loc 1 722 3 is_stmt 1 view .LVU473
 722:Core/Src/main.c ****   {
 1497              		.loc 1 722 7 is_stmt 0 view .LVU474
 1498 006e 0822     		movs	r2, #8
 1499 0070 01A9     		add	r1, sp, #4
 1500 0072 0A48     		ldr	r0, .L65
 1501 0074 FFF7FEFF 		bl	HAL_TIM_PWM_ConfigChannel
 1502              	.LVL84:
 722:Core/Src/main.c ****   {
 1503              		.loc 1 722 6 view .LVU475
 1504 0078 68B9     		cbnz	r0, .L64
 729:Core/Src/main.c **** 
 1505              		.loc 1 729 3 is_stmt 1 view .LVU476
 1506 007a 0848     		ldr	r0, .L65
 1507 007c FFF7FEFF 		bl	HAL_TIM_MspPostInit
 1508              	.LVL85:
 731:Core/Src/main.c **** 
 1509              		.loc 1 731 1 is_stmt 0 view .LVU477
 1510 0080 0FB0     		add	sp, sp, #60
 1511              		.cfi_remember_state
 1512              		.cfi_def_cfa_offset 4
 1513              		@ sp needed
 1514 0082 5DF804FB 		ldr	pc, [sp], #4
 1515              	.L60:
 1516              		.cfi_restore_state
 701:Core/Src/main.c ****   }
 1517              		.loc 1 701 5 is_stmt 1 view .LVU478
 1518 0086 FFF7FEFF 		bl	Error_Handler
 1519              	.LVL86:
 1520              	.L61:
 706:Core/Src/main.c ****   }
 1521              		.loc 1 706 5 view .LVU479
 1522 008a FFF7FEFF 		bl	Error_Handler
 1523              	.LVL87:
 1524              	.L62:
 710:Core/Src/main.c ****   }
 1525              		.loc 1 710 5 view .LVU480
 1526 008e FFF7FEFF 		bl	Error_Handler
 1527              	.LVL88:
 1528              	.L63:
 716:Core/Src/main.c ****   }
 1529              		.loc 1 716 5 view .LVU481
 1530 0092 FFF7FEFF 		bl	Error_Handler
 1531              	.LVL89:
 1532              	.L64:
 724:Core/Src/main.c ****   }
 1533              		.loc 1 724 5 view .LVU482
 1534 0096 FFF7FEFF 		bl	Error_Handler
 1535              	.LVL90:
 1536              	.L66:
 1537 009a 00BF     		.align	2
 1538              	.L65:
 1539 009c 00000000 		.word	htim2
 1540              		.cfi_endproc
 1541              	.LFE249:
 1543              		.section	.text.MX_I2C1_Init,"ax",%progbits
 1544              		.align	1
ARM GAS  C:\Temp\cc4ZtMPR.s 			page 58


 1545              		.syntax unified
 1546              		.thumb
 1547              		.thumb_func
 1549              	MX_I2C1_Init:
 1550              	.LFB246:
 541:Core/Src/main.c **** 
 1551              		.loc 1 541 1 view -0
 1552              		.cfi_startproc
 1553              		@ args = 0, pretend = 0, frame = 0
 1554              		@ frame_needed = 0, uses_anonymous_args = 0
 1555 0000 08B5     		push	{r3, lr}
 1556              		.cfi_def_cfa_offset 8
 1557              		.cfi_offset 3, -8
 1558              		.cfi_offset 14, -4
 550:Core/Src/main.c ****   hi2c1.Init.ClockSpeed = 1000000;
 1559              		.loc 1 550 3 view .LVU484
 550:Core/Src/main.c ****   hi2c1.Init.ClockSpeed = 1000000;
 1560              		.loc 1 550 18 is_stmt 0 view .LVU485
 1561 0002 0A48     		ldr	r0, .L71
 1562 0004 0A4B     		ldr	r3, .L71+4
 1563 0006 0360     		str	r3, [r0]
 551:Core/Src/main.c ****   hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 1564              		.loc 1 551 3 is_stmt 1 view .LVU486
 551:Core/Src/main.c ****   hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 1565              		.loc 1 551 25 is_stmt 0 view .LVU487
 1566 0008 0A4B     		ldr	r3, .L71+8
 1567 000a 4360     		str	r3, [r0, #4]
 552:Core/Src/main.c ****   hi2c1.Init.OwnAddress1 = 0;
 1568              		.loc 1 552 3 is_stmt 1 view .LVU488
 552:Core/Src/main.c ****   hi2c1.Init.OwnAddress1 = 0;
 1569              		.loc 1 552 24 is_stmt 0 view .LVU489
 1570 000c 0023     		movs	r3, #0
 1571 000e 8360     		str	r3, [r0, #8]
 553:Core/Src/main.c ****   hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 1572              		.loc 1 553 3 is_stmt 1 view .LVU490
 553:Core/Src/main.c ****   hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 1573              		.loc 1 553 26 is_stmt 0 view .LVU491
 1574 0010 C360     		str	r3, [r0, #12]
 554:Core/Src/main.c ****   hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 1575              		.loc 1 554 3 is_stmt 1 view .LVU492
 554:Core/Src/main.c ****   hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 1576              		.loc 1 554 29 is_stmt 0 view .LVU493
 1577 0012 4FF48042 		mov	r2, #16384
 1578 0016 0261     		str	r2, [r0, #16]
 555:Core/Src/main.c ****   hi2c1.Init.OwnAddress2 = 0;
 1579              		.loc 1 555 3 is_stmt 1 view .LVU494
 555:Core/Src/main.c ****   hi2c1.Init.OwnAddress2 = 0;
 1580              		.loc 1 555 30 is_stmt 0 view .LVU495
 1581 0018 4361     		str	r3, [r0, #20]
 556:Core/Src/main.c ****   hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 1582              		.loc 1 556 3 is_stmt 1 view .LVU496
 556:Core/Src/main.c ****   hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 1583              		.loc 1 556 26 is_stmt 0 view .LVU497
 1584 001a 8361     		str	r3, [r0, #24]
 557:Core/Src/main.c ****   hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 1585              		.loc 1 557 3 is_stmt 1 view .LVU498
 557:Core/Src/main.c ****   hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
ARM GAS  C:\Temp\cc4ZtMPR.s 			page 59


 1586              		.loc 1 557 30 is_stmt 0 view .LVU499
 1587 001c C361     		str	r3, [r0, #28]
 558:Core/Src/main.c ****   if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 1588              		.loc 1 558 3 is_stmt 1 view .LVU500
 558:Core/Src/main.c ****   if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 1589              		.loc 1 558 28 is_stmt 0 view .LVU501
 1590 001e 0362     		str	r3, [r0, #32]
 559:Core/Src/main.c ****   {
 1591              		.loc 1 559 3 is_stmt 1 view .LVU502
 559:Core/Src/main.c ****   {
 1592              		.loc 1 559 7 is_stmt 0 view .LVU503
 1593 0020 FFF7FEFF 		bl	HAL_I2C_Init
 1594              	.LVL91:
 559:Core/Src/main.c ****   {
 1595              		.loc 1 559 6 view .LVU504
 1596 0024 00B9     		cbnz	r0, .L70
 567:Core/Src/main.c **** 
 1597              		.loc 1 567 1 view .LVU505
 1598 0026 08BD     		pop	{r3, pc}
 1599              	.L70:
 561:Core/Src/main.c ****   }
 1600              		.loc 1 561 5 is_stmt 1 view .LVU506
 1601 0028 FFF7FEFF 		bl	Error_Handler
 1602              	.LVL92:
 1603              	.L72:
 1604              		.align	2
 1605              	.L71:
 1606 002c 00000000 		.word	hi2c1
 1607 0030 00540040 		.word	1073763328
 1608 0034 40420F00 		.word	1000000
 1609              		.cfi_endproc
 1610              	.LFE246:
 1612              		.section	.text.MX_ADC1_Init,"ax",%progbits
 1613              		.align	1
 1614              		.syntax unified
 1615              		.thumb
 1616              		.thumb_func
 1618              	MX_ADC1_Init:
 1619              	.LFB245:
 462:Core/Src/main.c **** 
 1620              		.loc 1 462 1 view -0
 1621              		.cfi_startproc
 1622              		@ args = 0, pretend = 0, frame = 16
 1623              		@ frame_needed = 0, uses_anonymous_args = 0
 1624 0000 00B5     		push	{lr}
 1625              		.cfi_def_cfa_offset 4
 1626              		.cfi_offset 14, -4
 1627 0002 85B0     		sub	sp, sp, #20
 1628              		.cfi_def_cfa_offset 24
 468:Core/Src/main.c **** 
 1629              		.loc 1 468 3 view .LVU508
 468:Core/Src/main.c **** 
 1630              		.loc 1 468 26 is_stmt 0 view .LVU509
 1631 0004 0023     		movs	r3, #0
 1632 0006 0093     		str	r3, [sp]
 1633 0008 0193     		str	r3, [sp, #4]
 1634 000a 0293     		str	r3, [sp, #8]
ARM GAS  C:\Temp\cc4ZtMPR.s 			page 60


 1635 000c 0393     		str	r3, [sp, #12]
 476:Core/Src/main.c ****   hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 1636              		.loc 1 476 3 is_stmt 1 view .LVU510
 476:Core/Src/main.c ****   hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 1637              		.loc 1 476 18 is_stmt 0 view .LVU511
 1638 000e 2548     		ldr	r0, .L85
 1639 0010 254A     		ldr	r2, .L85+4
 1640 0012 0260     		str	r2, [r0]
 477:Core/Src/main.c ****   hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 1641              		.loc 1 477 3 is_stmt 1 view .LVU512
 477:Core/Src/main.c ****   hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 1642              		.loc 1 477 29 is_stmt 0 view .LVU513
 1643 0014 4FF44032 		mov	r2, #196608
 1644 0018 4260     		str	r2, [r0, #4]
 478:Core/Src/main.c ****   hadc1.Init.ScanConvMode = ENABLE;
 1645              		.loc 1 478 3 is_stmt 1 view .LVU514
 478:Core/Src/main.c ****   hadc1.Init.ScanConvMode = ENABLE;
 1646              		.loc 1 478 25 is_stmt 0 view .LVU515
 1647 001a 8360     		str	r3, [r0, #8]
 479:Core/Src/main.c ****   hadc1.Init.ContinuousConvMode = ENABLE;
 1648              		.loc 1 479 3 is_stmt 1 view .LVU516
 479:Core/Src/main.c ****   hadc1.Init.ContinuousConvMode = ENABLE;
 1649              		.loc 1 479 27 is_stmt 0 view .LVU517
 1650 001c 0122     		movs	r2, #1
 1651 001e 0261     		str	r2, [r0, #16]
 480:Core/Src/main.c ****   hadc1.Init.DiscontinuousConvMode = DISABLE;
 1652              		.loc 1 480 3 is_stmt 1 view .LVU518
 480:Core/Src/main.c ****   hadc1.Init.DiscontinuousConvMode = DISABLE;
 1653              		.loc 1 480 33 is_stmt 0 view .LVU519
 1654 0020 0276     		strb	r2, [r0, #24]
 481:Core/Src/main.c ****   hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 1655              		.loc 1 481 3 is_stmt 1 view .LVU520
 481:Core/Src/main.c ****   hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 1656              		.loc 1 481 36 is_stmt 0 view .LVU521
 1657 0022 80F82030 		strb	r3, [r0, #32]
 482:Core/Src/main.c ****   hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 1658              		.loc 1 482 3 is_stmt 1 view .LVU522
 482:Core/Src/main.c ****   hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 1659              		.loc 1 482 35 is_stmt 0 view .LVU523
 1660 0026 C362     		str	r3, [r0, #44]
 483:Core/Src/main.c ****   hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 1661              		.loc 1 483 3 is_stmt 1 view .LVU524
 483:Core/Src/main.c ****   hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 1662              		.loc 1 483 31 is_stmt 0 view .LVU525
 1663 0028 2049     		ldr	r1, .L85+8
 1664 002a 8162     		str	r1, [r0, #40]
 484:Core/Src/main.c ****   hadc1.Init.NbrOfConversion = 4;
 1665              		.loc 1 484 3 is_stmt 1 view .LVU526
 484:Core/Src/main.c ****   hadc1.Init.NbrOfConversion = 4;
 1666              		.loc 1 484 24 is_stmt 0 view .LVU527
 1667 002c C360     		str	r3, [r0, #12]
 485:Core/Src/main.c ****   hadc1.Init.DMAContinuousRequests = ENABLE;
 1668              		.loc 1 485 3 is_stmt 1 view .LVU528
 485:Core/Src/main.c ****   hadc1.Init.DMAContinuousRequests = ENABLE;
 1669              		.loc 1 485 30 is_stmt 0 view .LVU529
 1670 002e 0421     		movs	r1, #4
 1671 0030 C161     		str	r1, [r0, #28]
ARM GAS  C:\Temp\cc4ZtMPR.s 			page 61


 486:Core/Src/main.c ****   hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 1672              		.loc 1 486 3 is_stmt 1 view .LVU530
 486:Core/Src/main.c ****   hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 1673              		.loc 1 486 36 is_stmt 0 view .LVU531
 1674 0032 80F83020 		strb	r2, [r0, #48]
 487:Core/Src/main.c ****   if (HAL_ADC_Init(&hadc1) != HAL_OK)
 1675              		.loc 1 487 3 is_stmt 1 view .LVU532
 487:Core/Src/main.c ****   if (HAL_ADC_Init(&hadc1) != HAL_OK)
 1676              		.loc 1 487 27 is_stmt 0 view .LVU533
 1677 0036 4361     		str	r3, [r0, #20]
 488:Core/Src/main.c ****   {
 1678              		.loc 1 488 3 is_stmt 1 view .LVU534
 488:Core/Src/main.c ****   {
 1679              		.loc 1 488 7 is_stmt 0 view .LVU535
 1680 0038 FFF7FEFF 		bl	HAL_ADC_Init
 1681              	.LVL93:
 488:Core/Src/main.c ****   {
 1682              		.loc 1 488 6 view .LVU536
 1683 003c 38BB     		cbnz	r0, .L80
 495:Core/Src/main.c ****   sConfig.Rank = 1;
 1684              		.loc 1 495 3 is_stmt 1 view .LVU537
 495:Core/Src/main.c ****   sConfig.Rank = 1;
 1685              		.loc 1 495 19 is_stmt 0 view .LVU538
 1686 003e 0023     		movs	r3, #0
 1687 0040 0093     		str	r3, [sp]
 496:Core/Src/main.c ****   sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 1688              		.loc 1 496 3 is_stmt 1 view .LVU539
 496:Core/Src/main.c ****   sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 1689              		.loc 1 496 16 is_stmt 0 view .LVU540
 1690 0042 0122     		movs	r2, #1
 1691 0044 0192     		str	r2, [sp, #4]
 497:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 1692              		.loc 1 497 3 is_stmt 1 view .LVU541
 497:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 1693              		.loc 1 497 24 is_stmt 0 view .LVU542
 1694 0046 0293     		str	r3, [sp, #8]
 498:Core/Src/main.c ****   {
 1695              		.loc 1 498 3 is_stmt 1 view .LVU543
 498:Core/Src/main.c ****   {
 1696              		.loc 1 498 7 is_stmt 0 view .LVU544
 1697 0048 6946     		mov	r1, sp
 1698 004a 1648     		ldr	r0, .L85
 1699 004c FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 1700              	.LVL94:
 498:Core/Src/main.c ****   {
 1701              		.loc 1 498 6 view .LVU545
 1702 0050 F8B9     		cbnz	r0, .L81
 505:Core/Src/main.c ****   sConfig.Rank = 2;
 1703              		.loc 1 505 3 is_stmt 1 view .LVU546
 505:Core/Src/main.c ****   sConfig.Rank = 2;
 1704              		.loc 1 505 19 is_stmt 0 view .LVU547
 1705 0052 0123     		movs	r3, #1
 1706 0054 0093     		str	r3, [sp]
 506:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 1707              		.loc 1 506 3 is_stmt 1 view .LVU548
 506:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 1708              		.loc 1 506 16 is_stmt 0 view .LVU549
ARM GAS  C:\Temp\cc4ZtMPR.s 			page 62


 1709 0056 0223     		movs	r3, #2
 1710 0058 0193     		str	r3, [sp, #4]
 507:Core/Src/main.c ****   {
 1711              		.loc 1 507 3 is_stmt 1 view .LVU550
 507:Core/Src/main.c ****   {
 1712              		.loc 1 507 7 is_stmt 0 view .LVU551
 1713 005a 6946     		mov	r1, sp
 1714 005c 1148     		ldr	r0, .L85
 1715 005e FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 1716              	.LVL95:
 507:Core/Src/main.c ****   {
 1717              		.loc 1 507 6 view .LVU552
 1718 0062 C0B9     		cbnz	r0, .L82
 514:Core/Src/main.c ****   sConfig.Rank = 3;
 1719              		.loc 1 514 3 is_stmt 1 view .LVU553
 514:Core/Src/main.c ****   sConfig.Rank = 3;
 1720              		.loc 1 514 19 is_stmt 0 view .LVU554
 1721 0064 0223     		movs	r3, #2
 1722 0066 0093     		str	r3, [sp]
 515:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 1723              		.loc 1 515 3 is_stmt 1 view .LVU555
 515:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 1724              		.loc 1 515 16 is_stmt 0 view .LVU556
 1725 0068 0323     		movs	r3, #3
 1726 006a 0193     		str	r3, [sp, #4]
 516:Core/Src/main.c ****   {
 1727              		.loc 1 516 3 is_stmt 1 view .LVU557
 516:Core/Src/main.c ****   {
 1728              		.loc 1 516 7 is_stmt 0 view .LVU558
 1729 006c 6946     		mov	r1, sp
 1730 006e 0D48     		ldr	r0, .L85
 1731 0070 FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 1732              	.LVL96:
 516:Core/Src/main.c ****   {
 1733              		.loc 1 516 6 view .LVU559
 1734 0074 88B9     		cbnz	r0, .L83
 523:Core/Src/main.c ****   sConfig.Rank = 4;
 1735              		.loc 1 523 3 is_stmt 1 view .LVU560
 523:Core/Src/main.c ****   sConfig.Rank = 4;
 1736              		.loc 1 523 19 is_stmt 0 view .LVU561
 1737 0076 0323     		movs	r3, #3
 1738 0078 0093     		str	r3, [sp]
 524:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 1739              		.loc 1 524 3 is_stmt 1 view .LVU562
 524:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 1740              		.loc 1 524 16 is_stmt 0 view .LVU563
 1741 007a 0423     		movs	r3, #4
 1742 007c 0193     		str	r3, [sp, #4]
 525:Core/Src/main.c ****   {
 1743              		.loc 1 525 3 is_stmt 1 view .LVU564
 525:Core/Src/main.c ****   {
 1744              		.loc 1 525 7 is_stmt 0 view .LVU565
 1745 007e 6946     		mov	r1, sp
 1746 0080 0848     		ldr	r0, .L85
 1747 0082 FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 1748              	.LVL97:
 525:Core/Src/main.c ****   {
ARM GAS  C:\Temp\cc4ZtMPR.s 			page 63


 1749              		.loc 1 525 6 view .LVU566
 1750 0086 50B9     		cbnz	r0, .L84
 533:Core/Src/main.c **** 
 1751              		.loc 1 533 1 view .LVU567
 1752 0088 05B0     		add	sp, sp, #20
 1753              		.cfi_remember_state
 1754              		.cfi_def_cfa_offset 4
 1755              		@ sp needed
 1756 008a 5DF804FB 		ldr	pc, [sp], #4
 1757              	.L80:
 1758              		.cfi_restore_state
 490:Core/Src/main.c ****   }
 1759              		.loc 1 490 5 is_stmt 1 view .LVU568
 1760 008e FFF7FEFF 		bl	Error_Handler
 1761              	.LVL98:
 1762              	.L81:
 500:Core/Src/main.c ****   }
 1763              		.loc 1 500 5 view .LVU569
 1764 0092 FFF7FEFF 		bl	Error_Handler
 1765              	.LVL99:
 1766              	.L82:
 509:Core/Src/main.c ****   }
 1767              		.loc 1 509 5 view .LVU570
 1768 0096 FFF7FEFF 		bl	Error_Handler
 1769              	.LVL100:
 1770              	.L83:
 518:Core/Src/main.c ****   }
 1771              		.loc 1 518 5 view .LVU571
 1772 009a FFF7FEFF 		bl	Error_Handler
 1773              	.LVL101:
 1774              	.L84:
 527:Core/Src/main.c ****   }
 1775              		.loc 1 527 5 view .LVU572
 1776 009e FFF7FEFF 		bl	Error_Handler
 1777              	.LVL102:
 1778              	.L86:
 1779 00a2 00BF     		.align	2
 1780              	.L85:
 1781 00a4 00000000 		.word	hadc1
 1782 00a8 00200140 		.word	1073815552
 1783 00ac 0100000F 		.word	251658241
 1784              		.cfi_endproc
 1785              	.LFE245:
 1787              		.section	.text.MX_TIM7_Init,"ax",%progbits
 1788              		.align	1
 1789              		.syntax unified
 1790              		.thumb
 1791              		.thumb_func
 1793              	MX_TIM7_Init:
 1794              	.LFB254:
 938:Core/Src/main.c **** 
 1795              		.loc 1 938 1 view -0
 1796              		.cfi_startproc
 1797              		@ args = 0, pretend = 0, frame = 8
 1798              		@ frame_needed = 0, uses_anonymous_args = 0
 1799 0000 00B5     		push	{lr}
 1800              		.cfi_def_cfa_offset 4
ARM GAS  C:\Temp\cc4ZtMPR.s 			page 64


 1801              		.cfi_offset 14, -4
 1802 0002 83B0     		sub	sp, sp, #12
 1803              		.cfi_def_cfa_offset 16
 944:Core/Src/main.c **** 
 1804              		.loc 1 944 3 view .LVU574
 944:Core/Src/main.c **** 
 1805              		.loc 1 944 27 is_stmt 0 view .LVU575
 1806 0004 0023     		movs	r3, #0
 1807 0006 0093     		str	r3, [sp]
 1808 0008 0193     		str	r3, [sp, #4]
 952:Core/Src/main.c ****   htim7.Init.Prescaler = (8400/3/240)-1;
 1809              		.loc 1 952 3 is_stmt 1 view .LVU576
 952:Core/Src/main.c ****   htim7.Init.Prescaler = (8400/3/240)-1;
 1810              		.loc 1 952 18 is_stmt 0 view .LVU577
 1811 000a 0E48     		ldr	r0, .L93
 1812 000c 0E4A     		ldr	r2, .L93+4
 1813 000e 0260     		str	r2, [r0]
 953:Core/Src/main.c ****   htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 1814              		.loc 1 953 3 is_stmt 1 view .LVU578
 953:Core/Src/main.c ****   htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 1815              		.loc 1 953 24 is_stmt 0 view .LVU579
 1816 0010 0A22     		movs	r2, #10
 1817 0012 4260     		str	r2, [r0, #4]
 954:Core/Src/main.c ****   htim7.Init.Period = 10000-1;
 1818              		.loc 1 954 3 is_stmt 1 view .LVU580
 954:Core/Src/main.c ****   htim7.Init.Period = 10000-1;
 1819              		.loc 1 954 26 is_stmt 0 view .LVU581
 1820 0014 8360     		str	r3, [r0, #8]
 955:Core/Src/main.c ****   htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 1821              		.loc 1 955 3 is_stmt 1 view .LVU582
 955:Core/Src/main.c ****   htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 1822              		.loc 1 955 21 is_stmt 0 view .LVU583
 1823 0016 42F20F72 		movw	r2, #9999
 1824 001a C260     		str	r2, [r0, #12]
 956:Core/Src/main.c ****   if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 1825              		.loc 1 956 3 is_stmt 1 view .LVU584
 956:Core/Src/main.c ****   if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 1826              		.loc 1 956 32 is_stmt 0 view .LVU585
 1827 001c 8361     		str	r3, [r0, #24]
 957:Core/Src/main.c ****   {
 1828              		.loc 1 957 3 is_stmt 1 view .LVU586
 957:Core/Src/main.c ****   {
 1829              		.loc 1 957 7 is_stmt 0 view .LVU587
 1830 001e FFF7FEFF 		bl	HAL_TIM_Base_Init
 1831              	.LVL103:
 957:Core/Src/main.c ****   {
 1832              		.loc 1 957 6 view .LVU588
 1833 0022 50B9     		cbnz	r0, .L91
 961:Core/Src/main.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 1834              		.loc 1 961 3 is_stmt 1 view .LVU589
 961:Core/Src/main.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 1835              		.loc 1 961 37 is_stmt 0 view .LVU590
 1836 0024 0023     		movs	r3, #0
 1837 0026 0093     		str	r3, [sp]
 962:Core/Src/main.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 1838              		.loc 1 962 3 is_stmt 1 view .LVU591
 962:Core/Src/main.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
ARM GAS  C:\Temp\cc4ZtMPR.s 			page 65


 1839              		.loc 1 962 33 is_stmt 0 view .LVU592
 1840 0028 0193     		str	r3, [sp, #4]
 963:Core/Src/main.c ****   {
 1841              		.loc 1 963 3 is_stmt 1 view .LVU593
 963:Core/Src/main.c ****   {
 1842              		.loc 1 963 7 is_stmt 0 view .LVU594
 1843 002a 6946     		mov	r1, sp
 1844 002c 0548     		ldr	r0, .L93
 1845 002e FFF7FEFF 		bl	HAL_TIMEx_MasterConfigSynchronization
 1846              	.LVL104:
 963:Core/Src/main.c ****   {
 1847              		.loc 1 963 6 view .LVU595
 1848 0032 20B9     		cbnz	r0, .L92
 971:Core/Src/main.c **** 
 1849              		.loc 1 971 1 view .LVU596
 1850 0034 03B0     		add	sp, sp, #12
 1851              		.cfi_remember_state
 1852              		.cfi_def_cfa_offset 4
 1853              		@ sp needed
 1854 0036 5DF804FB 		ldr	pc, [sp], #4
 1855              	.L91:
 1856              		.cfi_restore_state
 959:Core/Src/main.c ****   }
 1857              		.loc 1 959 5 is_stmt 1 view .LVU597
 1858 003a FFF7FEFF 		bl	Error_Handler
 1859              	.LVL105:
 1860              	.L92:
 965:Core/Src/main.c ****   }
 1861              		.loc 1 965 5 view .LVU598
 1862 003e FFF7FEFF 		bl	Error_Handler
 1863              	.LVL106:
 1864              	.L94:
 1865 0042 00BF     		.align	2
 1866              	.L93:
 1867 0044 00000000 		.word	htim7
 1868 0048 00140040 		.word	1073746944
 1869              		.cfi_endproc
 1870              	.LFE254:
 1872              		.section	.text.MX_TIM6_Init,"ax",%progbits
 1873              		.align	1
 1874              		.syntax unified
 1875              		.thumb
 1876              		.thumb_func
 1878              	MX_TIM6_Init:
 1879              	.LFB253:
 900:Core/Src/main.c **** 
 1880              		.loc 1 900 1 view -0
 1881              		.cfi_startproc
 1882              		@ args = 0, pretend = 0, frame = 8
 1883              		@ frame_needed = 0, uses_anonymous_args = 0
 1884 0000 00B5     		push	{lr}
 1885              		.cfi_def_cfa_offset 4
 1886              		.cfi_offset 14, -4
 1887 0002 83B0     		sub	sp, sp, #12
 1888              		.cfi_def_cfa_offset 16
 906:Core/Src/main.c **** 
 1889              		.loc 1 906 3 view .LVU600
ARM GAS  C:\Temp\cc4ZtMPR.s 			page 66


 906:Core/Src/main.c **** 
 1890              		.loc 1 906 27 is_stmt 0 view .LVU601
 1891 0004 0023     		movs	r3, #0
 1892 0006 0093     		str	r3, [sp]
 1893 0008 0193     		str	r3, [sp, #4]
 911:Core/Src/main.c ****   htim6.Init.Prescaler = 8400-1;
 1894              		.loc 1 911 3 is_stmt 1 view .LVU602
 911:Core/Src/main.c ****   htim6.Init.Prescaler = 8400-1;
 1895              		.loc 1 911 18 is_stmt 0 view .LVU603
 1896 000a 0F48     		ldr	r0, .L101
 1897 000c 0F4A     		ldr	r2, .L101+4
 1898 000e 0260     		str	r2, [r0]
 912:Core/Src/main.c ****   htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 1899              		.loc 1 912 3 is_stmt 1 view .LVU604
 912:Core/Src/main.c ****   htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 1900              		.loc 1 912 24 is_stmt 0 view .LVU605
 1901 0010 42F2CF02 		movw	r2, #8399
 1902 0014 4260     		str	r2, [r0, #4]
 913:Core/Src/main.c ****   htim6.Init.Period = 1000-1;
 1903              		.loc 1 913 3 is_stmt 1 view .LVU606
 913:Core/Src/main.c ****   htim6.Init.Period = 1000-1;
 1904              		.loc 1 913 26 is_stmt 0 view .LVU607
 1905 0016 8360     		str	r3, [r0, #8]
 914:Core/Src/main.c ****   htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 1906              		.loc 1 914 3 is_stmt 1 view .LVU608
 914:Core/Src/main.c ****   htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 1907              		.loc 1 914 21 is_stmt 0 view .LVU609
 1908 0018 40F2E733 		movw	r3, #999
 1909 001c C360     		str	r3, [r0, #12]
 915:Core/Src/main.c ****   if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 1910              		.loc 1 915 3 is_stmt 1 view .LVU610
 915:Core/Src/main.c ****   if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 1911              		.loc 1 915 32 is_stmt 0 view .LVU611
 1912 001e 8023     		movs	r3, #128
 1913 0020 8361     		str	r3, [r0, #24]
 916:Core/Src/main.c ****   {
 1914              		.loc 1 916 3 is_stmt 1 view .LVU612
 916:Core/Src/main.c ****   {
 1915              		.loc 1 916 7 is_stmt 0 view .LVU613
 1916 0022 FFF7FEFF 		bl	HAL_TIM_Base_Init
 1917              	.LVL107:
 916:Core/Src/main.c ****   {
 1918              		.loc 1 916 6 view .LVU614
 1919 0026 50B9     		cbnz	r0, .L99
 920:Core/Src/main.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 1920              		.loc 1 920 3 is_stmt 1 view .LVU615
 920:Core/Src/main.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 1921              		.loc 1 920 37 is_stmt 0 view .LVU616
 1922 0028 0023     		movs	r3, #0
 1923 002a 0093     		str	r3, [sp]
 921:Core/Src/main.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 1924              		.loc 1 921 3 is_stmt 1 view .LVU617
 921:Core/Src/main.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 1925              		.loc 1 921 33 is_stmt 0 view .LVU618
 1926 002c 0193     		str	r3, [sp, #4]
 922:Core/Src/main.c ****   {
 1927              		.loc 1 922 3 is_stmt 1 view .LVU619
ARM GAS  C:\Temp\cc4ZtMPR.s 			page 67


 922:Core/Src/main.c ****   {
 1928              		.loc 1 922 7 is_stmt 0 view .LVU620
 1929 002e 6946     		mov	r1, sp
 1930 0030 0548     		ldr	r0, .L101
 1931 0032 FFF7FEFF 		bl	HAL_TIMEx_MasterConfigSynchronization
 1932              	.LVL108:
 922:Core/Src/main.c ****   {
 1933              		.loc 1 922 6 view .LVU621
 1934 0036 20B9     		cbnz	r0, .L100
 930:Core/Src/main.c **** 
 1935              		.loc 1 930 1 view .LVU622
 1936 0038 03B0     		add	sp, sp, #12
 1937              		.cfi_remember_state
 1938              		.cfi_def_cfa_offset 4
 1939              		@ sp needed
 1940 003a 5DF804FB 		ldr	pc, [sp], #4
 1941              	.L99:
 1942              		.cfi_restore_state
 918:Core/Src/main.c ****   }
 1943              		.loc 1 918 5 is_stmt 1 view .LVU623
 1944 003e FFF7FEFF 		bl	Error_Handler
 1945              	.LVL109:
 1946              	.L100:
 924:Core/Src/main.c ****   }
 1947              		.loc 1 924 5 view .LVU624
 1948 0042 FFF7FEFF 		bl	Error_Handler
 1949              	.LVL110:
 1950              	.L102:
 1951 0046 00BF     		.align	2
 1952              	.L101:
 1953 0048 00000000 		.word	htim6
 1954 004c 00100040 		.word	1073745920
 1955              		.cfi_endproc
 1956              	.LFE253:
 1958              		.section	.text.MX_I2C2_Init,"ax",%progbits
 1959              		.align	1
 1960              		.syntax unified
 1961              		.thumb
 1962              		.thumb_func
 1964              	MX_I2C2_Init:
 1965              	.LFB247:
 575:Core/Src/main.c **** 
 1966              		.loc 1 575 1 view -0
 1967              		.cfi_startproc
 1968              		@ args = 0, pretend = 0, frame = 0
 1969              		@ frame_needed = 0, uses_anonymous_args = 0
 1970 0000 08B5     		push	{r3, lr}
 1971              		.cfi_def_cfa_offset 8
 1972              		.cfi_offset 3, -8
 1973              		.cfi_offset 14, -4
 584:Core/Src/main.c ****   hi2c2.Init.ClockSpeed = 100000;
 1974              		.loc 1 584 3 view .LVU626
 584:Core/Src/main.c ****   hi2c2.Init.ClockSpeed = 100000;
 1975              		.loc 1 584 18 is_stmt 0 view .LVU627
 1976 0002 0A48     		ldr	r0, .L107
 1977 0004 0A4B     		ldr	r3, .L107+4
 1978 0006 0360     		str	r3, [r0]
ARM GAS  C:\Temp\cc4ZtMPR.s 			page 68


 585:Core/Src/main.c ****   hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 1979              		.loc 1 585 3 is_stmt 1 view .LVU628
 585:Core/Src/main.c ****   hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 1980              		.loc 1 585 25 is_stmt 0 view .LVU629
 1981 0008 0A4B     		ldr	r3, .L107+8
 1982 000a 4360     		str	r3, [r0, #4]
 586:Core/Src/main.c ****   hi2c2.Init.OwnAddress1 = 0;
 1983              		.loc 1 586 3 is_stmt 1 view .LVU630
 586:Core/Src/main.c ****   hi2c2.Init.OwnAddress1 = 0;
 1984              		.loc 1 586 24 is_stmt 0 view .LVU631
 1985 000c 0023     		movs	r3, #0
 1986 000e 8360     		str	r3, [r0, #8]
 587:Core/Src/main.c ****   hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 1987              		.loc 1 587 3 is_stmt 1 view .LVU632
 587:Core/Src/main.c ****   hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 1988              		.loc 1 587 26 is_stmt 0 view .LVU633
 1989 0010 C360     		str	r3, [r0, #12]
 588:Core/Src/main.c ****   hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 1990              		.loc 1 588 3 is_stmt 1 view .LVU634
 588:Core/Src/main.c ****   hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 1991              		.loc 1 588 29 is_stmt 0 view .LVU635
 1992 0012 4FF48042 		mov	r2, #16384
 1993 0016 0261     		str	r2, [r0, #16]
 589:Core/Src/main.c ****   hi2c2.Init.OwnAddress2 = 0;
 1994              		.loc 1 589 3 is_stmt 1 view .LVU636
 589:Core/Src/main.c ****   hi2c2.Init.OwnAddress2 = 0;
 1995              		.loc 1 589 30 is_stmt 0 view .LVU637
 1996 0018 4361     		str	r3, [r0, #20]
 590:Core/Src/main.c ****   hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 1997              		.loc 1 590 3 is_stmt 1 view .LVU638
 590:Core/Src/main.c ****   hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 1998              		.loc 1 590 26 is_stmt 0 view .LVU639
 1999 001a 8361     		str	r3, [r0, #24]
 591:Core/Src/main.c ****   hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 2000              		.loc 1 591 3 is_stmt 1 view .LVU640
 591:Core/Src/main.c ****   hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 2001              		.loc 1 591 30 is_stmt 0 view .LVU641
 2002 001c C361     		str	r3, [r0, #28]
 592:Core/Src/main.c ****   if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 2003              		.loc 1 592 3 is_stmt 1 view .LVU642
 592:Core/Src/main.c ****   if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 2004              		.loc 1 592 28 is_stmt 0 view .LVU643
 2005 001e 0362     		str	r3, [r0, #32]
 593:Core/Src/main.c ****   {
 2006              		.loc 1 593 3 is_stmt 1 view .LVU644
 593:Core/Src/main.c ****   {
 2007              		.loc 1 593 7 is_stmt 0 view .LVU645
 2008 0020 FFF7FEFF 		bl	HAL_I2C_Init
 2009              	.LVL111:
 593:Core/Src/main.c ****   {
 2010              		.loc 1 593 6 view .LVU646
 2011 0024 00B9     		cbnz	r0, .L106
 601:Core/Src/main.c **** 
 2012              		.loc 1 601 1 view .LVU647
 2013 0026 08BD     		pop	{r3, pc}
 2014              	.L106:
 595:Core/Src/main.c ****   }
ARM GAS  C:\Temp\cc4ZtMPR.s 			page 69


 2015              		.loc 1 595 5 is_stmt 1 view .LVU648
 2016 0028 FFF7FEFF 		bl	Error_Handler
 2017              	.LVL112:
 2018              	.L108:
 2019              		.align	2
 2020              	.L107:
 2021 002c 00000000 		.word	hi2c2
 2022 0030 00580040 		.word	1073764352
 2023 0034 A0860100 		.word	100000
 2024              		.cfi_endproc
 2025              	.LFE247:
 2027              		.section	.text.MX_TIM4_Init,"ax",%progbits
 2028              		.align	1
 2029              		.syntax unified
 2030              		.thumb
 2031              		.thumb_func
 2033              	MX_TIM4_Init:
 2034              	.LFB251:
 810:Core/Src/main.c **** 
 2035              		.loc 1 810 1 view -0
 2036              		.cfi_startproc
 2037              		@ args = 0, pretend = 0, frame = 24
 2038              		@ frame_needed = 0, uses_anonymous_args = 0
 2039 0000 00B5     		push	{lr}
 2040              		.cfi_def_cfa_offset 4
 2041              		.cfi_offset 14, -4
 2042 0002 87B0     		sub	sp, sp, #28
 2043              		.cfi_def_cfa_offset 32
 816:Core/Src/main.c ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 2044              		.loc 1 816 3 view .LVU650
 816:Core/Src/main.c ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 2045              		.loc 1 816 26 is_stmt 0 view .LVU651
 2046 0004 0023     		movs	r3, #0
 2047 0006 0293     		str	r3, [sp, #8]
 2048 0008 0393     		str	r3, [sp, #12]
 2049 000a 0493     		str	r3, [sp, #16]
 2050 000c 0593     		str	r3, [sp, #20]
 817:Core/Src/main.c **** 
 2051              		.loc 1 817 3 is_stmt 1 view .LVU652
 817:Core/Src/main.c **** 
 2052              		.loc 1 817 27 is_stmt 0 view .LVU653
 2053 000e 0093     		str	r3, [sp]
 2054 0010 0193     		str	r3, [sp, #4]
 822:Core/Src/main.c ****   htim4.Init.Prescaler = 9999;
 2055              		.loc 1 822 3 is_stmt 1 view .LVU654
 822:Core/Src/main.c ****   htim4.Init.Prescaler = 9999;
 2056              		.loc 1 822 18 is_stmt 0 view .LVU655
 2057 0012 1448     		ldr	r0, .L117
 2058 0014 144A     		ldr	r2, .L117+4
 2059 0016 0260     		str	r2, [r0]
 823:Core/Src/main.c ****   htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 2060              		.loc 1 823 3 is_stmt 1 view .LVU656
 823:Core/Src/main.c ****   htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 2061              		.loc 1 823 24 is_stmt 0 view .LVU657
 2062 0018 42F20F72 		movw	r2, #9999
 2063 001c 4260     		str	r2, [r0, #4]
 824:Core/Src/main.c ****   htim4.Init.Period = 8400;
ARM GAS  C:\Temp\cc4ZtMPR.s 			page 70


 2064              		.loc 1 824 3 is_stmt 1 view .LVU658
 824:Core/Src/main.c ****   htim4.Init.Period = 8400;
 2065              		.loc 1 824 26 is_stmt 0 view .LVU659
 2066 001e 8360     		str	r3, [r0, #8]
 825:Core/Src/main.c ****   htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 2067              		.loc 1 825 3 is_stmt 1 view .LVU660
 825:Core/Src/main.c ****   htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 2068              		.loc 1 825 21 is_stmt 0 view .LVU661
 2069 0020 42F2D002 		movw	r2, #8400
 2070 0024 C260     		str	r2, [r0, #12]
 826:Core/Src/main.c ****   htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 2071              		.loc 1 826 3 is_stmt 1 view .LVU662
 826:Core/Src/main.c ****   htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 2072              		.loc 1 826 28 is_stmt 0 view .LVU663
 2073 0026 0361     		str	r3, [r0, #16]
 827:Core/Src/main.c ****   if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 2074              		.loc 1 827 3 is_stmt 1 view .LVU664
 827:Core/Src/main.c ****   if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 2075              		.loc 1 827 32 is_stmt 0 view .LVU665
 2076 0028 8023     		movs	r3, #128
 2077 002a 8361     		str	r3, [r0, #24]
 828:Core/Src/main.c ****   {
 2078              		.loc 1 828 3 is_stmt 1 view .LVU666
 828:Core/Src/main.c ****   {
 2079              		.loc 1 828 7 is_stmt 0 view .LVU667
 2080 002c FFF7FEFF 		bl	HAL_TIM_Base_Init
 2081              	.LVL113:
 828:Core/Src/main.c ****   {
 2082              		.loc 1 828 6 view .LVU668
 2083 0030 90B9     		cbnz	r0, .L114
 832:Core/Src/main.c ****   if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 2084              		.loc 1 832 3 is_stmt 1 view .LVU669
 832:Core/Src/main.c ****   if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 2085              		.loc 1 832 34 is_stmt 0 view .LVU670
 2086 0032 4FF48053 		mov	r3, #4096
 2087 0036 0293     		str	r3, [sp, #8]
 833:Core/Src/main.c ****   {
 2088              		.loc 1 833 3 is_stmt 1 view .LVU671
 833:Core/Src/main.c ****   {
 2089              		.loc 1 833 7 is_stmt 0 view .LVU672
 2090 0038 02A9     		add	r1, sp, #8
 2091 003a 0A48     		ldr	r0, .L117
 2092 003c FFF7FEFF 		bl	HAL_TIM_ConfigClockSource
 2093              	.LVL114:
 833:Core/Src/main.c ****   {
 2094              		.loc 1 833 6 view .LVU673
 2095 0040 60B9     		cbnz	r0, .L115
 837:Core/Src/main.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 2096              		.loc 1 837 3 is_stmt 1 view .LVU674
 837:Core/Src/main.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 2097              		.loc 1 837 37 is_stmt 0 view .LVU675
 2098 0042 0023     		movs	r3, #0
 2099 0044 0093     		str	r3, [sp]
 838:Core/Src/main.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 2100              		.loc 1 838 3 is_stmt 1 view .LVU676
 838:Core/Src/main.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 2101              		.loc 1 838 33 is_stmt 0 view .LVU677
ARM GAS  C:\Temp\cc4ZtMPR.s 			page 71


 2102 0046 0193     		str	r3, [sp, #4]
 839:Core/Src/main.c ****   {
 2103              		.loc 1 839 3 is_stmt 1 view .LVU678
 839:Core/Src/main.c ****   {
 2104              		.loc 1 839 7 is_stmt 0 view .LVU679
 2105 0048 6946     		mov	r1, sp
 2106 004a 0648     		ldr	r0, .L117
 2107 004c FFF7FEFF 		bl	HAL_TIMEx_MasterConfigSynchronization
 2108              	.LVL115:
 839:Core/Src/main.c ****   {
 2109              		.loc 1 839 6 view .LVU680
 2110 0050 30B9     		cbnz	r0, .L116
 847:Core/Src/main.c **** 
 2111              		.loc 1 847 1 view .LVU681
 2112 0052 07B0     		add	sp, sp, #28
 2113              		.cfi_remember_state
 2114              		.cfi_def_cfa_offset 4
 2115              		@ sp needed
 2116 0054 5DF804FB 		ldr	pc, [sp], #4
 2117              	.L114:
 2118              		.cfi_restore_state
 830:Core/Src/main.c ****   }
 2119              		.loc 1 830 5 is_stmt 1 view .LVU682
 2120 0058 FFF7FEFF 		bl	Error_Handler
 2121              	.LVL116:
 2122              	.L115:
 835:Core/Src/main.c ****   }
 2123              		.loc 1 835 5 view .LVU683
 2124 005c FFF7FEFF 		bl	Error_Handler
 2125              	.LVL117:
 2126              	.L116:
 841:Core/Src/main.c ****   }
 2127              		.loc 1 841 5 view .LVU684
 2128 0060 FFF7FEFF 		bl	Error_Handler
 2129              	.LVL118:
 2130              	.L118:
 2131              		.align	2
 2132              	.L117:
 2133 0064 00000000 		.word	htim4
 2134 0068 00080040 		.word	1073743872
 2135              		.cfi_endproc
 2136              	.LFE251:
 2138              		.section	.text.MX_TIM1_Init,"ax",%progbits
 2139              		.align	1
 2140              		.syntax unified
 2141              		.thumb
 2142              		.thumb_func
 2144              	MX_TIM1_Init:
 2145              	.LFB248:
 609:Core/Src/main.c **** 
 2146              		.loc 1 609 1 view -0
 2147              		.cfi_startproc
 2148              		@ args = 0, pretend = 0, frame = 40
 2149              		@ frame_needed = 0, uses_anonymous_args = 0
 2150 0000 00B5     		push	{lr}
 2151              		.cfi_def_cfa_offset 4
 2152              		.cfi_offset 14, -4
ARM GAS  C:\Temp\cc4ZtMPR.s 			page 72


 2153 0002 8BB0     		sub	sp, sp, #44
 2154              		.cfi_def_cfa_offset 48
 615:Core/Src/main.c ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 2155              		.loc 1 615 3 view .LVU686
 615:Core/Src/main.c ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 2156              		.loc 1 615 26 is_stmt 0 view .LVU687
 2157 0004 0023     		movs	r3, #0
 2158 0006 0693     		str	r3, [sp, #24]
 2159 0008 0793     		str	r3, [sp, #28]
 2160 000a 0893     		str	r3, [sp, #32]
 2161 000c 0993     		str	r3, [sp, #36]
 616:Core/Src/main.c ****   TIM_IC_InitTypeDef sConfigIC = {0};
 2162              		.loc 1 616 3 is_stmt 1 view .LVU688
 616:Core/Src/main.c ****   TIM_IC_InitTypeDef sConfigIC = {0};
 2163              		.loc 1 616 27 is_stmt 0 view .LVU689
 2164 000e 0493     		str	r3, [sp, #16]
 2165 0010 0593     		str	r3, [sp, #20]
 617:Core/Src/main.c **** 
 2166              		.loc 1 617 3 is_stmt 1 view .LVU690
 617:Core/Src/main.c **** 
 2167              		.loc 1 617 22 is_stmt 0 view .LVU691
 2168 0012 0093     		str	r3, [sp]
 2169 0014 0193     		str	r3, [sp, #4]
 2170 0016 0293     		str	r3, [sp, #8]
 2171 0018 0393     		str	r3, [sp, #12]
 622:Core/Src/main.c ****   htim1.Init.Prescaler = 0;
 2172              		.loc 1 622 3 is_stmt 1 view .LVU692
 622:Core/Src/main.c ****   htim1.Init.Prescaler = 0;
 2173              		.loc 1 622 18 is_stmt 0 view .LVU693
 2174 001a 2A48     		ldr	r0, .L137
 2175 001c 2A4A     		ldr	r2, .L137+4
 2176 001e 0260     		str	r2, [r0]
 623:Core/Src/main.c ****   htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 2177              		.loc 1 623 3 is_stmt 1 view .LVU694
 623:Core/Src/main.c ****   htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 2178              		.loc 1 623 24 is_stmt 0 view .LVU695
 2179 0020 4360     		str	r3, [r0, #4]
 624:Core/Src/main.c ****   htim1.Init.Period = 65535;
 2180              		.loc 1 624 3 is_stmt 1 view .LVU696
 624:Core/Src/main.c ****   htim1.Init.Period = 65535;
 2181              		.loc 1 624 26 is_stmt 0 view .LVU697
 2182 0022 8360     		str	r3, [r0, #8]
 625:Core/Src/main.c ****   htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 2183              		.loc 1 625 3 is_stmt 1 view .LVU698
 625:Core/Src/main.c ****   htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 2184              		.loc 1 625 21 is_stmt 0 view .LVU699
 2185 0024 4FF6FF72 		movw	r2, #65535
 2186 0028 C260     		str	r2, [r0, #12]
 626:Core/Src/main.c ****   htim1.Init.RepetitionCounter = 0;
 2187              		.loc 1 626 3 is_stmt 1 view .LVU700
 626:Core/Src/main.c ****   htim1.Init.RepetitionCounter = 0;
 2188              		.loc 1 626 28 is_stmt 0 view .LVU701
 2189 002a 0361     		str	r3, [r0, #16]
 627:Core/Src/main.c ****   htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 2190              		.loc 1 627 3 is_stmt 1 view .LVU702
 627:Core/Src/main.c ****   htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 2191              		.loc 1 627 32 is_stmt 0 view .LVU703
ARM GAS  C:\Temp\cc4ZtMPR.s 			page 73


 2192 002c 4361     		str	r3, [r0, #20]
 628:Core/Src/main.c ****   if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 2193              		.loc 1 628 3 is_stmt 1 view .LVU704
 628:Core/Src/main.c ****   if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 2194              		.loc 1 628 32 is_stmt 0 view .LVU705
 2195 002e 8361     		str	r3, [r0, #24]
 629:Core/Src/main.c ****   {
 2196              		.loc 1 629 3 is_stmt 1 view .LVU706
 629:Core/Src/main.c ****   {
 2197              		.loc 1 629 7 is_stmt 0 view .LVU707
 2198 0030 FFF7FEFF 		bl	HAL_TIM_Base_Init
 2199              	.LVL119:
 629:Core/Src/main.c ****   {
 2200              		.loc 1 629 6 view .LVU708
 2201 0034 0028     		cmp	r0, #0
 2202 0036 34D1     		bne	.L129
 633:Core/Src/main.c ****   if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 2203              		.loc 1 633 3 is_stmt 1 view .LVU709
 633:Core/Src/main.c ****   if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 2204              		.loc 1 633 34 is_stmt 0 view .LVU710
 2205 0038 4FF48053 		mov	r3, #4096
 2206 003c 0693     		str	r3, [sp, #24]
 634:Core/Src/main.c ****   {
 2207              		.loc 1 634 3 is_stmt 1 view .LVU711
 634:Core/Src/main.c ****   {
 2208              		.loc 1 634 7 is_stmt 0 view .LVU712
 2209 003e 06A9     		add	r1, sp, #24
 2210 0040 2048     		ldr	r0, .L137
 2211 0042 FFF7FEFF 		bl	HAL_TIM_ConfigClockSource
 2212              	.LVL120:
 634:Core/Src/main.c ****   {
 2213              		.loc 1 634 6 view .LVU713
 2214 0046 70BB     		cbnz	r0, .L130
 638:Core/Src/main.c ****   {
 2215              		.loc 1 638 3 is_stmt 1 view .LVU714
 638:Core/Src/main.c ****   {
 2216              		.loc 1 638 7 is_stmt 0 view .LVU715
 2217 0048 1E48     		ldr	r0, .L137
 2218 004a FFF7FEFF 		bl	HAL_TIM_IC_Init
 2219              	.LVL121:
 638:Core/Src/main.c ****   {
 2220              		.loc 1 638 6 view .LVU716
 2221 004e 60BB     		cbnz	r0, .L131
 642:Core/Src/main.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 2222              		.loc 1 642 3 is_stmt 1 view .LVU717
 642:Core/Src/main.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 2223              		.loc 1 642 37 is_stmt 0 view .LVU718
 2224 0050 0023     		movs	r3, #0
 2225 0052 0493     		str	r3, [sp, #16]
 643:Core/Src/main.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 2226              		.loc 1 643 3 is_stmt 1 view .LVU719
 643:Core/Src/main.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 2227              		.loc 1 643 33 is_stmt 0 view .LVU720
 2228 0054 0593     		str	r3, [sp, #20]
 644:Core/Src/main.c ****   {
 2229              		.loc 1 644 3 is_stmt 1 view .LVU721
 644:Core/Src/main.c ****   {
ARM GAS  C:\Temp\cc4ZtMPR.s 			page 74


 2230              		.loc 1 644 7 is_stmt 0 view .LVU722
 2231 0056 04A9     		add	r1, sp, #16
 2232 0058 1A48     		ldr	r0, .L137
 2233 005a FFF7FEFF 		bl	HAL_TIMEx_MasterConfigSynchronization
 2234              	.LVL122:
 644:Core/Src/main.c ****   {
 2235              		.loc 1 644 6 view .LVU723
 2236 005e 30BB     		cbnz	r0, .L132
 648:Core/Src/main.c ****   sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 2237              		.loc 1 648 3 is_stmt 1 view .LVU724
 648:Core/Src/main.c ****   sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 2238              		.loc 1 648 24 is_stmt 0 view .LVU725
 2239 0060 0A23     		movs	r3, #10
 2240 0062 0093     		str	r3, [sp]
 649:Core/Src/main.c ****   sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 2241              		.loc 1 649 3 is_stmt 1 view .LVU726
 649:Core/Src/main.c ****   sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 2242              		.loc 1 649 25 is_stmt 0 view .LVU727
 2243 0064 0123     		movs	r3, #1
 2244 0066 0193     		str	r3, [sp, #4]
 650:Core/Src/main.c ****   sConfigIC.ICFilter = 0;
 2245              		.loc 1 650 3 is_stmt 1 view .LVU728
 650:Core/Src/main.c ****   sConfigIC.ICFilter = 0;
 2246              		.loc 1 650 25 is_stmt 0 view .LVU729
 2247 0068 0022     		movs	r2, #0
 2248 006a 0292     		str	r2, [sp, #8]
 651:Core/Src/main.c ****   if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 2249              		.loc 1 651 3 is_stmt 1 view .LVU730
 651:Core/Src/main.c ****   if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 2250              		.loc 1 651 22 is_stmt 0 view .LVU731
 2251 006c 0392     		str	r2, [sp, #12]
 652:Core/Src/main.c ****   {
 2252              		.loc 1 652 3 is_stmt 1 view .LVU732
 652:Core/Src/main.c ****   {
 2253              		.loc 1 652 7 is_stmt 0 view .LVU733
 2254 006e 6946     		mov	r1, sp
 2255 0070 1448     		ldr	r0, .L137
 2256 0072 FFF7FEFF 		bl	HAL_TIM_IC_ConfigChannel
 2257              	.LVL123:
 652:Core/Src/main.c ****   {
 2258              		.loc 1 652 6 view .LVU734
 2259 0076 E0B9     		cbnz	r0, .L133
 656:Core/Src/main.c ****   {
 2260              		.loc 1 656 3 is_stmt 1 view .LVU735
 656:Core/Src/main.c ****   {
 2261              		.loc 1 656 7 is_stmt 0 view .LVU736
 2262 0078 0422     		movs	r2, #4
 2263 007a 6946     		mov	r1, sp
 2264 007c 1148     		ldr	r0, .L137
 2265 007e FFF7FEFF 		bl	HAL_TIM_IC_ConfigChannel
 2266              	.LVL124:
 656:Core/Src/main.c ****   {
 2267              		.loc 1 656 6 view .LVU737
 2268 0082 C0B9     		cbnz	r0, .L134
 660:Core/Src/main.c ****   {
 2269              		.loc 1 660 3 is_stmt 1 view .LVU738
 660:Core/Src/main.c ****   {
ARM GAS  C:\Temp\cc4ZtMPR.s 			page 75


 2270              		.loc 1 660 7 is_stmt 0 view .LVU739
 2271 0084 0822     		movs	r2, #8
 2272 0086 6946     		mov	r1, sp
 2273 0088 0E48     		ldr	r0, .L137
 2274 008a FFF7FEFF 		bl	HAL_TIM_IC_ConfigChannel
 2275              	.LVL125:
 660:Core/Src/main.c ****   {
 2276              		.loc 1 660 6 view .LVU740
 2277 008e A0B9     		cbnz	r0, .L135
 664:Core/Src/main.c ****   {
 2278              		.loc 1 664 3 is_stmt 1 view .LVU741
 664:Core/Src/main.c ****   {
 2279              		.loc 1 664 7 is_stmt 0 view .LVU742
 2280 0090 0C22     		movs	r2, #12
 2281 0092 6946     		mov	r1, sp
 2282 0094 0B48     		ldr	r0, .L137
 2283 0096 FFF7FEFF 		bl	HAL_TIM_IC_ConfigChannel
 2284              	.LVL126:
 664:Core/Src/main.c ****   {
 2285              		.loc 1 664 6 view .LVU743
 2286 009a 80B9     		cbnz	r0, .L136
 672:Core/Src/main.c **** 
 2287              		.loc 1 672 1 view .LVU744
 2288 009c 0BB0     		add	sp, sp, #44
 2289              		.cfi_remember_state
 2290              		.cfi_def_cfa_offset 4
 2291              		@ sp needed
 2292 009e 5DF804FB 		ldr	pc, [sp], #4
 2293              	.L129:
 2294              		.cfi_restore_state
 631:Core/Src/main.c ****   }
 2295              		.loc 1 631 5 is_stmt 1 view .LVU745
 2296 00a2 FFF7FEFF 		bl	Error_Handler
 2297              	.LVL127:
 2298              	.L130:
 636:Core/Src/main.c ****   }
 2299              		.loc 1 636 5 view .LVU746
 2300 00a6 FFF7FEFF 		bl	Error_Handler
 2301              	.LVL128:
 2302              	.L131:
 640:Core/Src/main.c ****   }
 2303              		.loc 1 640 5 view .LVU747
 2304 00aa FFF7FEFF 		bl	Error_Handler
 2305              	.LVL129:
 2306              	.L132:
 646:Core/Src/main.c ****   }
 2307              		.loc 1 646 5 view .LVU748
 2308 00ae FFF7FEFF 		bl	Error_Handler
 2309              	.LVL130:
 2310              	.L133:
 654:Core/Src/main.c ****   }
 2311              		.loc 1 654 5 view .LVU749
 2312 00b2 FFF7FEFF 		bl	Error_Handler
 2313              	.LVL131:
 2314              	.L134:
 658:Core/Src/main.c ****   }
 2315              		.loc 1 658 5 view .LVU750
ARM GAS  C:\Temp\cc4ZtMPR.s 			page 76


 2316 00b6 FFF7FEFF 		bl	Error_Handler
 2317              	.LVL132:
 2318              	.L135:
 662:Core/Src/main.c ****   }
 2319              		.loc 1 662 5 view .LVU751
 2320 00ba FFF7FEFF 		bl	Error_Handler
 2321              	.LVL133:
 2322              	.L136:
 666:Core/Src/main.c ****   }
 2323              		.loc 1 666 5 view .LVU752
 2324 00be FFF7FEFF 		bl	Error_Handler
 2325              	.LVL134:
 2326              	.L138:
 2327 00c2 00BF     		.align	2
 2328              	.L137:
 2329 00c4 00000000 		.word	htim1
 2330 00c8 00000140 		.word	1073807360
 2331              		.cfi_endproc
 2332              	.LFE248:
 2334              		.section	.text.MX_TIM3_Init,"ax",%progbits
 2335              		.align	1
 2336              		.syntax unified
 2337              		.thumb
 2338              		.thumb_func
 2340              	MX_TIM3_Init:
 2341              	.LFB250:
 739:Core/Src/main.c **** 
 2342              		.loc 1 739 1 view -0
 2343              		.cfi_startproc
 2344              		@ args = 0, pretend = 0, frame = 56
 2345              		@ frame_needed = 0, uses_anonymous_args = 0
 2346 0000 00B5     		push	{lr}
 2347              		.cfi_def_cfa_offset 4
 2348              		.cfi_offset 14, -4
 2349 0002 8FB0     		sub	sp, sp, #60
 2350              		.cfi_def_cfa_offset 64
 745:Core/Src/main.c ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 2351              		.loc 1 745 3 view .LVU754
 745:Core/Src/main.c ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 2352              		.loc 1 745 26 is_stmt 0 view .LVU755
 2353 0004 0023     		movs	r3, #0
 2354 0006 0A93     		str	r3, [sp, #40]
 2355 0008 0B93     		str	r3, [sp, #44]
 2356 000a 0C93     		str	r3, [sp, #48]
 2357 000c 0D93     		str	r3, [sp, #52]
 746:Core/Src/main.c ****   TIM_OC_InitTypeDef sConfigOC = {0};
 2358              		.loc 1 746 3 is_stmt 1 view .LVU756
 746:Core/Src/main.c ****   TIM_OC_InitTypeDef sConfigOC = {0};
 2359              		.loc 1 746 27 is_stmt 0 view .LVU757
 2360 000e 0893     		str	r3, [sp, #32]
 2361 0010 0993     		str	r3, [sp, #36]
 747:Core/Src/main.c **** 
 2362              		.loc 1 747 3 is_stmt 1 view .LVU758
 747:Core/Src/main.c **** 
 2363              		.loc 1 747 22 is_stmt 0 view .LVU759
 2364 0012 0193     		str	r3, [sp, #4]
 2365 0014 0293     		str	r3, [sp, #8]
ARM GAS  C:\Temp\cc4ZtMPR.s 			page 77


 2366 0016 0393     		str	r3, [sp, #12]
 2367 0018 0493     		str	r3, [sp, #16]
 2368 001a 0593     		str	r3, [sp, #20]
 2369 001c 0693     		str	r3, [sp, #24]
 2370 001e 0793     		str	r3, [sp, #28]
 752:Core/Src/main.c ****   htim3.Init.Prescaler = 83;
 2371              		.loc 1 752 3 is_stmt 1 view .LVU760
 752:Core/Src/main.c ****   htim3.Init.Prescaler = 83;
 2372              		.loc 1 752 18 is_stmt 0 view .LVU761
 2373 0020 2C48     		ldr	r0, .L157
 2374 0022 2D4A     		ldr	r2, .L157+4
 2375 0024 0260     		str	r2, [r0]
 753:Core/Src/main.c ****   htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 2376              		.loc 1 753 3 is_stmt 1 view .LVU762
 753:Core/Src/main.c ****   htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 2377              		.loc 1 753 24 is_stmt 0 view .LVU763
 2378 0026 5322     		movs	r2, #83
 2379 0028 4260     		str	r2, [r0, #4]
 754:Core/Src/main.c ****   htim3.Init.Period = 20000-1;
 2380              		.loc 1 754 3 is_stmt 1 view .LVU764
 754:Core/Src/main.c ****   htim3.Init.Period = 20000-1;
 2381              		.loc 1 754 26 is_stmt 0 view .LVU765
 2382 002a 8360     		str	r3, [r0, #8]
 755:Core/Src/main.c ****   htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 2383              		.loc 1 755 3 is_stmt 1 view .LVU766
 755:Core/Src/main.c ****   htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 2384              		.loc 1 755 21 is_stmt 0 view .LVU767
 2385 002c 44F61F62 		movw	r2, #19999
 2386 0030 C260     		str	r2, [r0, #12]
 756:Core/Src/main.c ****   htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 2387              		.loc 1 756 3 is_stmt 1 view .LVU768
 756:Core/Src/main.c ****   htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 2388              		.loc 1 756 28 is_stmt 0 view .LVU769
 2389 0032 0361     		str	r3, [r0, #16]
 757:Core/Src/main.c ****   if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 2390              		.loc 1 757 3 is_stmt 1 view .LVU770
 757:Core/Src/main.c ****   if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 2391              		.loc 1 757 32 is_stmt 0 view .LVU771
 2392 0034 8023     		movs	r3, #128
 2393 0036 8361     		str	r3, [r0, #24]
 758:Core/Src/main.c ****   {
 2394              		.loc 1 758 3 is_stmt 1 view .LVU772
 758:Core/Src/main.c ****   {
 2395              		.loc 1 758 7 is_stmt 0 view .LVU773
 2396 0038 FFF7FEFF 		bl	HAL_TIM_Base_Init
 2397              	.LVL135:
 758:Core/Src/main.c ****   {
 2398              		.loc 1 758 6 view .LVU774
 2399 003c 0028     		cmp	r0, #0
 2400 003e 39D1     		bne	.L149
 762:Core/Src/main.c ****   if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 2401              		.loc 1 762 3 is_stmt 1 view .LVU775
 762:Core/Src/main.c ****   if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 2402              		.loc 1 762 34 is_stmt 0 view .LVU776
 2403 0040 4FF48053 		mov	r3, #4096
 2404 0044 0A93     		str	r3, [sp, #40]
 763:Core/Src/main.c ****   {
ARM GAS  C:\Temp\cc4ZtMPR.s 			page 78


 2405              		.loc 1 763 3 is_stmt 1 view .LVU777
 763:Core/Src/main.c ****   {
 2406              		.loc 1 763 7 is_stmt 0 view .LVU778
 2407 0046 0AA9     		add	r1, sp, #40
 2408 0048 2248     		ldr	r0, .L157
 2409 004a FFF7FEFF 		bl	HAL_TIM_ConfigClockSource
 2410              	.LVL136:
 763:Core/Src/main.c ****   {
 2411              		.loc 1 763 6 view .LVU779
 2412 004e 0028     		cmp	r0, #0
 2413 0050 32D1     		bne	.L150
 767:Core/Src/main.c ****   {
 2414              		.loc 1 767 3 is_stmt 1 view .LVU780
 767:Core/Src/main.c ****   {
 2415              		.loc 1 767 7 is_stmt 0 view .LVU781
 2416 0052 2048     		ldr	r0, .L157
 2417 0054 FFF7FEFF 		bl	HAL_TIM_PWM_Init
 2418              	.LVL137:
 767:Core/Src/main.c ****   {
 2419              		.loc 1 767 6 view .LVU782
 2420 0058 0028     		cmp	r0, #0
 2421 005a 2FD1     		bne	.L151
 771:Core/Src/main.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 2422              		.loc 1 771 3 is_stmt 1 view .LVU783
 771:Core/Src/main.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 2423              		.loc 1 771 37 is_stmt 0 view .LVU784
 2424 005c 0023     		movs	r3, #0
 2425 005e 0893     		str	r3, [sp, #32]
 772:Core/Src/main.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 2426              		.loc 1 772 3 is_stmt 1 view .LVU785
 772:Core/Src/main.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 2427              		.loc 1 772 33 is_stmt 0 view .LVU786
 2428 0060 0993     		str	r3, [sp, #36]
 773:Core/Src/main.c ****   {
 2429              		.loc 1 773 3 is_stmt 1 view .LVU787
 773:Core/Src/main.c ****   {
 2430              		.loc 1 773 7 is_stmt 0 view .LVU788
 2431 0062 08A9     		add	r1, sp, #32
 2432 0064 1B48     		ldr	r0, .L157
 2433 0066 FFF7FEFF 		bl	HAL_TIMEx_MasterConfigSynchronization
 2434              	.LVL138:
 773:Core/Src/main.c ****   {
 2435              		.loc 1 773 6 view .LVU789
 2436 006a 48BB     		cbnz	r0, .L152
 777:Core/Src/main.c ****   sConfigOC.Pulse = 0;
 2437              		.loc 1 777 3 is_stmt 1 view .LVU790
 777:Core/Src/main.c ****   sConfigOC.Pulse = 0;
 2438              		.loc 1 777 20 is_stmt 0 view .LVU791
 2439 006c 6023     		movs	r3, #96
 2440 006e 0193     		str	r3, [sp, #4]
 778:Core/Src/main.c ****   sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 2441              		.loc 1 778 3 is_stmt 1 view .LVU792
 778:Core/Src/main.c ****   sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 2442              		.loc 1 778 19 is_stmt 0 view .LVU793
 2443 0070 0022     		movs	r2, #0
 2444 0072 0292     		str	r2, [sp, #8]
 779:Core/Src/main.c ****   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
ARM GAS  C:\Temp\cc4ZtMPR.s 			page 79


 2445              		.loc 1 779 3 is_stmt 1 view .LVU794
 779:Core/Src/main.c ****   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 2446              		.loc 1 779 24 is_stmt 0 view .LVU795
 2447 0074 0392     		str	r2, [sp, #12]
 780:Core/Src/main.c ****   if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 2448              		.loc 1 780 3 is_stmt 1 view .LVU796
 780:Core/Src/main.c ****   if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 2449              		.loc 1 780 24 is_stmt 0 view .LVU797
 2450 0076 0592     		str	r2, [sp, #20]
 781:Core/Src/main.c ****   {
 2451              		.loc 1 781 3 is_stmt 1 view .LVU798
 781:Core/Src/main.c ****   {
 2452              		.loc 1 781 7 is_stmt 0 view .LVU799
 2453 0078 01A9     		add	r1, sp, #4
 2454 007a 1648     		ldr	r0, .L157
 2455 007c FFF7FEFF 		bl	HAL_TIM_PWM_ConfigChannel
 2456              	.LVL139:
 781:Core/Src/main.c ****   {
 2457              		.loc 1 781 6 view .LVU800
 2458 0080 00BB     		cbnz	r0, .L153
 785:Core/Src/main.c ****   {
 2459              		.loc 1 785 3 is_stmt 1 view .LVU801
 785:Core/Src/main.c ****   {
 2460              		.loc 1 785 7 is_stmt 0 view .LVU802
 2461 0082 0422     		movs	r2, #4
 2462 0084 0DEB0201 		add	r1, sp, r2
 2463 0088 1248     		ldr	r0, .L157
 2464 008a FFF7FEFF 		bl	HAL_TIM_PWM_ConfigChannel
 2465              	.LVL140:
 785:Core/Src/main.c ****   {
 2466              		.loc 1 785 6 view .LVU803
 2467 008e D8B9     		cbnz	r0, .L154
 789:Core/Src/main.c ****   {
 2468              		.loc 1 789 3 is_stmt 1 view .LVU804
 789:Core/Src/main.c ****   {
 2469              		.loc 1 789 7 is_stmt 0 view .LVU805
 2470 0090 0822     		movs	r2, #8
 2471 0092 01A9     		add	r1, sp, #4
 2472 0094 0F48     		ldr	r0, .L157
 2473 0096 FFF7FEFF 		bl	HAL_TIM_PWM_ConfigChannel
 2474              	.LVL141:
 789:Core/Src/main.c ****   {
 2475              		.loc 1 789 6 view .LVU806
 2476 009a B8B9     		cbnz	r0, .L155
 793:Core/Src/main.c ****   {
 2477              		.loc 1 793 3 is_stmt 1 view .LVU807
 793:Core/Src/main.c ****   {
 2478              		.loc 1 793 7 is_stmt 0 view .LVU808
 2479 009c 0C22     		movs	r2, #12
 2480 009e 01A9     		add	r1, sp, #4
 2481 00a0 0C48     		ldr	r0, .L157
 2482 00a2 FFF7FEFF 		bl	HAL_TIM_PWM_ConfigChannel
 2483              	.LVL142:
 793:Core/Src/main.c ****   {
 2484              		.loc 1 793 6 view .LVU809
 2485 00a6 98B9     		cbnz	r0, .L156
 800:Core/Src/main.c **** 
ARM GAS  C:\Temp\cc4ZtMPR.s 			page 80


 2486              		.loc 1 800 3 is_stmt 1 view .LVU810
 2487 00a8 0A48     		ldr	r0, .L157
 2488 00aa FFF7FEFF 		bl	HAL_TIM_MspPostInit
 2489              	.LVL143:
 802:Core/Src/main.c **** 
 2490              		.loc 1 802 1 is_stmt 0 view .LVU811
 2491 00ae 0FB0     		add	sp, sp, #60
 2492              		.cfi_remember_state
 2493              		.cfi_def_cfa_offset 4
 2494              		@ sp needed
 2495 00b0 5DF804FB 		ldr	pc, [sp], #4
 2496              	.L149:
 2497              		.cfi_restore_state
 760:Core/Src/main.c ****   }
 2498              		.loc 1 760 5 is_stmt 1 view .LVU812
 2499 00b4 FFF7FEFF 		bl	Error_Handler
 2500              	.LVL144:
 2501              	.L150:
 765:Core/Src/main.c ****   }
 2502              		.loc 1 765 5 view .LVU813
 2503 00b8 FFF7FEFF 		bl	Error_Handler
 2504              	.LVL145:
 2505              	.L151:
 769:Core/Src/main.c ****   }
 2506              		.loc 1 769 5 view .LVU814
 2507 00bc FFF7FEFF 		bl	Error_Handler
 2508              	.LVL146:
 2509              	.L152:
 775:Core/Src/main.c ****   }
 2510              		.loc 1 775 5 view .LVU815
 2511 00c0 FFF7FEFF 		bl	Error_Handler
 2512              	.LVL147:
 2513              	.L153:
 783:Core/Src/main.c ****   }
 2514              		.loc 1 783 5 view .LVU816
 2515 00c4 FFF7FEFF 		bl	Error_Handler
 2516              	.LVL148:
 2517              	.L154:
 787:Core/Src/main.c ****   }
 2518              		.loc 1 787 5 view .LVU817
 2519 00c8 FFF7FEFF 		bl	Error_Handler
 2520              	.LVL149:
 2521              	.L155:
 791:Core/Src/main.c ****   }
 2522              		.loc 1 791 5 view .LVU818
 2523 00cc FFF7FEFF 		bl	Error_Handler
 2524              	.LVL150:
 2525              	.L156:
 795:Core/Src/main.c ****   }
 2526              		.loc 1 795 5 view .LVU819
 2527 00d0 FFF7FEFF 		bl	Error_Handler
 2528              	.LVL151:
 2529              	.L158:
 2530              		.align	2
 2531              	.L157:
 2532 00d4 00000000 		.word	htim3
 2533 00d8 00040040 		.word	1073742848
ARM GAS  C:\Temp\cc4ZtMPR.s 			page 81


 2534              		.cfi_endproc
 2535              	.LFE250:
 2537              		.section	.text.MX_TIM5_Init,"ax",%progbits
 2538              		.align	1
 2539              		.syntax unified
 2540              		.thumb
 2541              		.thumb_func
 2543              	MX_TIM5_Init:
 2544              	.LFB252:
 855:Core/Src/main.c **** 
 2545              		.loc 1 855 1 view -0
 2546              		.cfi_startproc
 2547              		@ args = 0, pretend = 0, frame = 24
 2548              		@ frame_needed = 0, uses_anonymous_args = 0
 2549 0000 00B5     		push	{lr}
 2550              		.cfi_def_cfa_offset 4
 2551              		.cfi_offset 14, -4
 2552 0002 87B0     		sub	sp, sp, #28
 2553              		.cfi_def_cfa_offset 32
 861:Core/Src/main.c ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 2554              		.loc 1 861 3 view .LVU821
 861:Core/Src/main.c ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 2555              		.loc 1 861 26 is_stmt 0 view .LVU822
 2556 0004 0023     		movs	r3, #0
 2557 0006 0293     		str	r3, [sp, #8]
 2558 0008 0393     		str	r3, [sp, #12]
 2559 000a 0493     		str	r3, [sp, #16]
 2560 000c 0593     		str	r3, [sp, #20]
 862:Core/Src/main.c **** 
 2561              		.loc 1 862 3 is_stmt 1 view .LVU823
 862:Core/Src/main.c **** 
 2562              		.loc 1 862 27 is_stmt 0 view .LVU824
 2563 000e 0093     		str	r3, [sp]
 2564 0010 0193     		str	r3, [sp, #4]
 867:Core/Src/main.c ****   htim5.Init.Prescaler = (8400/3/60)-1;
 2565              		.loc 1 867 3 is_stmt 1 view .LVU825
 867:Core/Src/main.c ****   htim5.Init.Prescaler = (8400/3/60)-1;
 2566              		.loc 1 867 18 is_stmt 0 view .LVU826
 2567 0012 1348     		ldr	r0, .L167
 2568 0014 134A     		ldr	r2, .L167+4
 2569 0016 0260     		str	r2, [r0]
 868:Core/Src/main.c ****   htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 2570              		.loc 1 868 3 is_stmt 1 view .LVU827
 868:Core/Src/main.c ****   htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 2571              		.loc 1 868 24 is_stmt 0 view .LVU828
 2572 0018 2D22     		movs	r2, #45
 2573 001a 4260     		str	r2, [r0, #4]
 869:Core/Src/main.c ****   htim5.Init.Period = 10000-1;
 2574              		.loc 1 869 3 is_stmt 1 view .LVU829
 869:Core/Src/main.c ****   htim5.Init.Period = 10000-1;
 2575              		.loc 1 869 26 is_stmt 0 view .LVU830
 2576 001c 8360     		str	r3, [r0, #8]
 870:Core/Src/main.c ****   htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 2577              		.loc 1 870 3 is_stmt 1 view .LVU831
 870:Core/Src/main.c ****   htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 2578              		.loc 1 870 21 is_stmt 0 view .LVU832
 2579 001e 42F20F72 		movw	r2, #9999
ARM GAS  C:\Temp\cc4ZtMPR.s 			page 82


 2580 0022 C260     		str	r2, [r0, #12]
 871:Core/Src/main.c ****   htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 2581              		.loc 1 871 3 is_stmt 1 view .LVU833
 871:Core/Src/main.c ****   htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 2582              		.loc 1 871 28 is_stmt 0 view .LVU834
 2583 0024 0361     		str	r3, [r0, #16]
 872:Core/Src/main.c ****   if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 2584              		.loc 1 872 3 is_stmt 1 view .LVU835
 872:Core/Src/main.c ****   if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 2585              		.loc 1 872 32 is_stmt 0 view .LVU836
 2586 0026 8361     		str	r3, [r0, #24]
 873:Core/Src/main.c ****   {
 2587              		.loc 1 873 3 is_stmt 1 view .LVU837
 873:Core/Src/main.c ****   {
 2588              		.loc 1 873 7 is_stmt 0 view .LVU838
 2589 0028 FFF7FEFF 		bl	HAL_TIM_Base_Init
 2590              	.LVL152:
 873:Core/Src/main.c ****   {
 2591              		.loc 1 873 6 view .LVU839
 2592 002c 90B9     		cbnz	r0, .L164
 877:Core/Src/main.c ****   if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 2593              		.loc 1 877 3 is_stmt 1 view .LVU840
 877:Core/Src/main.c ****   if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 2594              		.loc 1 877 34 is_stmt 0 view .LVU841
 2595 002e 4FF48053 		mov	r3, #4096
 2596 0032 0293     		str	r3, [sp, #8]
 878:Core/Src/main.c ****   {
 2597              		.loc 1 878 3 is_stmt 1 view .LVU842
 878:Core/Src/main.c ****   {
 2598              		.loc 1 878 7 is_stmt 0 view .LVU843
 2599 0034 02A9     		add	r1, sp, #8
 2600 0036 0A48     		ldr	r0, .L167
 2601 0038 FFF7FEFF 		bl	HAL_TIM_ConfigClockSource
 2602              	.LVL153:
 878:Core/Src/main.c ****   {
 2603              		.loc 1 878 6 view .LVU844
 2604 003c 60B9     		cbnz	r0, .L165
 882:Core/Src/main.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 2605              		.loc 1 882 3 is_stmt 1 view .LVU845
 882:Core/Src/main.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 2606              		.loc 1 882 37 is_stmt 0 view .LVU846
 2607 003e 0023     		movs	r3, #0
 2608 0040 0093     		str	r3, [sp]
 883:Core/Src/main.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 2609              		.loc 1 883 3 is_stmt 1 view .LVU847
 883:Core/Src/main.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 2610              		.loc 1 883 33 is_stmt 0 view .LVU848
 2611 0042 0193     		str	r3, [sp, #4]
 884:Core/Src/main.c ****   {
 2612              		.loc 1 884 3 is_stmt 1 view .LVU849
 884:Core/Src/main.c ****   {
 2613              		.loc 1 884 7 is_stmt 0 view .LVU850
 2614 0044 6946     		mov	r1, sp
 2615 0046 0648     		ldr	r0, .L167
 2616 0048 FFF7FEFF 		bl	HAL_TIMEx_MasterConfigSynchronization
 2617              	.LVL154:
 884:Core/Src/main.c ****   {
ARM GAS  C:\Temp\cc4ZtMPR.s 			page 83


 2618              		.loc 1 884 6 view .LVU851
 2619 004c 30B9     		cbnz	r0, .L166
 892:Core/Src/main.c **** 
 2620              		.loc 1 892 1 view .LVU852
 2621 004e 07B0     		add	sp, sp, #28
 2622              		.cfi_remember_state
 2623              		.cfi_def_cfa_offset 4
 2624              		@ sp needed
 2625 0050 5DF804FB 		ldr	pc, [sp], #4
 2626              	.L164:
 2627              		.cfi_restore_state
 875:Core/Src/main.c ****   }
 2628              		.loc 1 875 5 is_stmt 1 view .LVU853
 2629 0054 FFF7FEFF 		bl	Error_Handler
 2630              	.LVL155:
 2631              	.L165:
 880:Core/Src/main.c ****   }
 2632              		.loc 1 880 5 view .LVU854
 2633 0058 FFF7FEFF 		bl	Error_Handler
 2634              	.LVL156:
 2635              	.L166:
 886:Core/Src/main.c ****   }
 2636              		.loc 1 886 5 view .LVU855
 2637 005c FFF7FEFF 		bl	Error_Handler
 2638              	.LVL157:
 2639              	.L168:
 2640              		.align	2
 2641              	.L167:
 2642 0060 00000000 		.word	htim5
 2643 0064 000C0040 		.word	1073744896
 2644              		.cfi_endproc
 2645              	.LFE252:
 2647              		.section	.text.MX_UART4_Init,"ax",%progbits
 2648              		.align	1
 2649              		.syntax unified
 2650              		.thumb
 2651              		.thumb_func
 2653              	MX_UART4_Init:
 2654              	.LFB257:
1056:Core/Src/main.c **** 
 2655              		.loc 1 1056 1 view -0
 2656              		.cfi_startproc
 2657              		@ args = 0, pretend = 0, frame = 0
 2658              		@ frame_needed = 0, uses_anonymous_args = 0
 2659 0000 08B5     		push	{r3, lr}
 2660              		.cfi_def_cfa_offset 8
 2661              		.cfi_offset 3, -8
 2662              		.cfi_offset 14, -4
1065:Core/Src/main.c ****   huart4.Init.BaudRate = 115200;
 2663              		.loc 1 1065 3 view .LVU857
1065:Core/Src/main.c ****   huart4.Init.BaudRate = 115200;
 2664              		.loc 1 1065 19 is_stmt 0 view .LVU858
 2665 0002 0A48     		ldr	r0, .L173
 2666 0004 0A4B     		ldr	r3, .L173+4
 2667 0006 0360     		str	r3, [r0]
1066:Core/Src/main.c ****   huart4.Init.WordLength = UART_WORDLENGTH_8B;
 2668              		.loc 1 1066 3 is_stmt 1 view .LVU859
ARM GAS  C:\Temp\cc4ZtMPR.s 			page 84


1066:Core/Src/main.c ****   huart4.Init.WordLength = UART_WORDLENGTH_8B;
 2669              		.loc 1 1066 24 is_stmt 0 view .LVU860
 2670 0008 4FF4E133 		mov	r3, #115200
 2671 000c 4360     		str	r3, [r0, #4]
1067:Core/Src/main.c ****   huart4.Init.StopBits = UART_STOPBITS_1;
 2672              		.loc 1 1067 3 is_stmt 1 view .LVU861
1067:Core/Src/main.c ****   huart4.Init.StopBits = UART_STOPBITS_1;
 2673              		.loc 1 1067 26 is_stmt 0 view .LVU862
 2674 000e 0023     		movs	r3, #0
 2675 0010 8360     		str	r3, [r0, #8]
1068:Core/Src/main.c ****   huart4.Init.Parity = UART_PARITY_NONE;
 2676              		.loc 1 1068 3 is_stmt 1 view .LVU863
1068:Core/Src/main.c ****   huart4.Init.Parity = UART_PARITY_NONE;
 2677              		.loc 1 1068 24 is_stmt 0 view .LVU864
 2678 0012 C360     		str	r3, [r0, #12]
1069:Core/Src/main.c ****   huart4.Init.Mode = UART_MODE_TX_RX;
 2679              		.loc 1 1069 3 is_stmt 1 view .LVU865
1069:Core/Src/main.c ****   huart4.Init.Mode = UART_MODE_TX_RX;
 2680              		.loc 1 1069 22 is_stmt 0 view .LVU866
 2681 0014 0361     		str	r3, [r0, #16]
1070:Core/Src/main.c ****   huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 2682              		.loc 1 1070 3 is_stmt 1 view .LVU867
1070:Core/Src/main.c ****   huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 2683              		.loc 1 1070 20 is_stmt 0 view .LVU868
 2684 0016 0C22     		movs	r2, #12
 2685 0018 4261     		str	r2, [r0, #20]
1071:Core/Src/main.c ****   huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 2686              		.loc 1 1071 3 is_stmt 1 view .LVU869
1071:Core/Src/main.c ****   huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 2687              		.loc 1 1071 25 is_stmt 0 view .LVU870
 2688 001a 8361     		str	r3, [r0, #24]
1072:Core/Src/main.c ****   if (HAL_UART_Init(&huart4) != HAL_OK)
 2689              		.loc 1 1072 3 is_stmt 1 view .LVU871
1072:Core/Src/main.c ****   if (HAL_UART_Init(&huart4) != HAL_OK)
 2690              		.loc 1 1072 28 is_stmt 0 view .LVU872
 2691 001c C361     		str	r3, [r0, #28]
1073:Core/Src/main.c ****   {
 2692              		.loc 1 1073 3 is_stmt 1 view .LVU873
1073:Core/Src/main.c ****   {
 2693              		.loc 1 1073 7 is_stmt 0 view .LVU874
 2694 001e FFF7FEFF 		bl	HAL_UART_Init
 2695              	.LVL158:
1073:Core/Src/main.c ****   {
 2696              		.loc 1 1073 6 view .LVU875
 2697 0022 00B9     		cbnz	r0, .L172
1081:Core/Src/main.c **** 
 2698              		.loc 1 1081 1 view .LVU876
 2699 0024 08BD     		pop	{r3, pc}
 2700              	.L172:
1075:Core/Src/main.c ****   }
 2701              		.loc 1 1075 5 is_stmt 1 view .LVU877
 2702 0026 FFF7FEFF 		bl	Error_Handler
 2703              	.LVL159:
 2704              	.L174:
 2705 002a 00BF     		.align	2
 2706              	.L173:
 2707 002c 00000000 		.word	huart4
ARM GAS  C:\Temp\cc4ZtMPR.s 			page 85


 2708 0030 004C0040 		.word	1073761280
 2709              		.cfi_endproc
 2710              	.LFE257:
 2712              		.section	.text.MX_TIM14_Init,"ax",%progbits
 2713              		.align	1
 2714              		.syntax unified
 2715              		.thumb
 2716              		.thumb_func
 2718              	MX_TIM14_Init:
 2719              	.LFB256:
1025:Core/Src/main.c **** 
 2720              		.loc 1 1025 1 view -0
 2721              		.cfi_startproc
 2722              		@ args = 0, pretend = 0, frame = 0
 2723              		@ frame_needed = 0, uses_anonymous_args = 0
 2724 0000 08B5     		push	{r3, lr}
 2725              		.cfi_def_cfa_offset 8
 2726              		.cfi_offset 3, -8
 2727              		.cfi_offset 14, -4
1034:Core/Src/main.c ****   htim14.Init.Prescaler = 8400-1;
 2728              		.loc 1 1034 3 view .LVU879
1034:Core/Src/main.c ****   htim14.Init.Prescaler = 8400-1;
 2729              		.loc 1 1034 19 is_stmt 0 view .LVU880
 2730 0002 0A48     		ldr	r0, .L179
 2731 0004 0A4B     		ldr	r3, .L179+4
 2732 0006 0360     		str	r3, [r0]
1035:Core/Src/main.c ****   htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 2733              		.loc 1 1035 3 is_stmt 1 view .LVU881
1035:Core/Src/main.c ****   htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 2734              		.loc 1 1035 25 is_stmt 0 view .LVU882
 2735 0008 42F2CF03 		movw	r3, #8399
 2736 000c 4360     		str	r3, [r0, #4]
1036:Core/Src/main.c ****   htim14.Init.Period = 1000-1;
 2737              		.loc 1 1036 3 is_stmt 1 view .LVU883
1036:Core/Src/main.c ****   htim14.Init.Period = 1000-1;
 2738              		.loc 1 1036 27 is_stmt 0 view .LVU884
 2739 000e 0023     		movs	r3, #0
 2740 0010 8360     		str	r3, [r0, #8]
1037:Core/Src/main.c ****   htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 2741              		.loc 1 1037 3 is_stmt 1 view .LVU885
1037:Core/Src/main.c ****   htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 2742              		.loc 1 1037 22 is_stmt 0 view .LVU886
 2743 0012 40F2E732 		movw	r2, #999
 2744 0016 C260     		str	r2, [r0, #12]
1038:Core/Src/main.c ****   htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 2745              		.loc 1 1038 3 is_stmt 1 view .LVU887
1038:Core/Src/main.c ****   htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 2746              		.loc 1 1038 29 is_stmt 0 view .LVU888
 2747 0018 0361     		str	r3, [r0, #16]
1039:Core/Src/main.c ****   if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 2748              		.loc 1 1039 3 is_stmt 1 view .LVU889
1039:Core/Src/main.c ****   if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 2749              		.loc 1 1039 33 is_stmt 0 view .LVU890
 2750 001a 8023     		movs	r3, #128
 2751 001c 8361     		str	r3, [r0, #24]
1040:Core/Src/main.c ****   {
 2752              		.loc 1 1040 3 is_stmt 1 view .LVU891
ARM GAS  C:\Temp\cc4ZtMPR.s 			page 86


1040:Core/Src/main.c ****   {
 2753              		.loc 1 1040 7 is_stmt 0 view .LVU892
 2754 001e FFF7FEFF 		bl	HAL_TIM_Base_Init
 2755              	.LVL160:
1040:Core/Src/main.c ****   {
 2756              		.loc 1 1040 6 view .LVU893
 2757 0022 00B9     		cbnz	r0, .L178
1048:Core/Src/main.c **** 
 2758              		.loc 1 1048 1 view .LVU894
 2759 0024 08BD     		pop	{r3, pc}
 2760              	.L178:
1042:Core/Src/main.c ****   }
 2761              		.loc 1 1042 5 is_stmt 1 view .LVU895
 2762 0026 FFF7FEFF 		bl	Error_Handler
 2763              	.LVL161:
 2764              	.L180:
 2765 002a 00BF     		.align	2
 2766              	.L179:
 2767 002c 00000000 		.word	htim14
 2768 0030 00200040 		.word	1073750016
 2769              		.cfi_endproc
 2770              	.LFE256:
 2772              		.section	.text.MX_TIM8_Init,"ax",%progbits
 2773              		.align	1
 2774              		.syntax unified
 2775              		.thumb
 2776              		.thumb_func
 2778              	MX_TIM8_Init:
 2779              	.LFB255:
 979:Core/Src/main.c **** 
 2780              		.loc 1 979 1 view -0
 2781              		.cfi_startproc
 2782              		@ args = 0, pretend = 0, frame = 24
 2783              		@ frame_needed = 0, uses_anonymous_args = 0
 2784 0000 00B5     		push	{lr}
 2785              		.cfi_def_cfa_offset 4
 2786              		.cfi_offset 14, -4
 2787 0002 87B0     		sub	sp, sp, #28
 2788              		.cfi_def_cfa_offset 32
 985:Core/Src/main.c ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 2789              		.loc 1 985 3 view .LVU897
 985:Core/Src/main.c ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 2790              		.loc 1 985 26 is_stmt 0 view .LVU898
 2791 0004 0023     		movs	r3, #0
 2792 0006 0293     		str	r3, [sp, #8]
 2793 0008 0393     		str	r3, [sp, #12]
 2794 000a 0493     		str	r3, [sp, #16]
 2795 000c 0593     		str	r3, [sp, #20]
 986:Core/Src/main.c **** 
 2796              		.loc 1 986 3 is_stmt 1 view .LVU899
 986:Core/Src/main.c **** 
 2797              		.loc 1 986 27 is_stmt 0 view .LVU900
 2798 000e 0093     		str	r3, [sp]
 2799 0010 0193     		str	r3, [sp, #4]
 991:Core/Src/main.c ****   htim8.Init.Prescaler = 0;
 2800              		.loc 1 991 3 is_stmt 1 view .LVU901
 991:Core/Src/main.c ****   htim8.Init.Prescaler = 0;
ARM GAS  C:\Temp\cc4ZtMPR.s 			page 87


 2801              		.loc 1 991 18 is_stmt 0 view .LVU902
 2802 0012 1348     		ldr	r0, .L189
 2803 0014 134A     		ldr	r2, .L189+4
 2804 0016 0260     		str	r2, [r0]
 992:Core/Src/main.c ****   htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 2805              		.loc 1 992 3 is_stmt 1 view .LVU903
 992:Core/Src/main.c ****   htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 2806              		.loc 1 992 24 is_stmt 0 view .LVU904
 2807 0018 4360     		str	r3, [r0, #4]
 993:Core/Src/main.c ****   htim8.Init.Period = 65535;
 2808              		.loc 1 993 3 is_stmt 1 view .LVU905
 993:Core/Src/main.c ****   htim8.Init.Period = 65535;
 2809              		.loc 1 993 26 is_stmt 0 view .LVU906
 2810 001a 8360     		str	r3, [r0, #8]
 994:Core/Src/main.c ****   htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 2811              		.loc 1 994 3 is_stmt 1 view .LVU907
 994:Core/Src/main.c ****   htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 2812              		.loc 1 994 21 is_stmt 0 view .LVU908
 2813 001c 4FF6FF72 		movw	r2, #65535
 2814 0020 C260     		str	r2, [r0, #12]
 995:Core/Src/main.c ****   htim8.Init.RepetitionCounter = 0;
 2815              		.loc 1 995 3 is_stmt 1 view .LVU909
 995:Core/Src/main.c ****   htim8.Init.RepetitionCounter = 0;
 2816              		.loc 1 995 28 is_stmt 0 view .LVU910
 2817 0022 0361     		str	r3, [r0, #16]
 996:Core/Src/main.c ****   htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 2818              		.loc 1 996 3 is_stmt 1 view .LVU911
 996:Core/Src/main.c ****   htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 2819              		.loc 1 996 32 is_stmt 0 view .LVU912
 2820 0024 4361     		str	r3, [r0, #20]
 997:Core/Src/main.c ****   if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 2821              		.loc 1 997 3 is_stmt 1 view .LVU913
 997:Core/Src/main.c ****   if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 2822              		.loc 1 997 32 is_stmt 0 view .LVU914
 2823 0026 8361     		str	r3, [r0, #24]
 998:Core/Src/main.c ****   {
 2824              		.loc 1 998 3 is_stmt 1 view .LVU915
 998:Core/Src/main.c ****   {
 2825              		.loc 1 998 7 is_stmt 0 view .LVU916
 2826 0028 FFF7FEFF 		bl	HAL_TIM_Base_Init
 2827              	.LVL162:
 998:Core/Src/main.c ****   {
 2828              		.loc 1 998 6 view .LVU917
 2829 002c 90B9     		cbnz	r0, .L186
1002:Core/Src/main.c ****   if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 2830              		.loc 1 1002 3 is_stmt 1 view .LVU918
1002:Core/Src/main.c ****   if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 2831              		.loc 1 1002 34 is_stmt 0 view .LVU919
 2832 002e 4FF48053 		mov	r3, #4096
 2833 0032 0293     		str	r3, [sp, #8]
1003:Core/Src/main.c ****   {
 2834              		.loc 1 1003 3 is_stmt 1 view .LVU920
1003:Core/Src/main.c ****   {
 2835              		.loc 1 1003 7 is_stmt 0 view .LVU921
 2836 0034 02A9     		add	r1, sp, #8
 2837 0036 0A48     		ldr	r0, .L189
 2838 0038 FFF7FEFF 		bl	HAL_TIM_ConfigClockSource
ARM GAS  C:\Temp\cc4ZtMPR.s 			page 88


 2839              	.LVL163:
1003:Core/Src/main.c ****   {
 2840              		.loc 1 1003 6 view .LVU922
 2841 003c 60B9     		cbnz	r0, .L187
1007:Core/Src/main.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 2842              		.loc 1 1007 3 is_stmt 1 view .LVU923
1007:Core/Src/main.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 2843              		.loc 1 1007 37 is_stmt 0 view .LVU924
 2844 003e 0023     		movs	r3, #0
 2845 0040 0093     		str	r3, [sp]
1008:Core/Src/main.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 2846              		.loc 1 1008 3 is_stmt 1 view .LVU925
1008:Core/Src/main.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 2847              		.loc 1 1008 33 is_stmt 0 view .LVU926
 2848 0042 0193     		str	r3, [sp, #4]
1009:Core/Src/main.c ****   {
 2849              		.loc 1 1009 3 is_stmt 1 view .LVU927
1009:Core/Src/main.c ****   {
 2850              		.loc 1 1009 7 is_stmt 0 view .LVU928
 2851 0044 6946     		mov	r1, sp
 2852 0046 0648     		ldr	r0, .L189
 2853 0048 FFF7FEFF 		bl	HAL_TIMEx_MasterConfigSynchronization
 2854              	.LVL164:
1009:Core/Src/main.c ****   {
 2855              		.loc 1 1009 6 view .LVU929
 2856 004c 30B9     		cbnz	r0, .L188
1017:Core/Src/main.c **** 
 2857              		.loc 1 1017 1 view .LVU930
 2858 004e 07B0     		add	sp, sp, #28
 2859              		.cfi_remember_state
 2860              		.cfi_def_cfa_offset 4
 2861              		@ sp needed
 2862 0050 5DF804FB 		ldr	pc, [sp], #4
 2863              	.L186:
 2864              		.cfi_restore_state
1000:Core/Src/main.c ****   }
 2865              		.loc 1 1000 5 is_stmt 1 view .LVU931
 2866 0054 FFF7FEFF 		bl	Error_Handler
 2867              	.LVL165:
 2868              	.L187:
1005:Core/Src/main.c ****   }
 2869              		.loc 1 1005 5 view .LVU932
 2870 0058 FFF7FEFF 		bl	Error_Handler
 2871              	.LVL166:
 2872              	.L188:
1011:Core/Src/main.c ****   }
 2873              		.loc 1 1011 5 view .LVU933
 2874 005c FFF7FEFF 		bl	Error_Handler
 2875              	.LVL167:
 2876              	.L190:
 2877              		.align	2
 2878              	.L189:
 2879 0060 00000000 		.word	htim8
 2880 0064 00040140 		.word	1073808384
 2881              		.cfi_endproc
 2882              	.LFE255:
 2884              		.section	.text.SystemClock_Config,"ax",%progbits
ARM GAS  C:\Temp\cc4ZtMPR.s 			page 89


 2885              		.align	1
 2886              		.global	SystemClock_Config
 2887              		.syntax unified
 2888              		.thumb
 2889              		.thumb_func
 2891              	SystemClock_Config:
 2892              	.LFB244:
 415:Core/Src/main.c ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 2893              		.loc 1 415 1 view -0
 2894              		.cfi_startproc
 2895              		@ args = 0, pretend = 0, frame = 80
 2896              		@ frame_needed = 0, uses_anonymous_args = 0
 2897 0000 00B5     		push	{lr}
 2898              		.cfi_def_cfa_offset 4
 2899              		.cfi_offset 14, -4
 2900 0002 95B0     		sub	sp, sp, #84
 2901              		.cfi_def_cfa_offset 88
 416:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 2902              		.loc 1 416 3 view .LVU935
 416:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 2903              		.loc 1 416 22 is_stmt 0 view .LVU936
 2904 0004 3022     		movs	r2, #48
 2905 0006 0021     		movs	r1, #0
 2906 0008 08A8     		add	r0, sp, #32
 2907 000a FFF7FEFF 		bl	memset
 2908              	.LVL168:
 417:Core/Src/main.c **** 
 2909              		.loc 1 417 3 is_stmt 1 view .LVU937
 417:Core/Src/main.c **** 
 2910              		.loc 1 417 22 is_stmt 0 view .LVU938
 2911 000e 0023     		movs	r3, #0
 2912 0010 0393     		str	r3, [sp, #12]
 2913 0012 0493     		str	r3, [sp, #16]
 2914 0014 0593     		str	r3, [sp, #20]
 2915 0016 0693     		str	r3, [sp, #24]
 2916 0018 0793     		str	r3, [sp, #28]
 421:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 2917              		.loc 1 421 3 is_stmt 1 view .LVU939
 2918              	.LBB25:
 421:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 2919              		.loc 1 421 3 view .LVU940
 2920 001a 0193     		str	r3, [sp, #4]
 421:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 2921              		.loc 1 421 3 view .LVU941
 2922 001c 1E4A     		ldr	r2, .L197
 2923 001e 116C     		ldr	r1, [r2, #64]
 2924 0020 41F08051 		orr	r1, r1, #268435456
 2925 0024 1164     		str	r1, [r2, #64]
 421:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 2926              		.loc 1 421 3 view .LVU942
 2927 0026 126C     		ldr	r2, [r2, #64]
 2928 0028 02F08052 		and	r2, r2, #268435456
 2929 002c 0192     		str	r2, [sp, #4]
 421:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 2930              		.loc 1 421 3 view .LVU943
 2931 002e 019A     		ldr	r2, [sp, #4]
 2932              	.LBE25:
ARM GAS  C:\Temp\cc4ZtMPR.s 			page 90


 421:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 2933              		.loc 1 421 3 view .LVU944
 422:Core/Src/main.c **** 
 2934              		.loc 1 422 3 view .LVU945
 2935              	.LBB26:
 422:Core/Src/main.c **** 
 2936              		.loc 1 422 3 view .LVU946
 2937 0030 0293     		str	r3, [sp, #8]
 422:Core/Src/main.c **** 
 2938              		.loc 1 422 3 view .LVU947
 2939 0032 1A4A     		ldr	r2, .L197+4
 2940 0034 1168     		ldr	r1, [r2]
 2941 0036 41F48041 		orr	r1, r1, #16384
 2942 003a 1160     		str	r1, [r2]
 422:Core/Src/main.c **** 
 2943              		.loc 1 422 3 view .LVU948
 2944 003c 1268     		ldr	r2, [r2]
 2945 003e 02F48042 		and	r2, r2, #16384
 2946 0042 0292     		str	r2, [sp, #8]
 422:Core/Src/main.c **** 
 2947              		.loc 1 422 3 view .LVU949
 2948 0044 029A     		ldr	r2, [sp, #8]
 2949              	.LBE26:
 422:Core/Src/main.c **** 
 2950              		.loc 1 422 3 view .LVU950
 427:Core/Src/main.c ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 2951              		.loc 1 427 3 view .LVU951
 427:Core/Src/main.c ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 2952              		.loc 1 427 36 is_stmt 0 view .LVU952
 2953 0046 0222     		movs	r2, #2
 2954 0048 0892     		str	r2, [sp, #32]
 428:Core/Src/main.c ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 2955              		.loc 1 428 3 is_stmt 1 view .LVU953
 428:Core/Src/main.c ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 2956              		.loc 1 428 30 is_stmt 0 view .LVU954
 2957 004a 0121     		movs	r1, #1
 2958 004c 0B91     		str	r1, [sp, #44]
 429:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 2959              		.loc 1 429 3 is_stmt 1 view .LVU955
 429:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 2960              		.loc 1 429 41 is_stmt 0 view .LVU956
 2961 004e 1021     		movs	r1, #16
 2962 0050 0C91     		str	r1, [sp, #48]
 430:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 2963              		.loc 1 430 3 is_stmt 1 view .LVU957
 430:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 2964              		.loc 1 430 34 is_stmt 0 view .LVU958
 2965 0052 0E92     		str	r2, [sp, #56]
 431:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLM = 8;
 2966              		.loc 1 431 3 is_stmt 1 view .LVU959
 431:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLM = 8;
 2967              		.loc 1 431 35 is_stmt 0 view .LVU960
 2968 0054 0F93     		str	r3, [sp, #60]
 432:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLN = 84;
 2969              		.loc 1 432 3 is_stmt 1 view .LVU961
 432:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLN = 84;
 2970              		.loc 1 432 30 is_stmt 0 view .LVU962
ARM GAS  C:\Temp\cc4ZtMPR.s 			page 91


 2971 0056 0823     		movs	r3, #8
 2972 0058 1093     		str	r3, [sp, #64]
 433:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 2973              		.loc 1 433 3 is_stmt 1 view .LVU963
 433:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 2974              		.loc 1 433 30 is_stmt 0 view .LVU964
 2975 005a 5423     		movs	r3, #84
 2976 005c 1193     		str	r3, [sp, #68]
 434:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLQ = 4;
 2977              		.loc 1 434 3 is_stmt 1 view .LVU965
 434:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLQ = 4;
 2978              		.loc 1 434 30 is_stmt 0 view .LVU966
 2979 005e 1292     		str	r2, [sp, #72]
 435:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 2980              		.loc 1 435 3 is_stmt 1 view .LVU967
 435:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 2981              		.loc 1 435 30 is_stmt 0 view .LVU968
 2982 0060 0423     		movs	r3, #4
 2983 0062 1393     		str	r3, [sp, #76]
 436:Core/Src/main.c ****   {
 2984              		.loc 1 436 3 is_stmt 1 view .LVU969
 436:Core/Src/main.c ****   {
 2985              		.loc 1 436 7 is_stmt 0 view .LVU970
 2986 0064 08A8     		add	r0, sp, #32
 2987 0066 FFF7FEFF 		bl	HAL_RCC_OscConfig
 2988              	.LVL169:
 436:Core/Src/main.c ****   {
 2989              		.loc 1 436 6 view .LVU971
 2990 006a 80B9     		cbnz	r0, .L195
 443:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 2991              		.loc 1 443 3 is_stmt 1 view .LVU972
 443:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 2992              		.loc 1 443 31 is_stmt 0 view .LVU973
 2993 006c 0F23     		movs	r3, #15
 2994 006e 0393     		str	r3, [sp, #12]
 445:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 2995              		.loc 1 445 3 is_stmt 1 view .LVU974
 445:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 2996              		.loc 1 445 34 is_stmt 0 view .LVU975
 2997 0070 0221     		movs	r1, #2
 2998 0072 0491     		str	r1, [sp, #16]
 446:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 2999              		.loc 1 446 3 is_stmt 1 view .LVU976
 446:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 3000              		.loc 1 446 35 is_stmt 0 view .LVU977
 3001 0074 0023     		movs	r3, #0
 3002 0076 0593     		str	r3, [sp, #20]
 447:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 3003              		.loc 1 447 3 is_stmt 1 view .LVU978
 447:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 3004              		.loc 1 447 36 is_stmt 0 view .LVU979
 3005 0078 4FF48053 		mov	r3, #4096
 3006 007c 0693     		str	r3, [sp, #24]
 448:Core/Src/main.c **** 
 3007              		.loc 1 448 3 is_stmt 1 view .LVU980
 448:Core/Src/main.c **** 
 3008              		.loc 1 448 36 is_stmt 0 view .LVU981
ARM GAS  C:\Temp\cc4ZtMPR.s 			page 92


 3009 007e 0793     		str	r3, [sp, #28]
 450:Core/Src/main.c ****   {
 3010              		.loc 1 450 3 is_stmt 1 view .LVU982
 450:Core/Src/main.c ****   {
 3011              		.loc 1 450 7 is_stmt 0 view .LVU983
 3012 0080 03A8     		add	r0, sp, #12
 3013 0082 FFF7FEFF 		bl	HAL_RCC_ClockConfig
 3014              	.LVL170:
 450:Core/Src/main.c ****   {
 3015              		.loc 1 450 6 view .LVU984
 3016 0086 20B9     		cbnz	r0, .L196
 454:Core/Src/main.c **** 
 3017              		.loc 1 454 1 view .LVU985
 3018 0088 15B0     		add	sp, sp, #84
 3019              		.cfi_remember_state
 3020              		.cfi_def_cfa_offset 4
 3021              		@ sp needed
 3022 008a 5DF804FB 		ldr	pc, [sp], #4
 3023              	.L195:
 3024              		.cfi_restore_state
 438:Core/Src/main.c ****   }
 3025              		.loc 1 438 5 is_stmt 1 view .LVU986
 3026 008e FFF7FEFF 		bl	Error_Handler
 3027              	.LVL171:
 3028              	.L196:
 452:Core/Src/main.c ****   }
 3029              		.loc 1 452 5 view .LVU987
 3030 0092 FFF7FEFF 		bl	Error_Handler
 3031              	.LVL172:
 3032              	.L198:
 3033 0096 00BF     		.align	2
 3034              	.L197:
 3035 0098 00380240 		.word	1073887232
 3036 009c 00700040 		.word	1073770496
 3037              		.cfi_endproc
 3038              	.LFE244:
 3040              		.section	.text.main,"ax",%progbits
 3041              		.align	1
 3042              		.global	main
 3043              		.syntax unified
 3044              		.thumb
 3045              		.thumb_func
 3047              	main:
 3048              	.LFB243:
 346:Core/Src/main.c ****   /* USER CODE BEGIN 1 */
 3049              		.loc 1 346 1 view -0
 3050              		.cfi_startproc
 3051              		@ args = 0, pretend = 0, frame = 0
 3052              		@ frame_needed = 0, uses_anonymous_args = 0
 3053 0000 10B5     		push	{r4, lr}
 3054              		.cfi_def_cfa_offset 8
 3055              		.cfi_offset 4, -8
 3056              		.cfi_offset 14, -4
 354:Core/Src/main.c **** 
 3057              		.loc 1 354 3 view .LVU989
 3058 0002 FFF7FEFF 		bl	HAL_Init
 3059              	.LVL173:
ARM GAS  C:\Temp\cc4ZtMPR.s 			page 93


 361:Core/Src/main.c **** 
 3060              		.loc 1 361 3 view .LVU990
 3061 0006 FFF7FEFF 		bl	SystemClock_Config
 3062              	.LVL174:
 368:Core/Src/main.c ****   MX_DMA_Init();
 3063              		.loc 1 368 3 view .LVU991
 3064 000a FFF7FEFF 		bl	MX_GPIO_Init
 3065              	.LVL175:
 369:Core/Src/main.c ****   MX_TIM2_Init();
 3066              		.loc 1 369 3 view .LVU992
 3067 000e FFF7FEFF 		bl	MX_DMA_Init
 3068              	.LVL176:
 370:Core/Src/main.c ****   MX_I2C1_Init();
 3069              		.loc 1 370 3 view .LVU993
 3070 0012 FFF7FEFF 		bl	MX_TIM2_Init
 3071              	.LVL177:
 371:Core/Src/main.c ****   MX_ADC1_Init();
 3072              		.loc 1 371 3 view .LVU994
 3073 0016 FFF7FEFF 		bl	MX_I2C1_Init
 3074              	.LVL178:
 372:Core/Src/main.c ****   MX_TIM7_Init();
 3075              		.loc 1 372 3 view .LVU995
 3076 001a FFF7FEFF 		bl	MX_ADC1_Init
 3077              	.LVL179:
 373:Core/Src/main.c ****   MX_TIM6_Init();
 3078              		.loc 1 373 3 view .LVU996
 3079 001e FFF7FEFF 		bl	MX_TIM7_Init
 3080              	.LVL180:
 374:Core/Src/main.c ****   MX_I2C2_Init();
 3081              		.loc 1 374 3 view .LVU997
 3082 0022 FFF7FEFF 		bl	MX_TIM6_Init
 3083              	.LVL181:
 375:Core/Src/main.c ****   MX_TIM4_Init();
 3084              		.loc 1 375 3 view .LVU998
 3085 0026 FFF7FEFF 		bl	MX_I2C2_Init
 3086              	.LVL182:
 376:Core/Src/main.c ****   MX_TIM1_Init();
 3087              		.loc 1 376 3 view .LVU999
 3088 002a FFF7FEFF 		bl	MX_TIM4_Init
 3089              	.LVL183:
 377:Core/Src/main.c ****   MX_TIM3_Init();
 3090              		.loc 1 377 3 view .LVU1000
 3091 002e FFF7FEFF 		bl	MX_TIM1_Init
 3092              	.LVL184:
 378:Core/Src/main.c ****   MX_TIM5_Init();
 3093              		.loc 1 378 3 view .LVU1001
 3094 0032 FFF7FEFF 		bl	MX_TIM3_Init
 3095              	.LVL185:
 379:Core/Src/main.c ****   MX_UART4_Init();
 3096              		.loc 1 379 3 view .LVU1002
 3097 0036 FFF7FEFF 		bl	MX_TIM5_Init
 3098              	.LVL186:
 380:Core/Src/main.c ****   MX_TIM14_Init();
 3099              		.loc 1 380 3 view .LVU1003
 3100 003a FFF7FEFF 		bl	MX_UART4_Init
 3101              	.LVL187:
 381:Core/Src/main.c ****   MX_TIM8_Init();
ARM GAS  C:\Temp\cc4ZtMPR.s 			page 94


 3102              		.loc 1 381 3 view .LVU1004
 3103 003e FFF7FEFF 		bl	MX_TIM14_Init
 3104              	.LVL188:
 382:Core/Src/main.c ****   /* USER CODE BEGIN 2 */
 3105              		.loc 1 382 3 view .LVU1005
 3106 0042 FFF7FEFF 		bl	MX_TIM8_Init
 3107              	.LVL189:
 385:Core/Src/main.c ****   init_POTs(NONE);
 3108              		.loc 1 385 3 view .LVU1006
 3109 0046 FFF7FEFF 		bl	init_7SegDisplay
 3110              	.LVL190:
 386:Core/Src/main.c ****   init_IMU();
 3111              		.loc 1 386 3 view .LVU1007
 3112 004a 0020     		movs	r0, #0
 3113 004c FFF7FEFF 		bl	init_POTs
 3114              	.LVL191:
 387:Core/Src/main.c ****   
 3115              		.loc 1 387 3 view .LVU1008
 3116 0050 FFF7FEFF 		bl	init_IMU
 3117              	.LVL192:
 389:Core/Src/main.c ****     init_ServoMotor(i,50,90,0);
 3118              		.loc 1 389 3 view .LVU1009
 3119              	.LBB27:
 389:Core/Src/main.c ****     init_ServoMotor(i,50,90,0);
 3120              		.loc 1 389 8 view .LVU1010
 389:Core/Src/main.c ****     init_ServoMotor(i,50,90,0);
 3121              		.loc 1 389 12 is_stmt 0 view .LVU1011
 3122 0054 0024     		movs	r4, #0
 389:Core/Src/main.c ****     init_ServoMotor(i,50,90,0);
 3123              		.loc 1 389 3 view .LVU1012
 3124 0056 0AE0     		b	.L200
 3125              	.LVL193:
 3126              	.L201:
 390:Core/Src/main.c ****     setServoAngle(i,0);
 3127              		.loc 1 390 5 is_stmt 1 discriminator 3 view .LVU1013
 3128 0058 0023     		movs	r3, #0
 3129 005a 5A22     		movs	r2, #90
 3130 005c 3221     		movs	r1, #50
 3131 005e 2046     		mov	r0, r4
 3132 0060 FFF7FEFF 		bl	init_ServoMotor
 3133              	.LVL194:
 391:Core/Src/main.c ****   }
 3134              		.loc 1 391 5 discriminator 3 view .LVU1014
 3135 0064 0021     		movs	r1, #0
 3136 0066 2046     		mov	r0, r4
 3137 0068 FFF7FEFF 		bl	setServoAngle
 3138              	.LVL195:
 389:Core/Src/main.c ****     init_ServoMotor(i,50,90,0);
 3139              		.loc 1 389 29 discriminator 3 view .LVU1015
 3140 006c 0134     		adds	r4, r4, #1
 3141              	.LVL196:
 3142              	.L200:
 389:Core/Src/main.c ****     init_ServoMotor(i,50,90,0);
 3143              		.loc 1 389 22 discriminator 1 view .LVU1016
 3144 006e 032C     		cmp	r4, #3
 3145 0070 F2DD     		ble	.L201
 3146              	.LBE27:
ARM GAS  C:\Temp\cc4ZtMPR.s 			page 95


 393:Core/Src/main.c ****   /* USER CODE END 2 */
 3147              		.loc 1 393 3 view .LVU1017
 3148 0072 FFF7FEFF 		bl	init_AllCurrentMonitors
 3149              	.LVL197:
 3150              	.L202:
 400:Core/Src/main.c ****     receivedFromSimulink();
 3151              		.loc 1 400 97 discriminator 1 view .LVU1018
 400:Core/Src/main.c ****     receivedFromSimulink();
 3152              		.loc 1 400 84 discriminator 1 view .LVU1019
 400:Core/Src/main.c ****     receivedFromSimulink();
 3153              		.loc 1 400 12 is_stmt 0 discriminator 1 view .LVU1020
 3154 0076 3122     		movs	r2, #49
 3155 0078 0549     		ldr	r1, .L205
 3156 007a 0648     		ldr	r0, .L205+4
 3157 007c FFF7FEFF 		bl	HAL_UART_Receive_DMA
 3158              	.LVL198:
 400:Core/Src/main.c ****     receivedFromSimulink();
 3159              		.loc 1 400 84 discriminator 1 view .LVU1021
 3160 0080 0228     		cmp	r0, #2
 3161 0082 F8D0     		beq	.L202
 401:Core/Src/main.c ****     sendToSimulink();
 3162              		.loc 1 401 5 is_stmt 1 view .LVU1022
 3163 0084 FFF7FEFF 		bl	receivedFromSimulink
 3164              	.LVL199:
 402:Core/Src/main.c ****     /* USER CODE END WHILE */
 3165              		.loc 1 402 5 view .LVU1023
 3166 0088 FFF7FEFF 		bl	sendToSimulink
 3167              	.LVL200:
 398:Core/Src/main.c ****   {
 3168              		.loc 1 398 7 view .LVU1024
 400:Core/Src/main.c ****     receivedFromSimulink();
 3169              		.loc 1 400 11 is_stmt 0 view .LVU1025
 3170 008c F3E7     		b	.L202
 3171              	.L206:
 3172 008e 00BF     		.align	2
 3173              	.L205:
 3174 0090 00000000 		.word	bigBuffer
 3175 0094 00000000 		.word	huart4
 3176              		.cfi_endproc
 3177              	.LFE243:
 3179              		.global	UART4_rxBuffer
 3180              		.section	.bss.UART4_rxBuffer,"aw",%nobits
 3181              		.align	2
 3184              	UART4_rxBuffer:
 3185 0000 00000000 		.space	47
 3185      00000000 
 3185      00000000 
 3185      00000000 
 3185      00000000 
 3186              		.global	bigBuffer
 3187              		.section	.bss.bigBuffer,"aw",%nobits
 3188              		.align	2
 3191              	bigBuffer:
 3192 0000 00000000 		.space	49
 3192      00000000 
 3192      00000000 
 3192      00000000 
ARM GAS  C:\Temp\cc4ZtMPR.s 			page 96


 3192      00000000 
 3193              		.global	headerBuffer
 3194              		.section	.bss.headerBuffer,"aw",%nobits
 3195              		.align	2
 3198              	headerBuffer:
 3199 0000 0000     		.space	2
 3200              		.global	timedout
 3201              		.section	.bss.timedout,"aw",%nobits
 3204              	timedout:
 3205 0000 00       		.space	1
 3206              		.global	UART4_txBuffer
 3207              		.section	.bss.UART4_txBuffer,"aw",%nobits
 3208              		.align	2
 3211              	UART4_txBuffer:
 3212 0000 00000000 		.space	6
 3212      0000
 3213              		.global	cmd_id
 3214              		.section	.bss.cmd_id,"aw",%nobits
 3217              	cmd_id:
 3218 0000 00       		.space	1
 3219              		.global	state
 3220              		.section	.bss.state,"aw",%nobits
 3223              	state:
 3224 0000 00       		.space	1
 3225              		.global	message
 3226              		.section	.data.message,"aw"
 3227              		.align	2
 3230              	message:
 3231 0000 5472616E 		.ascii	"Transmission\015\012\000"
 3231      736D6973 
 3231      73696F6E 
 3231      0D0A00
 3232              		.global	header2
 3233              		.section	.rodata.header2,"a"
 3236              	header2:
 3237 0000 49       		.byte	73
 3238              		.global	header1
 3239              		.section	.rodata.header1,"a"
 3242              	header1:
 3243 0000 92       		.byte	-110
 3244              		.global	actualStepperNumber
 3245              		.section	.bss.actualStepperNumber,"aw",%nobits
 3246              		.align	1
 3249              	actualStepperNumber:
 3250 0000 0000     		.space	2
 3251              		.global	StepperSpeed_state
 3252              		.section	.bss.StepperSpeed_state,"aw",%nobits
 3253              		.align	2
 3256              	StepperSpeed_state:
 3257 0000 0000     		.space	2
 3258              		.global	actualStepperRevolution
 3259              		.section	.bss.actualStepperRevolution,"aw",%nobits
 3260              		.align	1
 3263              	actualStepperRevolution:
 3264 0000 0000     		.space	2
 3265              		.global	StepperRevolution_state
 3266              		.section	.bss.StepperRevolution_state,"aw",%nobits
ARM GAS  C:\Temp\cc4ZtMPR.s 			page 97


 3267              		.align	2
 3270              	StepperRevolution_state:
 3271 0000 0000     		.space	2
 3272              		.global	StepperMode_state
 3273              		.section	.bss.StepperMode_state,"aw",%nobits
 3276              	StepperMode_state:
 3277 0000 00       		.space	1
 3278              		.global	actualServoState
 3279              		.section	.bss.actualServoState,"aw",%nobits
 3280              		.align	2
 3283              	actualServoState:
 3284 0000 00000000 		.space	24
 3284      00000000 
 3284      00000000 
 3284      00000000 
 3284      00000000 
 3285              		.global	Servo_state
 3286              		.section	.bss.Servo_state,"aw",%nobits
 3287              		.align	2
 3290              	Servo_state:
 3291 0000 00000000 		.space	24
 3291      00000000 
 3291      00000000 
 3291      00000000 
 3291      00000000 
 3292              		.global	actualSegNumber
 3293              		.section	.bss.actualSegNumber,"aw",%nobits
 3294              		.align	2
 3297              	actualSegNumber:
 3298 0000 00000000 		.space	4
 3299              		.global	SEG_number_state
 3300              		.section	.bss.SEG_number_state,"aw",%nobits
 3301              		.align	2
 3304              	SEG_number_state:
 3305 0000 00000000 		.space	4
 3306              		.global	CurrentMonitor_Stepper
 3307              		.section	.bss.CurrentMonitor_Stepper,"aw",%nobits
 3308              		.align	2
 3311              	CurrentMonitor_Stepper:
 3312 0000 00000000 		.space	4
 3313              		.global	CurrentMonitor_Servo
 3314              		.section	.bss.CurrentMonitor_Servo,"aw",%nobits
 3315              		.align	2
 3318              	CurrentMonitor_Servo:
 3319 0000 00000000 		.space	4
 3320              		.global	CurrentMonitor_Barrel
 3321              		.section	.bss.CurrentMonitor_Barrel,"aw",%nobits
 3322              		.align	2
 3325              	CurrentMonitor_Barrel:
 3326 0000 00000000 		.space	4
 3327              		.global	IMU_Gyro
 3328              		.section	.bss.IMU_Gyro,"aw",%nobits
 3329              		.align	2
 3332              	IMU_Gyro:
 3333 0000 00000000 		.space	12
 3333      00000000 
 3333      00000000 
ARM GAS  C:\Temp\cc4ZtMPR.s 			page 98


 3334              		.global	IMU_Accel
 3335              		.section	.bss.IMU_Accel,"aw",%nobits
 3336              		.align	2
 3339              	IMU_Accel:
 3340 0000 00000000 		.space	12
 3340      00000000 
 3340      00000000 
 3341              		.global	NeoPixel_states
 3342              		.section	.bss.NeoPixel_states,"aw",%nobits
 3343              		.align	2
 3346              	NeoPixel_states:
 3347 0000 00000000 		.space	12
 3347      00000000 
 3347      00000000 
 3348              		.global	Relay_states
 3349              		.section	.bss.Relay_states,"aw",%nobits
 3350              		.align	2
 3353              	Relay_states:
 3354 0000 00000000 		.space	8
 3354      00000000 
 3355              		.global	LED_states
 3356              		.section	.bss.LED_states,"aw",%nobits
 3357              		.align	2
 3360              	LED_states:
 3361 0000 00000000 		.space	8
 3361      00000000 
 3362              		.global	switch_states_uint8
 3363              		.section	.bss.switch_states_uint8,"aw",%nobits
 3366              	switch_states_uint8:
 3367 0000 00       		.space	1
 3368              		.global	switch_states
 3369              		.section	.bss.switch_states,"aw",%nobits
 3370              		.align	2
 3373              	switch_states:
 3374 0000 00000000 		.space	8
 3374      00000000 
 3375              		.global	adcChannelCount
 3376              		.section	.rodata.adcChannelCount,"a"
 3379              	adcChannelCount:
 3380 0000 04       		.byte	4
 3381              		.global	POTS
 3382              		.section	.bss.POTS,"aw",%nobits
 3383              		.align	2
 3386              	POTS:
 3387 0000 00000000 		.space	8
 3387      00000000 
 3388              		.global	hdma_uart4_rx
 3389              		.section	.bss.hdma_uart4_rx,"aw",%nobits
 3390              		.align	2
 3393              	hdma_uart4_rx:
 3394 0000 00000000 		.space	96
 3394      00000000 
 3394      00000000 
 3394      00000000 
 3394      00000000 
 3395              		.global	huart4
 3396              		.section	.bss.huart4,"aw",%nobits
ARM GAS  C:\Temp\cc4ZtMPR.s 			page 99


 3397              		.align	2
 3400              	huart4:
 3401 0000 00000000 		.space	116
 3401      00000000 
 3401      00000000 
 3401      00000000 
 3401      00000000 
 3402              		.global	hdma_tim2_up_ch3
 3403              		.section	.bss.hdma_tim2_up_ch3,"aw",%nobits
 3404              		.align	2
 3407              	hdma_tim2_up_ch3:
 3408 0000 00000000 		.space	96
 3408      00000000 
 3408      00000000 
 3408      00000000 
 3408      00000000 
 3409              		.global	htim14
 3410              		.section	.bss.htim14,"aw",%nobits
 3411              		.align	2
 3414              	htim14:
 3415 0000 00000000 		.space	180
 3415      00000000 
 3415      00000000 
 3415      00000000 
 3415      00000000 
 3416              		.global	htim8
 3417              		.section	.bss.htim8,"aw",%nobits
 3418              		.align	2
 3421              	htim8:
 3422 0000 00000000 		.space	180
 3422      00000000 
 3422      00000000 
 3422      00000000 
 3422      00000000 
 3423              		.global	htim7
 3424              		.section	.bss.htim7,"aw",%nobits
 3425              		.align	2
 3428              	htim7:
 3429 0000 00000000 		.space	180
 3429      00000000 
 3429      00000000 
 3429      00000000 
 3429      00000000 
 3430              		.global	htim6
 3431              		.section	.bss.htim6,"aw",%nobits
 3432              		.align	2
 3435              	htim6:
 3436 0000 00000000 		.space	180
 3436      00000000 
 3436      00000000 
 3436      00000000 
 3436      00000000 
 3437              		.global	htim5
 3438              		.section	.bss.htim5,"aw",%nobits
 3439              		.align	2
 3442              	htim5:
 3443 0000 00000000 		.space	180
ARM GAS  C:\Temp\cc4ZtMPR.s 			page 100


 3443      00000000 
 3443      00000000 
 3443      00000000 
 3443      00000000 
 3444              		.global	htim4
 3445              		.section	.bss.htim4,"aw",%nobits
 3446              		.align	2
 3449              	htim4:
 3450 0000 00000000 		.space	180
 3450      00000000 
 3450      00000000 
 3450      00000000 
 3450      00000000 
 3451              		.global	htim3
 3452              		.section	.bss.htim3,"aw",%nobits
 3453              		.align	2
 3456              	htim3:
 3457 0000 00000000 		.space	180
 3457      00000000 
 3457      00000000 
 3457      00000000 
 3457      00000000 
 3458              		.global	htim2
 3459              		.section	.bss.htim2,"aw",%nobits
 3460              		.align	2
 3463              	htim2:
 3464 0000 00000000 		.space	180
 3464      00000000 
 3464      00000000 
 3464      00000000 
 3464      00000000 
 3465              		.global	htim1
 3466              		.section	.bss.htim1,"aw",%nobits
 3467              		.align	2
 3470              	htim1:
 3471 0000 00000000 		.space	180
 3471      00000000 
 3471      00000000 
 3471      00000000 
 3471      00000000 
 3472              		.global	hi2c2
 3473              		.section	.bss.hi2c2,"aw",%nobits
 3474              		.align	2
 3477              	hi2c2:
 3478 0000 00000000 		.space	84
 3478      00000000 
 3478      00000000 
 3478      00000000 
 3478      00000000 
 3479              		.global	hi2c1
 3480              		.section	.bss.hi2c1,"aw",%nobits
 3481              		.align	2
 3484              	hi2c1:
 3485 0000 00000000 		.space	84
 3485      00000000 
 3485      00000000 
 3485      00000000 
ARM GAS  C:\Temp\cc4ZtMPR.s 			page 101


 3485      00000000 
 3486              		.global	hdma_adc1
 3487              		.section	.bss.hdma_adc1,"aw",%nobits
 3488              		.align	2
 3491              	hdma_adc1:
 3492 0000 00000000 		.space	96
 3492      00000000 
 3492      00000000 
 3492      00000000 
 3492      00000000 
 3493              		.global	hadc1
 3494              		.section	.bss.hadc1,"aw",%nobits
 3495              		.align	2
 3498              	hadc1:
 3499 0000 00000000 		.space	72
 3499      00000000 
 3499      00000000 
 3499      00000000 
 3499      00000000 
 3500              		.text
 3501              	.Letext0:
 3502              		.file 3 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f407xx.h"
 3503              		.file 4 "c:\\users\\jessejabezarendse\\appdata\\roaming\\code\\user\\globalstorage\\bmd.stm32-for-
 3504              		.file 5 "c:\\users\\jessejabezarendse\\appdata\\roaming\\code\\user\\globalstorage\\bmd.stm32-for-
 3505              		.file 6 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f4xx.h"
 3506              		.file 7 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_def.h"
 3507              		.file 8 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc_ex.h"
 3508              		.file 9 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc.h"
 3509              		.file 10 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_gpio.h"
 3510              		.file 11 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_dma.h"
 3511              		.file 12 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_adc.h"
 3512              		.file 13 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_i2c.h"
 3513              		.file 14 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_tim.h"
 3514              		.file 15 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_uart.h"
 3515              		.file 16 "c:\\users\\jessejabezarendse\\appdata\\roaming\\code\\user\\globalstorage\\bmd.stm32-for
 3516              		.file 17 "Core/Inc/IMU.h"
 3517              		.file 18 "Core/Inc/StepperMotor.h"
 3518              		.file 19 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_tim_ex.h"
 3519              		.file 20 "Core/Inc/main.h"
 3520              		.file 21 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_cortex.h"
 3521              		.file 22 "Core/Inc/CurrentMonitor.h"
 3522              		.file 23 "Core/Inc/Pots.h"
 3523              		.file 24 "Core/Inc/ServoMotors.h"
 3524              		.file 25 "Core/Inc/7SegDisplay.h"
 3525              		.file 26 "Core/Inc/NeoPixels.h"
 3526              		.file 27 "Core/Inc/Relays.h"
 3527              		.file 28 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal.h"
 3528              		.file 29 "<built-in>"
ARM GAS  C:\Temp\cc4ZtMPR.s 			page 102


DEFINED SYMBOLS
                            *ABS*:00000000 main.c
  C:\Temp\cc4ZtMPR.s:21     .text.MX_GPIO_Init:00000000 $t
  C:\Temp\cc4ZtMPR.s:26     .text.MX_GPIO_Init:00000000 MX_GPIO_Init
  C:\Temp\cc4ZtMPR.s:323    .text.MX_GPIO_Init:00000170 $d
  C:\Temp\cc4ZtMPR.s:332    .text.MX_DMA_Init:00000000 $t
  C:\Temp\cc4ZtMPR.s:337    .text.MX_DMA_Init:00000000 MX_DMA_Init
  C:\Temp\cc4ZtMPR.s:421    .text.MX_DMA_Init:00000064 $d
  C:\Temp\cc4ZtMPR.s:426    .text.toByte:00000000 $t
  C:\Temp\cc4ZtMPR.s:432    .text.toByte:00000000 toByte
  C:\Temp\cc4ZtMPR.s:487    .text.signNumber32:00000000 $t
  C:\Temp\cc4ZtMPR.s:493    .text.signNumber32:00000000 signNumber32
  C:\Temp\cc4ZtMPR.s:510    .text.sendToSimulink:00000000 $t
  C:\Temp\cc4ZtMPR.s:516    .text.sendToSimulink:00000000 sendToSimulink
  C:\Temp\cc4ZtMPR.s:688    .text.sendToSimulink:000000fc $d
  C:\Temp\cc4ZtMPR.s:3373   .bss.switch_states:00000000 switch_states
  C:\Temp\cc4ZtMPR.s:3366   .bss.switch_states_uint8:00000000 switch_states_uint8
  C:\Temp\cc4ZtMPR.s:3400   .bss.huart4:00000000 huart4
  C:\Temp\cc4ZtMPR.s:3242   .rodata.header1:00000000 header1
  C:\Temp\cc4ZtMPR.s:3386   .bss.POTS:00000000 POTS
  C:\Temp\cc4ZtMPR.s:3339   .bss.IMU_Accel:00000000 IMU_Accel
  C:\Temp\cc4ZtMPR.s:3332   .bss.IMU_Gyro:00000000 IMU_Gyro
  C:\Temp\cc4ZtMPR.s:3325   .bss.CurrentMonitor_Barrel:00000000 CurrentMonitor_Barrel
  C:\Temp\cc4ZtMPR.s:3318   .bss.CurrentMonitor_Servo:00000000 CurrentMonitor_Servo
  C:\Temp\cc4ZtMPR.s:3311   .bss.CurrentMonitor_Stepper:00000000 CurrentMonitor_Stepper
  C:\Temp\cc4ZtMPR.s:703    .text.updateBoard:00000000 $t
  C:\Temp\cc4ZtMPR.s:709    .text.updateBoard:00000000 updateBoard
  C:\Temp\cc4ZtMPR.s:978    .text.updateBoard:00000150 $d
  C:\Temp\cc4ZtMPR.s:3360   .bss.LED_states:00000000 LED_states
  C:\Temp\cc4ZtMPR.s:3353   .bss.Relay_states:00000000 Relay_states
  C:\Temp\cc4ZtMPR.s:3346   .bss.NeoPixel_states:00000000 NeoPixel_states
  C:\Temp\cc4ZtMPR.s:3304   .bss.SEG_number_state:00000000 SEG_number_state
  C:\Temp\cc4ZtMPR.s:3297   .bss.actualSegNumber:00000000 actualSegNumber
  C:\Temp\cc4ZtMPR.s:3290   .bss.Servo_state:00000000 Servo_state
  C:\Temp\cc4ZtMPR.s:3283   .bss.actualServoState:00000000 actualServoState
  C:\Temp\cc4ZtMPR.s:3270   .bss.StepperRevolution_state:00000000 StepperRevolution_state
  C:\Temp\cc4ZtMPR.s:3263   .bss.actualStepperRevolution:00000000 actualStepperRevolution
  C:\Temp\cc4ZtMPR.s:3256   .bss.StepperSpeed_state:00000000 StepperSpeed_state
  C:\Temp\cc4ZtMPR.s:3249   .bss.actualStepperNumber:00000000 actualStepperNumber
  C:\Temp\cc4ZtMPR.s:3276   .bss.StepperMode_state:00000000 StepperMode_state
  C:\Temp\cc4ZtMPR.s:996    .text.receivedFromSimulink:00000000 $t
  C:\Temp\cc4ZtMPR.s:1002   .text.receivedFromSimulink:00000000 receivedFromSimulink
  C:\Temp\cc4ZtMPR.s:1333   .text.receivedFromSimulink:0000013c $d
  C:\Temp\cc4ZtMPR.s:3191   .bss.bigBuffer:00000000 bigBuffer
  C:\Temp\cc4ZtMPR.s:3184   .bss.UART4_rxBuffer:00000000 UART4_rxBuffer
  C:\Temp\cc4ZtMPR.s:1347   .text.Error_Handler:00000000 $t
  C:\Temp\cc4ZtMPR.s:1353   .text.Error_Handler:00000000 Error_Handler
  C:\Temp\cc4ZtMPR.s:1385   .text.MX_TIM2_Init:00000000 $t
  C:\Temp\cc4ZtMPR.s:1390   .text.MX_TIM2_Init:00000000 MX_TIM2_Init
  C:\Temp\cc4ZtMPR.s:1539   .text.MX_TIM2_Init:0000009c $d
  C:\Temp\cc4ZtMPR.s:3463   .bss.htim2:00000000 htim2
  C:\Temp\cc4ZtMPR.s:1544   .text.MX_I2C1_Init:00000000 $t
  C:\Temp\cc4ZtMPR.s:1549   .text.MX_I2C1_Init:00000000 MX_I2C1_Init
  C:\Temp\cc4ZtMPR.s:1606   .text.MX_I2C1_Init:0000002c $d
  C:\Temp\cc4ZtMPR.s:3484   .bss.hi2c1:00000000 hi2c1
  C:\Temp\cc4ZtMPR.s:1613   .text.MX_ADC1_Init:00000000 $t
  C:\Temp\cc4ZtMPR.s:1618   .text.MX_ADC1_Init:00000000 MX_ADC1_Init
ARM GAS  C:\Temp\cc4ZtMPR.s 			page 103


  C:\Temp\cc4ZtMPR.s:1781   .text.MX_ADC1_Init:000000a4 $d
  C:\Temp\cc4ZtMPR.s:3498   .bss.hadc1:00000000 hadc1
  C:\Temp\cc4ZtMPR.s:1788   .text.MX_TIM7_Init:00000000 $t
  C:\Temp\cc4ZtMPR.s:1793   .text.MX_TIM7_Init:00000000 MX_TIM7_Init
  C:\Temp\cc4ZtMPR.s:1867   .text.MX_TIM7_Init:00000044 $d
  C:\Temp\cc4ZtMPR.s:3428   .bss.htim7:00000000 htim7
  C:\Temp\cc4ZtMPR.s:1873   .text.MX_TIM6_Init:00000000 $t
  C:\Temp\cc4ZtMPR.s:1878   .text.MX_TIM6_Init:00000000 MX_TIM6_Init
  C:\Temp\cc4ZtMPR.s:1953   .text.MX_TIM6_Init:00000048 $d
  C:\Temp\cc4ZtMPR.s:3435   .bss.htim6:00000000 htim6
  C:\Temp\cc4ZtMPR.s:1959   .text.MX_I2C2_Init:00000000 $t
  C:\Temp\cc4ZtMPR.s:1964   .text.MX_I2C2_Init:00000000 MX_I2C2_Init
  C:\Temp\cc4ZtMPR.s:2021   .text.MX_I2C2_Init:0000002c $d
  C:\Temp\cc4ZtMPR.s:3477   .bss.hi2c2:00000000 hi2c2
  C:\Temp\cc4ZtMPR.s:2028   .text.MX_TIM4_Init:00000000 $t
  C:\Temp\cc4ZtMPR.s:2033   .text.MX_TIM4_Init:00000000 MX_TIM4_Init
  C:\Temp\cc4ZtMPR.s:2133   .text.MX_TIM4_Init:00000064 $d
  C:\Temp\cc4ZtMPR.s:3449   .bss.htim4:00000000 htim4
  C:\Temp\cc4ZtMPR.s:2139   .text.MX_TIM1_Init:00000000 $t
  C:\Temp\cc4ZtMPR.s:2144   .text.MX_TIM1_Init:00000000 MX_TIM1_Init
  C:\Temp\cc4ZtMPR.s:2329   .text.MX_TIM1_Init:000000c4 $d
  C:\Temp\cc4ZtMPR.s:3470   .bss.htim1:00000000 htim1
  C:\Temp\cc4ZtMPR.s:2335   .text.MX_TIM3_Init:00000000 $t
  C:\Temp\cc4ZtMPR.s:2340   .text.MX_TIM3_Init:00000000 MX_TIM3_Init
  C:\Temp\cc4ZtMPR.s:2532   .text.MX_TIM3_Init:000000d4 $d
  C:\Temp\cc4ZtMPR.s:3456   .bss.htim3:00000000 htim3
  C:\Temp\cc4ZtMPR.s:2538   .text.MX_TIM5_Init:00000000 $t
  C:\Temp\cc4ZtMPR.s:2543   .text.MX_TIM5_Init:00000000 MX_TIM5_Init
  C:\Temp\cc4ZtMPR.s:2642   .text.MX_TIM5_Init:00000060 $d
  C:\Temp\cc4ZtMPR.s:3442   .bss.htim5:00000000 htim5
  C:\Temp\cc4ZtMPR.s:2648   .text.MX_UART4_Init:00000000 $t
  C:\Temp\cc4ZtMPR.s:2653   .text.MX_UART4_Init:00000000 MX_UART4_Init
  C:\Temp\cc4ZtMPR.s:2707   .text.MX_UART4_Init:0000002c $d
  C:\Temp\cc4ZtMPR.s:2713   .text.MX_TIM14_Init:00000000 $t
  C:\Temp\cc4ZtMPR.s:2718   .text.MX_TIM14_Init:00000000 MX_TIM14_Init
  C:\Temp\cc4ZtMPR.s:2767   .text.MX_TIM14_Init:0000002c $d
  C:\Temp\cc4ZtMPR.s:3414   .bss.htim14:00000000 htim14
  C:\Temp\cc4ZtMPR.s:2773   .text.MX_TIM8_Init:00000000 $t
  C:\Temp\cc4ZtMPR.s:2778   .text.MX_TIM8_Init:00000000 MX_TIM8_Init
  C:\Temp\cc4ZtMPR.s:2879   .text.MX_TIM8_Init:00000060 $d
  C:\Temp\cc4ZtMPR.s:3421   .bss.htim8:00000000 htim8
  C:\Temp\cc4ZtMPR.s:2885   .text.SystemClock_Config:00000000 $t
  C:\Temp\cc4ZtMPR.s:2891   .text.SystemClock_Config:00000000 SystemClock_Config
  C:\Temp\cc4ZtMPR.s:3035   .text.SystemClock_Config:00000098 $d
  C:\Temp\cc4ZtMPR.s:3041   .text.main:00000000 $t
  C:\Temp\cc4ZtMPR.s:3047   .text.main:00000000 main
  C:\Temp\cc4ZtMPR.s:3174   .text.main:00000090 $d
  C:\Temp\cc4ZtMPR.s:3181   .bss.UART4_rxBuffer:00000000 $d
  C:\Temp\cc4ZtMPR.s:3188   .bss.bigBuffer:00000000 $d
  C:\Temp\cc4ZtMPR.s:3198   .bss.headerBuffer:00000000 headerBuffer
  C:\Temp\cc4ZtMPR.s:3195   .bss.headerBuffer:00000000 $d
  C:\Temp\cc4ZtMPR.s:3204   .bss.timedout:00000000 timedout
  C:\Temp\cc4ZtMPR.s:3205   .bss.timedout:00000000 $d
  C:\Temp\cc4ZtMPR.s:3211   .bss.UART4_txBuffer:00000000 UART4_txBuffer
  C:\Temp\cc4ZtMPR.s:3208   .bss.UART4_txBuffer:00000000 $d
  C:\Temp\cc4ZtMPR.s:3217   .bss.cmd_id:00000000 cmd_id
  C:\Temp\cc4ZtMPR.s:3218   .bss.cmd_id:00000000 $d
ARM GAS  C:\Temp\cc4ZtMPR.s 			page 104


  C:\Temp\cc4ZtMPR.s:3223   .bss.state:00000000 state
  C:\Temp\cc4ZtMPR.s:3224   .bss.state:00000000 $d
  C:\Temp\cc4ZtMPR.s:3230   .data.message:00000000 message
  C:\Temp\cc4ZtMPR.s:3227   .data.message:00000000 $d
  C:\Temp\cc4ZtMPR.s:3236   .rodata.header2:00000000 header2
  C:\Temp\cc4ZtMPR.s:3246   .bss.actualStepperNumber:00000000 $d
  C:\Temp\cc4ZtMPR.s:3253   .bss.StepperSpeed_state:00000000 $d
  C:\Temp\cc4ZtMPR.s:3260   .bss.actualStepperRevolution:00000000 $d
  C:\Temp\cc4ZtMPR.s:3267   .bss.StepperRevolution_state:00000000 $d
  C:\Temp\cc4ZtMPR.s:3277   .bss.StepperMode_state:00000000 $d
  C:\Temp\cc4ZtMPR.s:3280   .bss.actualServoState:00000000 $d
  C:\Temp\cc4ZtMPR.s:3287   .bss.Servo_state:00000000 $d
  C:\Temp\cc4ZtMPR.s:3294   .bss.actualSegNumber:00000000 $d
  C:\Temp\cc4ZtMPR.s:3301   .bss.SEG_number_state:00000000 $d
  C:\Temp\cc4ZtMPR.s:3308   .bss.CurrentMonitor_Stepper:00000000 $d
  C:\Temp\cc4ZtMPR.s:3315   .bss.CurrentMonitor_Servo:00000000 $d
  C:\Temp\cc4ZtMPR.s:3322   .bss.CurrentMonitor_Barrel:00000000 $d
  C:\Temp\cc4ZtMPR.s:3329   .bss.IMU_Gyro:00000000 $d
  C:\Temp\cc4ZtMPR.s:3336   .bss.IMU_Accel:00000000 $d
  C:\Temp\cc4ZtMPR.s:3343   .bss.NeoPixel_states:00000000 $d
  C:\Temp\cc4ZtMPR.s:3350   .bss.Relay_states:00000000 $d
  C:\Temp\cc4ZtMPR.s:3357   .bss.LED_states:00000000 $d
  C:\Temp\cc4ZtMPR.s:3367   .bss.switch_states_uint8:00000000 $d
  C:\Temp\cc4ZtMPR.s:3370   .bss.switch_states:00000000 $d
  C:\Temp\cc4ZtMPR.s:3379   .rodata.adcChannelCount:00000000 adcChannelCount
  C:\Temp\cc4ZtMPR.s:3383   .bss.POTS:00000000 $d
  C:\Temp\cc4ZtMPR.s:3393   .bss.hdma_uart4_rx:00000000 hdma_uart4_rx
  C:\Temp\cc4ZtMPR.s:3390   .bss.hdma_uart4_rx:00000000 $d
  C:\Temp\cc4ZtMPR.s:3397   .bss.huart4:00000000 $d
  C:\Temp\cc4ZtMPR.s:3407   .bss.hdma_tim2_up_ch3:00000000 hdma_tim2_up_ch3
  C:\Temp\cc4ZtMPR.s:3404   .bss.hdma_tim2_up_ch3:00000000 $d
  C:\Temp\cc4ZtMPR.s:3411   .bss.htim14:00000000 $d
  C:\Temp\cc4ZtMPR.s:3418   .bss.htim8:00000000 $d
  C:\Temp\cc4ZtMPR.s:3425   .bss.htim7:00000000 $d
  C:\Temp\cc4ZtMPR.s:3432   .bss.htim6:00000000 $d
  C:\Temp\cc4ZtMPR.s:3439   .bss.htim5:00000000 $d
  C:\Temp\cc4ZtMPR.s:3446   .bss.htim4:00000000 $d
  C:\Temp\cc4ZtMPR.s:3453   .bss.htim3:00000000 $d
  C:\Temp\cc4ZtMPR.s:3460   .bss.htim2:00000000 $d
  C:\Temp\cc4ZtMPR.s:3467   .bss.htim1:00000000 $d
  C:\Temp\cc4ZtMPR.s:3474   .bss.hi2c2:00000000 $d
  C:\Temp\cc4ZtMPR.s:3481   .bss.hi2c1:00000000 $d
  C:\Temp\cc4ZtMPR.s:3491   .bss.hdma_adc1:00000000 hdma_adc1
  C:\Temp\cc4ZtMPR.s:3488   .bss.hdma_adc1:00000000 $d
  C:\Temp\cc4ZtMPR.s:3495   .bss.hadc1:00000000 $d

UNDEFINED SYMBOLS
HAL_GPIO_WritePin
HAL_GPIO_Init
HAL_NVIC_SetPriority
HAL_NVIC_EnableIRQ
HAL_GPIO_ReadPin
HAL_UART_Transmit
setRelay
set_RGB
setFloatNumber
init_ServoMotor
ARM GAS  C:\Temp\cc4ZtMPR.s 			page 105


setServoAngle
init_StepperMotor
setStepperSpeed
HAL_TIM_Base_Init
HAL_TIM_ConfigClockSource
HAL_TIM_PWM_Init
HAL_TIMEx_MasterConfigSynchronization
HAL_TIM_PWM_ConfigChannel
HAL_TIM_MspPostInit
HAL_I2C_Init
HAL_ADC_Init
HAL_ADC_ConfigChannel
HAL_TIM_IC_Init
HAL_TIM_IC_ConfigChannel
HAL_UART_Init
memset
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_Init
init_7SegDisplay
init_POTs
init_IMU
init_AllCurrentMonitors
HAL_UART_Receive_DMA
